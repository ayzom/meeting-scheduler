/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkvue3_starter"] = self["webpackChunkvue3_starter"] || []).push([["vendors-node_modules_css-loader_dist_cjs_js_clonedRuleSet-1_use_1_node_modules_vue-cal_dist_v-dc3beb"],{

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-cal/dist/vuecal.css":
/*!************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-cal/dist/vuecal.css ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = __webpack_require__(/*! ../../css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".vuecal__weekdays-headings{border-bottom:1px solid #ddd;margin-bottom:-1px}.vuecal--view-with-time .vuecal__weekdays-headings,.vuecal--week-numbers .vuecal__weekdays-headings{padding-left:3em}.vuecal--view-with-time.vuecal--twelve-hour .vuecal__weekdays-headings{font-size:.9em;padding-left:4em}.vuecal--overflow-x.vuecal--view-with-time .vuecal__weekdays-headings{padding-left:0}.vuecal__heading{width:100%;height:2.8em;font-weight:400;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;overflow:hidden}.vuecal__heading>.vuecal__flex{width:100%;height:100%;-webkit-box-align:initial!important;-ms-flex-align:initial!important;align-items:normal!important}.vuecal--sticky-split-labels .vuecal__heading{height:3.4em}.vuecal--day-view .vuecal__heading,.vuecal--month-view .vuecal__heading,.vuecal--week-view .vuecal__heading{width:14.2857%}.vuecal--hide-weekends.vuecal--day-view .vuecal__heading,.vuecal--hide-weekends.vuecal--month-view .vuecal__heading,.vuecal--hide-weekends.vuecal--week-view .vuecal__heading,.vuecal--years-view .vuecal__heading{width:20%}.vuecal--year-view .vuecal__heading{width:33.33%}.vuecal__heading .weekday-label{-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .xsmall{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .small,.vuecal__heading .xsmall{display:none}.vuecal .vuecal__split-days-headers{-webkit-box-align:center;-ms-flex-align:center;align-items:center}@media screen and (max-width:550px){.vuecal__heading{line-height:1.2}.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .xsmall,.vuecal__heading .small{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .full,.vuecal__heading .xsmall{display:none}.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .small,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .xsmall{display:block}.vuecal--overflow-x .vuecal__heading .small,.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--small.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .full,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .small{display:none}}@media screen and (max-width:450px){.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .xsmall,.vuecal__heading .xsmall{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .full,.vuecal__heading .small{display:none}.vuecal--small.vuecal--overflow-x .vuecal__heading .small,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .xsmall{display:block}.vuecal--small.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .full,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .small{display:none}}.vuecal__header button{outline:none;font-family:inherit}.vuecal__menu{padding:0;margin:0;list-style-type:none;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background-color:rgba(0,0,0,.02)}.vuecal__view-btn{background:none;border:none;padding:.3em 1em;height:2.2em;font-size:1.3em;border-bottom:0 solid currentColor;cursor:pointer;color:inherit;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:.2s;transition:.2s}.vuecal__view-btn--active{border-bottom-width:2px;background:hsla(0,0%,100%,.15)}.vuecal__title-bar{background-color:rgba(0,0,0,.1);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;font-size:1.4em;line-height:1.3;min-height:2em}.vuecal--xsmall .vuecal__title-bar{font-size:1.3em}.vuecal__title{position:relative;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__title button{cursor:pointer;background:none;border:none}.vuecal__title button.slide-fade--left-leave-active,.vuecal__title button.slide-fade--right-leave-active{width:100%}.vuecal__today-btn{position:relative;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-ms-flexbox;display:flex;font-size:.8em;background:none;border:none}.vuecal__today-btn span.default{font-size:.8em;padding:3px 6px;text-transform:uppercase;cursor:pointer}.vuecal__arrow{cursor:pointer;position:relative;z-index:1;background:none;border:none;white-space:nowrap}.vuecal__arrow--prev{margin-left:.6em}.vuecal__arrow--next{margin-right:.6em}.vuecal__arrow i.angle{display:inline-block;border:solid currentColor;border-width:0 2px 2px 0;padding:.25em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.vuecal__arrow--prev i.angle{border-width:2px 0 0 2px}.vuecal__arrow--highlighted,.vuecal__today-btn--highlighted,.vuecal__view-btn--highlighted{position:relative;background-color:rgba(0,0,0,.04)}.vuecal__arrow--highlighted *,.vuecal__today-btn--highlighted *,.vuecal__view-btn--highlighted *{pointer-events:none}.vuecal__arrow--highlighted:after,.vuecal__arrow--highlighted:before,.vuecal__today-btn--highlighted:after,.vuecal__today-btn--highlighted:before,.vuecal__view-btn--highlighted:after,.vuecal__view-btn--highlighted:before{content:\\\"\\\";background-color:inherit;-webkit-animation:sonar .8s ease-out infinite;animation:sonar .8s ease-out infinite;position:absolute;top:50%;left:50%;pointer-events:none}.vuecal__arrow--highlighted:before,.vuecal__today-btn--highlighted:before,.vuecal__view-btn--highlighted:before{width:3em;height:3em;border-radius:3em;margin-top:-1.5em;margin-left:-1.5em}.vuecal__arrow--highlighted:after,.vuecal__today-btn--highlighted:after,.vuecal__view-btn--highlighted:after{-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-delay:.1s;animation-delay:.1s;width:2.6em;height:2.6em;border-radius:2.6em;margin-top:-1.3em;margin-left:-1.3em}@-webkit-keyframes sonar{0%,20%{opacity:1}to{-webkit-transform:scale(2.5);transform:scale(2.5);opacity:0}}@keyframes sonar{0%,20%{opacity:1}to{-webkit-transform:scale(2.5);transform:scale(2.5);opacity:0}}@media screen and (max-width:450px){.vuecal__title{font-size:.9em}.vuecal__view-btn{padding-left:.6em;padding-right:.6em}}@media screen and (max-width:350px){.vuecal__view-btn{font-size:1.1em}}.vuecal__event{color:#666;background-color:hsla(0,0%,97.3%,.8);position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;left:0;width:100%;z-index:1;-webkit-transition:left .3s,width .3s,-webkit-box-shadow .3s;transition:left .3s,width .3s,-webkit-box-shadow .3s;transition:box-shadow .3s,left .3s,width .3s;transition:box-shadow .3s,left .3s,width .3s,-webkit-box-shadow .3s;overflow:hidden}.vuecal--no-time .vuecal__event{min-height:8px}.vuecal:not(.vuecal--dragging-event) .vuecal__event:hover{z-index:2}.vuecal__cell .vuecal__event *{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}.vuecal--view-with-time .vuecal__event:not(.vuecal__event--all-day){position:absolute}.vuecal--view-with-time .vuecal__bg .vuecal__event--all-day{position:absolute;top:0;bottom:0;z-index:0;opacity:.6;width:auto;right:0}.vuecal--view-with-time .vuecal__all-day .vuecal__event--all-day{position:relative;left:0}.vuecal__event--background{z-index:0}.vuecal__event--focus,.vuecal__event:focus{-webkit-box-shadow:1px 1px 6px rgba(0,0,0,.2);box-shadow:1px 1px 6px rgba(0,0,0,.2);z-index:3;outline:none}.vuecal__event.vuecal__event--dragging{opacity:.7}.vuecal__event.vuecal__event--static{opacity:0;-webkit-transition:opacity .1s;transition:opacity .1s}@-moz-document url-prefix(){.vuecal__event.vuecal__event--dragging{opacity:1}}.vuecal__event-resize-handle{position:absolute;bottom:0;left:0;right:0;height:1em;background-color:hsla(0,0%,100%,.3);opacity:0;-webkit-transform:translateY(110%);transform:translateY(110%);-webkit-transition:.3s;transition:.3s;cursor:ns-resize}.vuecal__event--focus .vuecal__event-resize-handle,.vuecal__event--resizing .vuecal__event-resize-handle,.vuecal__event:focus .vuecal__event-resize-handle,.vuecal__event:hover .vuecal__event-resize-handle{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}.vuecal__event--dragging .vuecal__event-resize-handle{display:none}.vuecal__event-delete{position:absolute;top:0;left:0;right:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;height:1.4em;line-height:1.4em;background-color:rgba(221,51,51,.85);color:#fff;z-index:0;cursor:pointer;-webkit-transform:translateY(-110%);transform:translateY(-110%);-webkit-transition:.3s;transition:.3s}.vuecal__event .vuecal__event-delete{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.vuecal--full-height-delete .vuecal__event-delete{height:auto;bottom:0}.vuecal--full-height-delete .vuecal__event-delete:before{content:\\\"\\\";width:1.7em;height:1.8em;display:block;background-image:url('data:image/svg+xml;utf8,<svg width=\\\"512\\\" height=\\\"512\\\" viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12 1.5a10.5 10.5 0 100 21 10.5 10.5 0 000-21zm5 14.1c.2 0 .2.2.2.2l-.1.3-1 1-.3.1h-.2L12 13.5l-3.5 3.6h-.3-.3l-1-1v-.4-.2l3.6-3.6-3.6-3.5A.4.4 0 017 8l1-1 .3-.2c.1 0 .2 0 .2.2l3.6 3.5L15.6 7l.2-.2c.1 0 .2 0 .3.2l1 1v.5L13.5 12z\\\" fill=\\\"%23fff\\\" opacity=\\\".9\\\"/></svg>')}.vuecal__event--deletable .vuecal__event-delete{-webkit-transform:translateY(0);transform:translateY(0);z-index:1}.vuecal__event--deletable.vuecal__event--dragging .vuecal__event-delete{opacity:0;-webkit-transition:none;transition:none}.vuecal--month-view .vuecal__event-title{font-size:.85em}.vuecal--short-events .vuecal__event-title{text-align:left;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding:0 3px}.vuecal__event-content,.vuecal__event-title{-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}.vuecal__event-title--edit{border-bottom:1px solid transparent;text-align:center;-webkit-transition:.3s;transition:.3s;color:inherit;background-image:url('data:image/svg+xml;utf8,<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M442 150l-39 39-80-80 39-39q6-6 15-6t15 6l50 50q6 6 6 15t-6 15zM64 368l236-236 80 80-236 236H64v-80z\\\" fill=\\\"%23000\\\" opacity=\\\".4\\\"/></svg>');background-repeat:no-repeat;background-position:120% .15em;background-size:.4em;outline:none;width:100%}.vuecal__event-title--edit:focus,.vuecal__event-title--edit:hover{border-color:rgba(0,0,0,.4);background-position:99% .15em;background-size:1.2em}.vuecal__cell{position:relative;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;-webkit-transition:background-color .15s ease-in-out;transition:background-color .15s ease-in-out}.vuecal__cells.month-view .vuecal__cell,.vuecal__cells.week-view .vuecal__cell{width:14.2857%}.vuecal--hide-weekends .vuecal__cells.month-view .vuecal__cell,.vuecal--hide-weekends .vuecal__cells.week-view .vuecal__cell,.vuecal__cells.years-view .vuecal__cell{width:20%}.vuecal__cells.year-view .vuecal__cell{width:33.33%}.vuecal__cells.day-view .vuecal__cell{-webkit-box-flex:1;-ms-flex:1;flex:1}.vuecal--overflow-x.vuecal--day-view .vuecal__cell{width:auto}.vuecal--click-to-navigate .vuecal__cell:not(.vuecal__cell--disabled){cursor:pointer}.vuecal--day-view.vuecal--no-time .vuecal__cell:not(.vuecal__cell--has-splits),.vuecal--view-with-time .vuecal__cell,.vuecal--week-view.vuecal--no-time .vuecal__cell:not(.vuecal__cell--has-splits){display:block}.vuecal__cell.vuecal__cell--has-splits{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;display:-webkit-box;display:-ms-flexbox;display:flex}.vuecal__cell:before{content:\\\"\\\";position:absolute;z-index:0;top:0;left:0;right:-1px;bottom:-1px;border:1px solid hsla(0,0%,76.9%,.25)}.vuecal--overflow-x.vuecal--day-view .vuecal__cell:before{bottom:0}.vuecal__cell--current,.vuecal__cell--today{background-color:rgba(240,240,255,.4);z-index:1}.vuecal__cell--selected{background-color:rgba(235,255,245,.4);z-index:2}.vuecal--day-view .vuecal__cell--selected{background:none}.vuecal__cell--out-of-scope{color:rgba(0,0,0,.25)}.vuecal__cell--disabled{color:rgba(0,0,0,.25);cursor:not-allowed}.vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal__cell-split.vuecal__cell-split--highlighted{background-color:rgba(0,0,0,.04);-webkit-transition-duration:5ms;transition-duration:5ms}.vuecal__cell-content{position:relative;width:100%;height:100%;outline:none}.vuecal--month-view .vuecal__cell-content,.vuecal--year-view .vuecal__cell-content,.vuecal--years-view .vuecal__cell-content{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__cell-split{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;height:100%;position:relative;-webkit-transition:background-color .15s ease-in-out;transition:background-color .15s ease-in-out}.vuecal__cell-events{width:100%}.vuecal__cell-events-count{left:50%;top:65%;-webkit-transform:translateX(-50%);transform:translateX(-50%);min-width:12px;height:12px;line-height:12px;padding:0 3px;background:#999;color:#fff;border-radius:12px;font-size:10px}.vuecal__cell-events-count,.vuecal__cell .vuecal__special-hours{position:absolute;-webkit-box-sizing:border-box;box-sizing:border-box}.vuecal__cell .vuecal__special-hours{left:0;right:0}.vuecal--overflow-x.vuecal--week-view .vuecal__cell,.vuecal__cell-split{overflow:hidden}.vuecal__no-event{padding-top:1em;color:#aaa;justify-self:flex-start;margin-bottom:auto}.vuecal__all-day .vuecal__no-event{display:none}.vuecal__now-line{position:absolute;left:0;width:100%;height:0;color:red;border-top:1px solid currentColor;opacity:.6;z-index:1}.vuecal__now-line:before{content:\\\"\\\";position:absolute;top:-6px;left:0;border:5px solid transparent;border-left-color:currentColor}.vuecal{height:100%;-webkit-box-shadow:0 0 0 1px inset rgba(0,0,0,.08);box-shadow:inset 0 0 0 1px rgba(0,0,0,.08)}.vuecal *,.vuecal--has-touch :not(.vuecal__event-title--edit){-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.vuecal--has-touch :not(.vuecal__event-title--edit){-webkit-touch-callout:none}.vuecal .clickable{cursor:pointer}.vuecal--drag-creating-event,.vuecal--resizing-event{cursor:ns-resize}.vuecal--dragging-event{cursor:move;cursor:-webkit-grabbing;cursor:grabbing}.vuecal .dragging-helper{position:absolute;width:60px;height:40px;background:rgba(138,190,230,.8);border:1px solid #61a9e0;z-index:10}.vuecal--xsmall{font-size:.9em}.vuecal__flex{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.vuecal__flex[column]{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.vuecal__flex[column],.vuecal__flex[grow]{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.vuecal__flex[grow]{width:100%}.vuecal__flex[wrap]{-ms-flex-wrap:wrap;flex-wrap:wrap}.vuecal__split-days-headers.slide-fade--right-leave-active{display:none}.vuecal--week-numbers.vuecal--month-view .vuecal__split-days-headers{margin-left:3em}.vuecal--day-view:not(.vuecal--overflow-x) .vuecal__split-days-headers{margin-left:3em;height:2.2em}.vuecal--day-view.vuecal--twelve-hour:not(.vuecal--overflow-x) .vuecal__split-days-headers{margin-left:4em}.vuecal__split-days-headers .day-split-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%}.vuecal__split-days-headers .vuecal--day-view.vuecal--overflow-x.vuecal--sticky-split-labels .day-split-header{height:1.5em}.vuecal__body{position:relative;overflow:hidden}.vuecal__all-day{min-height:1.7em;margin-bottom:-1px;-ms-flex-negative:0;flex-shrink:0}.vuecal__all-day-text{width:3em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#999;padding-right:2px;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;border-bottom:1px solid #ddd;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}.vuecal__all-day-text span{font-size:.85em;text-align:right;line-height:1.1}.vuecal--twelve-hour .vuecal__all-day>span{width:4em}.vuecal__bg{overflow:auto;overflow-x:hidden;-webkit-overflow-scrolling:touch;min-height:60px;position:relative;width:100%;margin-bottom:1px}.vuecal--no-time .vuecal__bg{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;overflow:auto}.vuecal__week-numbers{width:3em;-ms-flex-negative:0!important;flex-shrink:0!important}.vuecal__week-numbers .vuecal__week-number-cell{opacity:.4;font-size:.9em;-webkit-box-align:center;-ms-flex-align:center;align-items:center;justify-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__scrollbar-check{position:absolute;top:0;left:0;right:0;bottom:0;overflow:scroll;visibility:hidden;z-index:-1}.vuecal__scrollbar-check div{height:120%}.vuecal__time-column{width:3em;height:100%;-ms-flex-negative:0;flex-shrink:0}.vuecal--twelve-hour .vuecal__time-column{width:4em;font-size:.9em}.vuecal--overflow-x.vuecal--week-view .vuecal__time-column{margin-top:2.8em;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.3);box-shadow:0 1px 1px rgba(0,0,0,.3)}.vuecal--overflow-x.vuecal--week-view.vuecal--sticky-split-labels .vuecal__time-column{margin-top:3.4em}.vuecal--overflow-x.vuecal--day-view.vuecal--sticky-split-labels .vuecal__time-column{margin-top:1.5em}.vuecal__time-column .vuecal__time-cell{color:#999;text-align:right;padding-right:2px;font-size:.9em}.vuecal__time-column .vuecal__time-cell-line:before{content:\\\"\\\";position:absolute;left:0;right:0;border-top:1px solid hsla(0,0%,76.9%,.3)}.vuecal__cells{margin:0 1px 1px 0}.vuecal--overflow-x.vuecal--day-view .vuecal__cells{margin:0}.vuecal--events-on-month-view.vuecal--short-events .vuecal__cells{width:99.9%}.vuecal--overflow-x.vuecal--day-view .vuecal__cells,.vuecal--overflow-x.vuecal--week-view .vuecal__cells{-ms-flex-wrap:nowrap;flex-wrap:nowrap;overflow:auto}.slide-fade--left-enter-active,.slide-fade--left-leave-active,.slide-fade--right-enter-active,.slide-fade--right-leave-active{-webkit-transition:.25s ease-out;transition:.25s ease-out}.slide-fade--left-enter-from,.slide-fade--right-leave-to{-webkit-transform:translateX(-15px);transform:translateX(-15px);opacity:0}.slide-fade--left-leave-to,.slide-fade--right-enter-from{-webkit-transform:translateX(15px);transform:translateX(15px);opacity:0}.slide-fade--left-leave-active,.slide-fade--right-leave-active{position:absolute!important;height:100%}.vuecal__title-bar .slide-fade--left-leave-active,.vuecal__title-bar .slide-fade--right-leave-active{left:0;right:0;height:auto}.vuecal__heading .slide-fade--left-leave-active,.vuecal__heading .slide-fade--right-leave-active{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.vuecal--green-theme .vuecal__cell-events-count,.vuecal--green-theme .vuecal__menu{background-color:#42b983;color:#fff}.vuecal--green-theme .vuecal__title-bar{background-color:#e4f5ef}.vuecal--green-theme .vuecal__cell--current,.vuecal--green-theme .vuecal__cell--today{background-color:rgba(240,240,255,.4)}.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--selected{background-color:rgba(235,255,245,.4)}.vuecal--green-theme .vuecal__cell--selected:before{border-color:rgba(66,185,131,.5)}.vuecal--green-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--green-theme .vuecal__cell-split--highlighted{background-color:rgba(195,255,225,.5)}.vuecal--green-theme .vuecal__arrow--highlighted,.vuecal--green-theme .vuecal__today-btn--highlighted,.vuecal--green-theme .vuecal__view-btn--highlighted{background-color:rgba(136,236,191,.25)}.vuecal--blue-theme .vuecal__cell-events-count,.vuecal--blue-theme .vuecal__menu{background-color:rgba(66,163,185,.8);color:#fff}.vuecal--blue-theme .vuecal__title-bar{background-color:rgba(0,165,188,.3)}.vuecal--blue-theme .vuecal__cell--current,.vuecal--blue-theme .vuecal__cell--today{background-color:rgba(240,240,255,.4)}.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--selected{background-color:rgba(235,253,255,.4)}.vuecal--blue-theme .vuecal__cell--selected:before{border-color:rgba(115,191,204,.5)}.vuecal--blue-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--blue-theme .vuecal__cell-split--highlighted{background-color:rgba(0,165,188,.06)}.vuecal--blue-theme .vuecal__arrow--highlighted,.vuecal--blue-theme .vuecal__today-btn--highlighted,.vuecal--blue-theme .vuecal__view-btn--highlighted{background-color:rgba(66,163,185,.2)}.vuecal--rounded-theme .vuecal__weekdays-headings{border:none}.vuecal--rounded-theme .vuecal__cell,.vuecal--rounded-theme .vuecal__cell:before{background:none;border:none}.vuecal--rounded-theme .vuecal__cell--out-of-scope{opacity:.4}.vuecal--rounded-theme .vuecal__cell-content{width:30px;height:30px;-webkit-box-flex:0;-ms-flex-positive:0;flex-grow:0;border:1px solid transparent;border-radius:30px;color:#333}.vuecal--rounded-theme.vuecal--day-view .vuecal__cell-content{width:auto;background:none}.vuecal--rounded-theme.vuecal--year-view .vuecal__cell{width:33.33%}.vuecal--rounded-theme.vuecal--year-view .vuecal__cell-content{width:85px}.vuecal--rounded-theme.vuecal--years-view .vuecal__cell-content{width:52px}.vuecal--rounded-theme .vuecal__cell{background-color:transparent!important}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell-content{background-color:#f1faf7}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{background-color:#42b983;color:#fff}.vuecal--rounded-theme.vuecal--green-theme .vuecal--day-view .vuecal__cell--today:before{background-color:rgba(66,185,131,.05)}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{border-color:#42b983}.vuecal--rounded-theme.vuecal--green-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--rounded-theme.vuecal--green-theme .vuecal__cell-split--highlighted{background-color:rgba(195,255,225,.5)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell-content{background-color:rgba(100,182,255,.2)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{background-color:#8fb7e4;color:#fff}.vuecal--rounded-theme.vuecal--blue-theme .vuecal--day-view .vuecal__cell--today:before{background-color:rgba(143,183,228,.1)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{border-color:#61a9e0}.vuecal--rounded-theme.vuecal--blue-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--rounded-theme.vuecal--blue-theme .vuecal__cell-split--highlighted{background-color:rgba(0,165,188,.06)}.vuecal--date-picker .vuecal__title-bar{font-size:1.2em}.vuecal--date-picker .vuecal__heading{height:2.2em;font-weight:500;opacity:.4}.vuecal--date-picker .vuecal__weekdays-headings{border:none}.vuecal--date-picker .vuecal__body{margin-left:1px}.vuecal--date-picker .vuecal__cell,.vuecal--date-picker .vuecal__cell:before{background:none;border:none}.vuecal--date-picker .vuecal__cell-content{height:26px;-webkit-box-flex:0;-ms-flex-positive:0;flex-grow:0;border:1px solid transparent;border-radius:25px;-webkit-transition:background-color .2s cubic-bezier(.39,.58,.57,1);transition:background-color .2s cubic-bezier(.39,.58,.57,1)}.vuecal--date-picker.vuecal--years-view .vuecal__cell-content{-webkit-box-flex:0;-ms-flex:0;flex:0;padding:0 4px;height:24px}.vuecal--date-picker.vuecal--year-view .vuecal__cell-content{-webkit-box-flex:0;-ms-flex:0;flex:0;padding:0 15px}.vuecal--date-picker.vuecal--month-view .vuecal__cell-content{width:26px}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell-content:hover{background-color:rgba(0,0,0,.1)}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{background-color:#42b982;color:#fff}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--current .vuecal__cell-content,.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{border-color:#42b982}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/vue-cal/dist/vuecal.css\"],\"names\":[],\"mappings\":\"AAAA,2BAA2B,4BAA4B,CAAC,kBAAkB,CAAC,oGAAoG,gBAAgB,CAAC,uEAAuE,cAAc,CAAC,gBAAgB,CAAC,sEAAsE,cAAc,CAAC,iBAAiB,UAAU,CAAC,YAAY,CAAC,eAAe,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,eAAe,CAAC,+BAA+B,UAAU,CAAC,WAAW,CAAC,mCAAmC,CAAC,gCAAgC,CAAC,4BAA4B,CAAC,8CAA8C,YAAY,CAAC,4GAA4G,cAAc,CAAC,mNAAmN,SAAS,CAAC,oCAAoC,YAAY,CAAC,gCAAgC,mBAAmB,CAAC,aAAa,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,gFAAgF,aAAa,CAAC,8MAA8M,YAAY,CAAC,oCAAoC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oCAAoC,iBAAiB,eAAe,CAAC,wGAAwG,aAAa,CAAC,6MAA6M,YAAY,CAAC,iKAAiK,aAAa,CAAC,kUAAkU,YAAY,CAAC,CAAC,oCAAoC,0GAA0G,aAAa,CAAC,2MAA2M,YAAY,CAAC,sHAAsH,aAAa,CAAC,yOAAyO,YAAY,CAAC,CAAC,uBAAuB,YAAY,CAAC,mBAAmB,CAAC,cAAc,SAAS,CAAC,QAAQ,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,gCAAgC,CAAC,kBAAkB,eAAe,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,eAAe,CAAC,kCAAkC,CAAC,cAAc,CAAC,aAAa,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,cAAc,CAAC,0BAA0B,uBAAuB,CAAC,8BAA8B,CAAC,mBAAmB,+BAA+B,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,eAAe,CAAC,eAAe,CAAC,cAAc,CAAC,mCAAmC,eAAe,CAAC,eAAe,iBAAiB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,sBAAsB,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,yGAAyG,UAAU,CAAC,mBAAmB,iBAAiB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,gCAAgC,cAAc,CAAC,eAAe,CAAC,wBAAwB,CAAC,cAAc,CAAC,eAAe,cAAc,CAAC,iBAAiB,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,kBAAkB,CAAC,qBAAqB,gBAAgB,CAAC,qBAAqB,iBAAiB,CAAC,uBAAuB,oBAAoB,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,aAAa,CAAC,gCAAgC,CAAC,wBAAwB,CAAC,6BAA6B,wBAAwB,CAAC,2FAA2F,iBAAiB,CAAC,gCAAgC,CAAC,iGAAiG,mBAAmB,CAAC,6NAA6N,UAAU,CAAC,wBAAwB,CAAC,6CAA6C,CAAC,qCAAqC,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,gHAAgH,SAAS,CAAC,UAAU,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,6GAA6G,+BAA+B,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,yBAAyB,OAAO,SAAS,CAAC,GAAG,4BAA4B,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,iBAAiB,OAAO,SAAS,CAAC,GAAG,4BAA4B,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,oCAAoC,eAAe,cAAc,CAAC,kBAAkB,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,oCAAoC,kBAAkB,eAAe,CAAC,CAAC,eAAe,UAAU,CAAC,oCAAoC,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,4DAA4D,CAAC,oDAAoD,CAAC,4CAA4C,CAAC,mEAAmE,CAAC,eAAe,CAAC,gCAAgC,cAAc,CAAC,0DAA0D,SAAS,CAAC,+BAA+B,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,oEAAoE,iBAAiB,CAAC,4DAA4D,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,iEAAiE,iBAAiB,CAAC,MAAM,CAAC,2BAA2B,SAAS,CAAC,2CAA2C,6CAA6C,CAAC,qCAAqC,CAAC,SAAS,CAAC,YAAY,CAAC,uCAAuC,UAAU,CAAC,qCAAqC,SAAS,CAAC,8BAA8B,CAAC,sBAAsB,CAAC,4BAA4B,uCAAuC,SAAS,CAAC,CAAC,6BAA6B,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,mCAAmC,CAAC,SAAS,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,cAAc,CAAC,gBAAgB,CAAC,6MAA6M,SAAS,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,sDAAsD,YAAY,CAAC,sBAAsB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,YAAY,CAAC,iBAAiB,CAAC,oCAAoC,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,mCAAmC,CAAC,2BAA2B,CAAC,sBAAsB,CAAC,cAAc,CAAC,qCAAqC,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,kDAAkD,WAAW,CAAC,QAAQ,CAAC,yDAAyD,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,wZAAwZ,CAAC,gDAAgD,+BAA+B,CAAC,uBAAuB,CAAC,SAAS,CAAC,wEAAwE,SAAS,CAAC,uBAAuB,CAAC,eAAe,CAAC,yCAAyC,eAAe,CAAC,2CAA2C,eAAe,CAAC,eAAe,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,aAAa,CAAC,4CAA4C,oBAAoB,CAAC,gBAAgB,CAAC,YAAY,CAAC,2BAA2B,mCAAmC,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,cAAc,CAAC,aAAa,CAAC,+PAA+P,CAAC,2BAA2B,CAAC,8BAA8B,CAAC,oBAAoB,CAAC,YAAY,CAAC,UAAU,CAAC,kEAAkE,2BAA2B,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,cAAc,iBAAiB,CAAC,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,oDAAoD,CAAC,4CAA4C,CAAC,+EAA+E,cAAc,CAAC,qKAAqK,SAAS,CAAC,uCAAuC,YAAY,CAAC,sCAAsC,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,mDAAmD,UAAU,CAAC,sEAAsE,cAAc,CAAC,qMAAqM,aAAa,CAAC,uCAAuC,6BAA6B,CAAC,4BAA4B,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,qBAAqB,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,qCAAqC,CAAC,0DAA0D,QAAQ,CAAC,4CAA4C,qCAAqC,CAAC,SAAS,CAAC,wBAAwB,qCAAqC,CAAC,SAAS,CAAC,0CAA0C,eAAe,CAAC,4BAA4B,qBAAqB,CAAC,wBAAwB,qBAAqB,CAAC,kBAAkB,CAAC,8GAA8G,gCAAgC,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,sBAAsB,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,6HAA6H,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,oBAAoB,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,WAAW,CAAC,iBAAiB,CAAC,oDAAoD,CAAC,4CAA4C,CAAC,qBAAqB,UAAU,CAAC,2BAA2B,QAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,cAAc,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,kBAAkB,CAAC,cAAc,CAAC,gEAAgE,iBAAiB,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,qCAAqC,MAAM,CAAC,OAAO,CAAC,wEAAwE,eAAe,CAAC,kBAAkB,eAAe,CAAC,UAAU,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,mCAAmC,YAAY,CAAC,kBAAkB,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,iCAAiC,CAAC,UAAU,CAAC,SAAS,CAAC,yBAAyB,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,4BAA4B,CAAC,8BAA8B,CAAC,QAAQ,WAAW,CAAC,kDAAkD,CAAC,0CAA0C,CAAC,8DAA8D,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,oDAAoD,0BAA0B,CAAC,mBAAmB,cAAc,CAAC,qDAAqD,gBAAgB,CAAC,wBAAwB,WAAW,CAAC,uBAAuB,CAAC,eAAe,CAAC,yBAAyB,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,+BAA+B,CAAC,wBAAwB,CAAC,UAAU,CAAC,gBAAgB,cAAc,CAAC,cAAc,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,sBAAsB,2BAA2B,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,0CAA0C,kBAAkB,CAAC,iBAAiB,CAAC,aAAa,CAAC,oBAAoB,UAAU,CAAC,oBAAoB,kBAAkB,CAAC,cAAc,CAAC,2DAA2D,YAAY,CAAC,qEAAqE,eAAe,CAAC,uEAAuE,eAAe,CAAC,YAAY,CAAC,2FAA2F,eAAe,CAAC,8CAA8C,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,yBAAyB,CAAC,YAAY,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,WAAW,CAAC,+GAA+G,YAAY,CAAC,cAAc,iBAAiB,CAAC,eAAe,CAAC,iBAAiB,gBAAgB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,aAAa,CAAC,sBAAsB,SAAS,CAAC,6BAA6B,CAAC,qBAAqB,CAAC,UAAU,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,mBAAmB,CAAC,aAAa,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,YAAY,CAAC,2BAA2B,eAAe,CAAC,gBAAgB,CAAC,eAAe,CAAC,2CAA2C,SAAS,CAAC,YAAY,aAAa,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,eAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAC,6BAA6B,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC,sBAAsB,SAAS,CAAC,6BAA6B,CAAC,uBAAuB,CAAC,gDAAgD,UAAU,CAAC,cAAc,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,yBAAyB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,iBAAiB,CAAC,UAAU,CAAC,6BAA6B,WAAW,CAAC,qBAAqB,SAAS,CAAC,WAAW,CAAC,mBAAmB,CAAC,aAAa,CAAC,0CAA0C,SAAS,CAAC,cAAc,CAAC,2DAA2D,gBAAgB,CAAC,2CAA2C,CAAC,mCAAmC,CAAC,uFAAuF,gBAAgB,CAAC,sFAAsF,gBAAgB,CAAC,wCAAwC,UAAU,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,cAAc,CAAC,oDAAoD,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,wCAAwC,CAAC,eAAe,kBAAkB,CAAC,oDAAoD,QAAQ,CAAC,kEAAkE,WAAW,CAAC,yGAAyG,oBAAoB,CAAC,gBAAgB,CAAC,aAAa,CAAC,8HAA8H,gCAAgC,CAAC,wBAAwB,CAAC,yDAAyD,mCAAmC,CAAC,2BAA2B,CAAC,SAAS,CAAC,yDAAyD,kCAAkC,CAAC,0BAA0B,CAAC,SAAS,CAAC,+DAA+D,2BAA2B,CAAC,WAAW,CAAC,qGAAqG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,iGAAiG,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,mFAAmF,wBAAwB,CAAC,UAAU,CAAC,wCAAwC,wBAAwB,CAAC,sFAAsF,qCAAqC,CAAC,oEAAoE,qCAAqC,CAAC,oDAAoD,gCAAgC,CAAC,qIAAqI,qCAAqC,CAAC,0JAA0J,sCAAsC,CAAC,iFAAiF,oCAAoC,CAAC,UAAU,CAAC,uCAAuC,mCAAmC,CAAC,oFAAoF,qCAAqC,CAAC,mEAAmE,qCAAqC,CAAC,mDAAmD,iCAAiC,CAAC,mIAAmI,oCAAoC,CAAC,uJAAuJ,oCAAoC,CAAC,kDAAkD,WAAW,CAAC,iFAAiF,eAAe,CAAC,WAAW,CAAC,mDAAmD,UAAU,CAAC,6CAA6C,UAAU,CAAC,WAAW,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,UAAU,CAAC,8DAA8D,UAAU,CAAC,eAAe,CAAC,uDAAuD,YAAY,CAAC,+DAA+D,UAAU,CAAC,gEAAgE,UAAU,CAAC,qCAAqC,sCAAsC,CAAC,wFAAwF,wBAAwB,CAAC,6GAA6G,wBAAwB,CAAC,UAAU,CAAC,yFAAyF,qCAAqC,CAAC,gHAAgH,oBAAoB,CAAC,iLAAiL,qCAAqC,CAAC,uFAAuF,qCAAqC,CAAC,4GAA4G,wBAAwB,CAAC,UAAU,CAAC,wFAAwF,qCAAqC,CAAC,+GAA+G,oBAAoB,CAAC,+KAA+K,oCAAoC,CAAC,wCAAwC,eAAe,CAAC,sCAAsC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,gDAAgD,WAAW,CAAC,mCAAmC,eAAe,CAAC,6EAA6E,eAAe,CAAC,WAAW,CAAC,2CAA2C,WAAW,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,mEAAmE,CAAC,2DAA2D,CAAC,8DAA8D,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,6DAA6D,kBAAkB,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,8DAA8D,UAAU,CAAC,wEAAwE,+BAA+B,CAAC,0FAA0F,wBAAwB,CAAC,UAAU,CAAC,gLAAgL,oBAAoB\",\"sourcesContent\":[\".vuecal__weekdays-headings{border-bottom:1px solid #ddd;margin-bottom:-1px}.vuecal--view-with-time .vuecal__weekdays-headings,.vuecal--week-numbers .vuecal__weekdays-headings{padding-left:3em}.vuecal--view-with-time.vuecal--twelve-hour .vuecal__weekdays-headings{font-size:.9em;padding-left:4em}.vuecal--overflow-x.vuecal--view-with-time .vuecal__weekdays-headings{padding-left:0}.vuecal__heading{width:100%;height:2.8em;font-weight:400;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;overflow:hidden}.vuecal__heading>.vuecal__flex{width:100%;height:100%;-webkit-box-align:initial!important;-ms-flex-align:initial!important;align-items:normal!important}.vuecal--sticky-split-labels .vuecal__heading{height:3.4em}.vuecal--day-view .vuecal__heading,.vuecal--month-view .vuecal__heading,.vuecal--week-view .vuecal__heading{width:14.2857%}.vuecal--hide-weekends.vuecal--day-view .vuecal__heading,.vuecal--hide-weekends.vuecal--month-view .vuecal__heading,.vuecal--hide-weekends.vuecal--week-view .vuecal__heading,.vuecal--years-view .vuecal__heading{width:20%}.vuecal--year-view .vuecal__heading{width:33.33%}.vuecal__heading .weekday-label{-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .xsmall{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .small,.vuecal__heading .xsmall{display:none}.vuecal .vuecal__split-days-headers{-webkit-box-align:center;-ms-flex-align:center;align-items:center}@media screen and (max-width:550px){.vuecal__heading{line-height:1.2}.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .xsmall,.vuecal__heading .small{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .full,.vuecal__heading .xsmall{display:none}.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .small,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .xsmall{display:block}.vuecal--overflow-x .vuecal__heading .small,.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--small.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .full,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .small{display:none}}@media screen and (max-width:450px){.vuecal--small .vuecal__heading .xsmall,.vuecal--xsmall .vuecal__heading .xsmall,.vuecal__heading .xsmall{display:block}.vuecal--small .vuecal__heading .full,.vuecal--small .vuecal__heading .small,.vuecal--xsmall .vuecal__heading .full,.vuecal--xsmall .vuecal__heading .small,.vuecal__heading .full,.vuecal__heading .small{display:none}.vuecal--small.vuecal--overflow-x .vuecal__heading .small,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .xsmall{display:block}.vuecal--small.vuecal--overflow-x .vuecal__heading .full,.vuecal--small.vuecal--overflow-x .vuecal__heading .xsmall,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .full,.vuecal--xsmall.vuecal--overflow-x .vuecal__heading .small{display:none}}.vuecal__header button{outline:none;font-family:inherit}.vuecal__menu{padding:0;margin:0;list-style-type:none;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background-color:rgba(0,0,0,.02)}.vuecal__view-btn{background:none;border:none;padding:.3em 1em;height:2.2em;font-size:1.3em;border-bottom:0 solid currentColor;cursor:pointer;color:inherit;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:.2s;transition:.2s}.vuecal__view-btn--active{border-bottom-width:2px;background:hsla(0,0%,100%,.15)}.vuecal__title-bar{background-color:rgba(0,0,0,.1);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;font-size:1.4em;line-height:1.3;min-height:2em}.vuecal--xsmall .vuecal__title-bar{font-size:1.3em}.vuecal__title{position:relative;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__title button{cursor:pointer;background:none;border:none}.vuecal__title button.slide-fade--left-leave-active,.vuecal__title button.slide-fade--right-leave-active{width:100%}.vuecal__today-btn{position:relative;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-ms-flexbox;display:flex;font-size:.8em;background:none;border:none}.vuecal__today-btn span.default{font-size:.8em;padding:3px 6px;text-transform:uppercase;cursor:pointer}.vuecal__arrow{cursor:pointer;position:relative;z-index:1;background:none;border:none;white-space:nowrap}.vuecal__arrow--prev{margin-left:.6em}.vuecal__arrow--next{margin-right:.6em}.vuecal__arrow i.angle{display:inline-block;border:solid currentColor;border-width:0 2px 2px 0;padding:.25em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.vuecal__arrow--prev i.angle{border-width:2px 0 0 2px}.vuecal__arrow--highlighted,.vuecal__today-btn--highlighted,.vuecal__view-btn--highlighted{position:relative;background-color:rgba(0,0,0,.04)}.vuecal__arrow--highlighted *,.vuecal__today-btn--highlighted *,.vuecal__view-btn--highlighted *{pointer-events:none}.vuecal__arrow--highlighted:after,.vuecal__arrow--highlighted:before,.vuecal__today-btn--highlighted:after,.vuecal__today-btn--highlighted:before,.vuecal__view-btn--highlighted:after,.vuecal__view-btn--highlighted:before{content:\\\"\\\";background-color:inherit;-webkit-animation:sonar .8s ease-out infinite;animation:sonar .8s ease-out infinite;position:absolute;top:50%;left:50%;pointer-events:none}.vuecal__arrow--highlighted:before,.vuecal__today-btn--highlighted:before,.vuecal__view-btn--highlighted:before{width:3em;height:3em;border-radius:3em;margin-top:-1.5em;margin-left:-1.5em}.vuecal__arrow--highlighted:after,.vuecal__today-btn--highlighted:after,.vuecal__view-btn--highlighted:after{-webkit-animation-duration:1.5s;animation-duration:1.5s;-webkit-animation-delay:.1s;animation-delay:.1s;width:2.6em;height:2.6em;border-radius:2.6em;margin-top:-1.3em;margin-left:-1.3em}@-webkit-keyframes sonar{0%,20%{opacity:1}to{-webkit-transform:scale(2.5);transform:scale(2.5);opacity:0}}@keyframes sonar{0%,20%{opacity:1}to{-webkit-transform:scale(2.5);transform:scale(2.5);opacity:0}}@media screen and (max-width:450px){.vuecal__title{font-size:.9em}.vuecal__view-btn{padding-left:.6em;padding-right:.6em}}@media screen and (max-width:350px){.vuecal__view-btn{font-size:1.1em}}.vuecal__event{color:#666;background-color:hsla(0,0%,97.3%,.8);position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;left:0;width:100%;z-index:1;-webkit-transition:left .3s,width .3s,-webkit-box-shadow .3s;transition:left .3s,width .3s,-webkit-box-shadow .3s;transition:box-shadow .3s,left .3s,width .3s;transition:box-shadow .3s,left .3s,width .3s,-webkit-box-shadow .3s;overflow:hidden}.vuecal--no-time .vuecal__event{min-height:8px}.vuecal:not(.vuecal--dragging-event) .vuecal__event:hover{z-index:2}.vuecal__cell .vuecal__event *{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}.vuecal--view-with-time .vuecal__event:not(.vuecal__event--all-day){position:absolute}.vuecal--view-with-time .vuecal__bg .vuecal__event--all-day{position:absolute;top:0;bottom:0;z-index:0;opacity:.6;width:auto;right:0}.vuecal--view-with-time .vuecal__all-day .vuecal__event--all-day{position:relative;left:0}.vuecal__event--background{z-index:0}.vuecal__event--focus,.vuecal__event:focus{-webkit-box-shadow:1px 1px 6px rgba(0,0,0,.2);box-shadow:1px 1px 6px rgba(0,0,0,.2);z-index:3;outline:none}.vuecal__event.vuecal__event--dragging{opacity:.7}.vuecal__event.vuecal__event--static{opacity:0;-webkit-transition:opacity .1s;transition:opacity .1s}@-moz-document url-prefix(){.vuecal__event.vuecal__event--dragging{opacity:1}}.vuecal__event-resize-handle{position:absolute;bottom:0;left:0;right:0;height:1em;background-color:hsla(0,0%,100%,.3);opacity:0;-webkit-transform:translateY(110%);transform:translateY(110%);-webkit-transition:.3s;transition:.3s;cursor:ns-resize}.vuecal__event--focus .vuecal__event-resize-handle,.vuecal__event--resizing .vuecal__event-resize-handle,.vuecal__event:focus .vuecal__event-resize-handle,.vuecal__event:hover .vuecal__event-resize-handle{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}.vuecal__event--dragging .vuecal__event-resize-handle{display:none}.vuecal__event-delete{position:absolute;top:0;left:0;right:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;height:1.4em;line-height:1.4em;background-color:rgba(221,51,51,.85);color:#fff;z-index:0;cursor:pointer;-webkit-transform:translateY(-110%);transform:translateY(-110%);-webkit-transition:.3s;transition:.3s}.vuecal__event .vuecal__event-delete{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.vuecal--full-height-delete .vuecal__event-delete{height:auto;bottom:0}.vuecal--full-height-delete .vuecal__event-delete:before{content:\\\"\\\";width:1.7em;height:1.8em;display:block;background-image:url('data:image/svg+xml;utf8,<svg width=\\\"512\\\" height=\\\"512\\\" viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12 1.5a10.5 10.5 0 100 21 10.5 10.5 0 000-21zm5 14.1c.2 0 .2.2.2.2l-.1.3-1 1-.3.1h-.2L12 13.5l-3.5 3.6h-.3-.3l-1-1v-.4-.2l3.6-3.6-3.6-3.5A.4.4 0 017 8l1-1 .3-.2c.1 0 .2 0 .2.2l3.6 3.5L15.6 7l.2-.2c.1 0 .2 0 .3.2l1 1v.5L13.5 12z\\\" fill=\\\"%23fff\\\" opacity=\\\".9\\\"/></svg>')}.vuecal__event--deletable .vuecal__event-delete{-webkit-transform:translateY(0);transform:translateY(0);z-index:1}.vuecal__event--deletable.vuecal__event--dragging .vuecal__event-delete{opacity:0;-webkit-transition:none;transition:none}.vuecal--month-view .vuecal__event-title{font-size:.85em}.vuecal--short-events .vuecal__event-title{text-align:left;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding:0 3px}.vuecal__event-content,.vuecal__event-title{-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}.vuecal__event-title--edit{border-bottom:1px solid transparent;text-align:center;-webkit-transition:.3s;transition:.3s;color:inherit;background-image:url('data:image/svg+xml;utf8,<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M442 150l-39 39-80-80 39-39q6-6 15-6t15 6l50 50q6 6 6 15t-6 15zM64 368l236-236 80 80-236 236H64v-80z\\\" fill=\\\"%23000\\\" opacity=\\\".4\\\"/></svg>');background-repeat:no-repeat;background-position:120% .15em;background-size:.4em;outline:none;width:100%}.vuecal__event-title--edit:focus,.vuecal__event-title--edit:hover{border-color:rgba(0,0,0,.4);background-position:99% .15em;background-size:1.2em}.vuecal__cell{position:relative;width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;-webkit-transition:background-color .15s ease-in-out;transition:background-color .15s ease-in-out}.vuecal__cells.month-view .vuecal__cell,.vuecal__cells.week-view .vuecal__cell{width:14.2857%}.vuecal--hide-weekends .vuecal__cells.month-view .vuecal__cell,.vuecal--hide-weekends .vuecal__cells.week-view .vuecal__cell,.vuecal__cells.years-view .vuecal__cell{width:20%}.vuecal__cells.year-view .vuecal__cell{width:33.33%}.vuecal__cells.day-view .vuecal__cell{-webkit-box-flex:1;-ms-flex:1;flex:1}.vuecal--overflow-x.vuecal--day-view .vuecal__cell{width:auto}.vuecal--click-to-navigate .vuecal__cell:not(.vuecal__cell--disabled){cursor:pointer}.vuecal--day-view.vuecal--no-time .vuecal__cell:not(.vuecal__cell--has-splits),.vuecal--view-with-time .vuecal__cell,.vuecal--week-view.vuecal--no-time .vuecal__cell:not(.vuecal__cell--has-splits){display:block}.vuecal__cell.vuecal__cell--has-splits{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;display:-webkit-box;display:-ms-flexbox;display:flex}.vuecal__cell:before{content:\\\"\\\";position:absolute;z-index:0;top:0;left:0;right:-1px;bottom:-1px;border:1px solid hsla(0,0%,76.9%,.25)}.vuecal--overflow-x.vuecal--day-view .vuecal__cell:before{bottom:0}.vuecal__cell--current,.vuecal__cell--today{background-color:rgba(240,240,255,.4);z-index:1}.vuecal__cell--selected{background-color:rgba(235,255,245,.4);z-index:2}.vuecal--day-view .vuecal__cell--selected{background:none}.vuecal__cell--out-of-scope{color:rgba(0,0,0,.25)}.vuecal__cell--disabled{color:rgba(0,0,0,.25);cursor:not-allowed}.vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal__cell-split.vuecal__cell-split--highlighted{background-color:rgba(0,0,0,.04);-webkit-transition-duration:5ms;transition-duration:5ms}.vuecal__cell-content{position:relative;width:100%;height:100%;outline:none}.vuecal--month-view .vuecal__cell-content,.vuecal--year-view .vuecal__cell-content,.vuecal--years-view .vuecal__cell-content{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__cell-split{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;height:100%;position:relative;-webkit-transition:background-color .15s ease-in-out;transition:background-color .15s ease-in-out}.vuecal__cell-events{width:100%}.vuecal__cell-events-count{left:50%;top:65%;-webkit-transform:translateX(-50%);transform:translateX(-50%);min-width:12px;height:12px;line-height:12px;padding:0 3px;background:#999;color:#fff;border-radius:12px;font-size:10px}.vuecal__cell-events-count,.vuecal__cell .vuecal__special-hours{position:absolute;-webkit-box-sizing:border-box;box-sizing:border-box}.vuecal__cell .vuecal__special-hours{left:0;right:0}.vuecal--overflow-x.vuecal--week-view .vuecal__cell,.vuecal__cell-split{overflow:hidden}.vuecal__no-event{padding-top:1em;color:#aaa;justify-self:flex-start;margin-bottom:auto}.vuecal__all-day .vuecal__no-event{display:none}.vuecal__now-line{position:absolute;left:0;width:100%;height:0;color:red;border-top:1px solid currentColor;opacity:.6;z-index:1}.vuecal__now-line:before{content:\\\"\\\";position:absolute;top:-6px;left:0;border:5px solid transparent;border-left-color:currentColor}.vuecal{height:100%;-webkit-box-shadow:0 0 0 1px inset rgba(0,0,0,.08);box-shadow:inset 0 0 0 1px rgba(0,0,0,.08)}.vuecal *,.vuecal--has-touch :not(.vuecal__event-title--edit){-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.vuecal--has-touch :not(.vuecal__event-title--edit){-webkit-touch-callout:none}.vuecal .clickable{cursor:pointer}.vuecal--drag-creating-event,.vuecal--resizing-event{cursor:ns-resize}.vuecal--dragging-event{cursor:move;cursor:-webkit-grabbing;cursor:grabbing}.vuecal .dragging-helper{position:absolute;width:60px;height:40px;background:rgba(138,190,230,.8);border:1px solid #61a9e0;z-index:10}.vuecal--xsmall{font-size:.9em}.vuecal__flex{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.vuecal__flex[column]{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.vuecal__flex[column],.vuecal__flex[grow]{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.vuecal__flex[grow]{width:100%}.vuecal__flex[wrap]{-ms-flex-wrap:wrap;flex-wrap:wrap}.vuecal__split-days-headers.slide-fade--right-leave-active{display:none}.vuecal--week-numbers.vuecal--month-view .vuecal__split-days-headers{margin-left:3em}.vuecal--day-view:not(.vuecal--overflow-x) .vuecal__split-days-headers{margin-left:3em;height:2.2em}.vuecal--day-view.vuecal--twelve-hour:not(.vuecal--overflow-x) .vuecal__split-days-headers{margin-left:4em}.vuecal__split-days-headers .day-split-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%}.vuecal__split-days-headers .vuecal--day-view.vuecal--overflow-x.vuecal--sticky-split-labels .day-split-header{height:1.5em}.vuecal__body{position:relative;overflow:hidden}.vuecal__all-day{min-height:1.7em;margin-bottom:-1px;-ms-flex-negative:0;flex-shrink:0}.vuecal__all-day-text{width:3em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#999;padding-right:2px;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-negative:0;flex-shrink:0;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;border-bottom:1px solid #ddd;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}.vuecal__all-day-text span{font-size:.85em;text-align:right;line-height:1.1}.vuecal--twelve-hour .vuecal__all-day>span{width:4em}.vuecal__bg{overflow:auto;overflow-x:hidden;-webkit-overflow-scrolling:touch;min-height:60px;position:relative;width:100%;margin-bottom:1px}.vuecal--no-time .vuecal__bg{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;overflow:auto}.vuecal__week-numbers{width:3em;-ms-flex-negative:0!important;flex-shrink:0!important}.vuecal__week-numbers .vuecal__week-number-cell{opacity:.4;font-size:.9em;-webkit-box-align:center;-ms-flex-align:center;align-items:center;justify-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.vuecal__scrollbar-check{position:absolute;top:0;left:0;right:0;bottom:0;overflow:scroll;visibility:hidden;z-index:-1}.vuecal__scrollbar-check div{height:120%}.vuecal__time-column{width:3em;height:100%;-ms-flex-negative:0;flex-shrink:0}.vuecal--twelve-hour .vuecal__time-column{width:4em;font-size:.9em}.vuecal--overflow-x.vuecal--week-view .vuecal__time-column{margin-top:2.8em;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.3);box-shadow:0 1px 1px rgba(0,0,0,.3)}.vuecal--overflow-x.vuecal--week-view.vuecal--sticky-split-labels .vuecal__time-column{margin-top:3.4em}.vuecal--overflow-x.vuecal--day-view.vuecal--sticky-split-labels .vuecal__time-column{margin-top:1.5em}.vuecal__time-column .vuecal__time-cell{color:#999;text-align:right;padding-right:2px;font-size:.9em}.vuecal__time-column .vuecal__time-cell-line:before{content:\\\"\\\";position:absolute;left:0;right:0;border-top:1px solid hsla(0,0%,76.9%,.3)}.vuecal__cells{margin:0 1px 1px 0}.vuecal--overflow-x.vuecal--day-view .vuecal__cells{margin:0}.vuecal--events-on-month-view.vuecal--short-events .vuecal__cells{width:99.9%}.vuecal--overflow-x.vuecal--day-view .vuecal__cells,.vuecal--overflow-x.vuecal--week-view .vuecal__cells{-ms-flex-wrap:nowrap;flex-wrap:nowrap;overflow:auto}.slide-fade--left-enter-active,.slide-fade--left-leave-active,.slide-fade--right-enter-active,.slide-fade--right-leave-active{-webkit-transition:.25s ease-out;transition:.25s ease-out}.slide-fade--left-enter-from,.slide-fade--right-leave-to{-webkit-transform:translateX(-15px);transform:translateX(-15px);opacity:0}.slide-fade--left-leave-to,.slide-fade--right-enter-from{-webkit-transform:translateX(15px);transform:translateX(15px);opacity:0}.slide-fade--left-leave-active,.slide-fade--right-leave-active{position:absolute!important;height:100%}.vuecal__title-bar .slide-fade--left-leave-active,.vuecal__title-bar .slide-fade--right-leave-active{left:0;right:0;height:auto}.vuecal__heading .slide-fade--left-leave-active,.vuecal__heading .slide-fade--right-leave-active{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.vuecal--green-theme .vuecal__cell-events-count,.vuecal--green-theme .vuecal__menu{background-color:#42b983;color:#fff}.vuecal--green-theme .vuecal__title-bar{background-color:#e4f5ef}.vuecal--green-theme .vuecal__cell--current,.vuecal--green-theme .vuecal__cell--today{background-color:rgba(240,240,255,.4)}.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--selected{background-color:rgba(235,255,245,.4)}.vuecal--green-theme .vuecal__cell--selected:before{border-color:rgba(66,185,131,.5)}.vuecal--green-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--green-theme .vuecal__cell-split--highlighted{background-color:rgba(195,255,225,.5)}.vuecal--green-theme .vuecal__arrow--highlighted,.vuecal--green-theme .vuecal__today-btn--highlighted,.vuecal--green-theme .vuecal__view-btn--highlighted{background-color:rgba(136,236,191,.25)}.vuecal--blue-theme .vuecal__cell-events-count,.vuecal--blue-theme .vuecal__menu{background-color:rgba(66,163,185,.8);color:#fff}.vuecal--blue-theme .vuecal__title-bar{background-color:rgba(0,165,188,.3)}.vuecal--blue-theme .vuecal__cell--current,.vuecal--blue-theme .vuecal__cell--today{background-color:rgba(240,240,255,.4)}.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--selected{background-color:rgba(235,253,255,.4)}.vuecal--blue-theme .vuecal__cell--selected:before{border-color:rgba(115,191,204,.5)}.vuecal--blue-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--blue-theme .vuecal__cell-split--highlighted{background-color:rgba(0,165,188,.06)}.vuecal--blue-theme .vuecal__arrow--highlighted,.vuecal--blue-theme .vuecal__today-btn--highlighted,.vuecal--blue-theme .vuecal__view-btn--highlighted{background-color:rgba(66,163,185,.2)}.vuecal--rounded-theme .vuecal__weekdays-headings{border:none}.vuecal--rounded-theme .vuecal__cell,.vuecal--rounded-theme .vuecal__cell:before{background:none;border:none}.vuecal--rounded-theme .vuecal__cell--out-of-scope{opacity:.4}.vuecal--rounded-theme .vuecal__cell-content{width:30px;height:30px;-webkit-box-flex:0;-ms-flex-positive:0;flex-grow:0;border:1px solid transparent;border-radius:30px;color:#333}.vuecal--rounded-theme.vuecal--day-view .vuecal__cell-content{width:auto;background:none}.vuecal--rounded-theme.vuecal--year-view .vuecal__cell{width:33.33%}.vuecal--rounded-theme.vuecal--year-view .vuecal__cell-content{width:85px}.vuecal--rounded-theme.vuecal--years-view .vuecal__cell-content{width:52px}.vuecal--rounded-theme .vuecal__cell{background-color:transparent!important}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell-content{background-color:#f1faf7}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{background-color:#42b983;color:#fff}.vuecal--rounded-theme.vuecal--green-theme .vuecal--day-view .vuecal__cell--today:before{background-color:rgba(66,185,131,.05)}.vuecal--rounded-theme.vuecal--green-theme:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{border-color:#42b983}.vuecal--rounded-theme.vuecal--green-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--rounded-theme.vuecal--green-theme .vuecal__cell-split--highlighted{background-color:rgba(195,255,225,.5)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell-content{background-color:rgba(100,182,255,.2)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{background-color:#8fb7e4;color:#fff}.vuecal--rounded-theme.vuecal--blue-theme .vuecal--day-view .vuecal__cell--today:before{background-color:rgba(143,183,228,.1)}.vuecal--rounded-theme.vuecal--blue-theme:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{border-color:#61a9e0}.vuecal--rounded-theme.vuecal--blue-theme .vuecal__cell--highlighted:not(.vuecal__cell--has-splits),.vuecal--rounded-theme.vuecal--blue-theme .vuecal__cell-split--highlighted{background-color:rgba(0,165,188,.06)}.vuecal--date-picker .vuecal__title-bar{font-size:1.2em}.vuecal--date-picker .vuecal__heading{height:2.2em;font-weight:500;opacity:.4}.vuecal--date-picker .vuecal__weekdays-headings{border:none}.vuecal--date-picker .vuecal__body{margin-left:1px}.vuecal--date-picker .vuecal__cell,.vuecal--date-picker .vuecal__cell:before{background:none;border:none}.vuecal--date-picker .vuecal__cell-content{height:26px;-webkit-box-flex:0;-ms-flex-positive:0;flex-grow:0;border:1px solid transparent;border-radius:25px;-webkit-transition:background-color .2s cubic-bezier(.39,.58,.57,1);transition:background-color .2s cubic-bezier(.39,.58,.57,1)}.vuecal--date-picker.vuecal--years-view .vuecal__cell-content{-webkit-box-flex:0;-ms-flex:0;flex:0;padding:0 4px;height:24px}.vuecal--date-picker.vuecal--year-view .vuecal__cell-content{-webkit-box-flex:0;-ms-flex:0;flex:0;padding:0 15px}.vuecal--date-picker.vuecal--month-view .vuecal__cell-content{width:26px}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell-content:hover{background-color:rgba(0,0,0,.1)}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--selected .vuecal__cell-content{background-color:#42b982;color:#fff}.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--current .vuecal__cell-content,.vuecal--date-picker:not(.vuecal--day-view) .vuecal__cell--today .vuecal__cell-content{border-color:#42b982}\"],\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-cal/dist/vuecal.css\n");

/***/ }),

/***/ "./node_modules/vue-cal/dist/vuecal.common.js":
/*!****************************************************!*\
  !*** ./node_modules/vue-cal/dist/vuecal.common.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// install a JSONP callback for chunk loading\n/******/ \tfunction webpackJsonpCallback(data) {\n/******/ \t\tvar chunkIds = data[0];\n/******/ \t\tvar moreModules = data[1];\n/******/\n/******/\n/******/ \t\t// add \"moreModules\" to the modules object,\n/******/ \t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\tvar moduleId, chunkId, i = 0, resolves = [];\n/******/ \t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\tchunkId = chunkIds[i];\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n/******/ \t\t\t}\n/******/ \t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t}\n/******/ \t\tfor(moduleId in moreModules) {\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n/******/ \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n/******/\n/******/ \t\twhile(resolves.length) {\n/******/ \t\t\tresolves.shift()();\n/******/ \t\t}\n/******/\n/******/ \t};\n/******/\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded and loading chunks\n/******/ \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t// Promise = chunk loading, 0 = chunk loaded\n/******/ \tvar installedChunks = {\n/******/ \t\t40: 0\n/******/ \t};\n/******/\n/******/\n/******/\n/******/ \t// script path function\n/******/ \tfunction jsonpScriptSrc(chunkId) {\n/******/ \t\treturn __nested_webpack_require_2343__.p + \"vuecal.common.\" + ({\"0\":\"i18n/ar\",\"1\":\"i18n/bg\",\"2\":\"i18n/bn\",\"3\":\"i18n/bs\",\"4\":\"i18n/ca\",\"5\":\"i18n/cs\",\"6\":\"i18n/da\",\"7\":\"i18n/de\",\"8\":\"i18n/el\",\"9\":\"i18n/es\",\"10\":\"i18n/fa\",\"11\":\"i18n/fr\",\"12\":\"i18n/he\",\"13\":\"i18n/hr\",\"14\":\"i18n/hu\",\"15\":\"i18n/id\",\"16\":\"i18n/is\",\"17\":\"i18n/it\",\"18\":\"i18n/ja\",\"19\":\"i18n/ka\",\"20\":\"i18n/ko\",\"21\":\"i18n/lt\",\"22\":\"i18n/mn\",\"23\":\"i18n/nl\",\"24\":\"i18n/no\",\"25\":\"i18n/pl\",\"26\":\"i18n/pt-br\",\"27\":\"i18n/ro\",\"28\":\"i18n/ru\",\"29\":\"i18n/sk\",\"30\":\"i18n/sl\",\"31\":\"i18n/sq\",\"32\":\"i18n/sr\",\"33\":\"i18n/sv\",\"34\":\"i18n/tr\",\"35\":\"i18n/uk\",\"36\":\"i18n/vi\",\"37\":\"i18n/zh-cn\",\"38\":\"i18n/zh-hk\",\"39\":\"drag-and-drop\"}[chunkId]||chunkId) + \".js\"\n/******/ \t}\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_2343__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_2343__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__nested_webpack_require_2343__.e = function requireEnsure(chunkId) {\n/******/ \t\tvar promises = [];\n/******/\n/******/\n/******/ \t\t// JSONP chunk loading for javascript\n/******/\n/******/ \t\tvar installedChunkData = installedChunks[chunkId];\n/******/ \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/\n/******/ \t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\tif(installedChunkData) {\n/******/ \t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t} else {\n/******/ \t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n/******/ \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n/******/ \t\t\t\t});\n/******/ \t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/\n/******/ \t\t\t\t// start chunk loading\n/******/ \t\t\t\tvar script = document.createElement('script');\n/******/ \t\t\t\tvar onScriptComplete;\n/******/\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_2343__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_2343__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n/******/\n/******/ \t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\tvar error = new Error();\n/******/ \t\t\t\tonScriptComplete = function (event) {\n/******/ \t\t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\t\tvar chunk = installedChunks[chunkId];\n/******/ \t\t\t\t\tif(chunk !== 0) {\n/******/ \t\t\t\t\t\tif(chunk) {\n/******/ \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\tchunk[1](error);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t};\n/******/ \t\t\t\tvar timeout = setTimeout(function(){\n/******/ \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n/******/ \t\t\t\t}, 120000);\n/******/ \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n/******/ \t\t\t\tdocument.head.appendChild(script);\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\treturn Promise.all(promises);\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_2343__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_2343__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_2343__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_2343__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_2343__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_2343__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_2343__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_2343__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_2343__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_2343__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_2343__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_2343__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_2343__.p = \"\";\n/******/\n/******/ \t// on error function for async loading\n/******/ \t__nested_webpack_require_2343__.oe = function(err) { console.error(err); throw err; };\n/******/\n/******/ \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonpvuecal\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonpvuecal\"] || [];\n/******/ \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n/******/ \tjsonpArray.push = webpackJsonpCallback;\n/******/ \tjsonpArray = jsonpArray.slice();\n/******/ \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n/******/ \tvar parentJsonpFunction = oldJsonpFunction;\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_2343__(__nested_webpack_require_2343__.s = \"fb15\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"00ee\":\n/***/ (function(module, exports, __nested_webpack_require_9005__) {\n\nvar wellKnownSymbol = __nested_webpack_require_9005__(\"b622\");\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n\n\n/***/ }),\n\n/***/ \"0366\":\n/***/ (function(module, exports, __nested_webpack_require_9285__) {\n\nvar aFunction = __nested_webpack_require_9285__(\"1c0b\");\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"057f\":\n/***/ (function(module, exports, __nested_webpack_require_9961__) {\n\nvar toIndexedObject = __nested_webpack_require_9961__(\"fc6a\");\nvar nativeGetOwnPropertyNames = __nested_webpack_require_9961__(\"241c\").f;\n\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (error) {\n    return windowNames.slice();\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n\n\n/***/ }),\n\n/***/ \"06cf\":\n/***/ (function(module, exports, __nested_webpack_require_10742__) {\n\nvar DESCRIPTORS = __nested_webpack_require_10742__(\"83ab\");\nvar propertyIsEnumerableModule = __nested_webpack_require_10742__(\"d1e7\");\nvar createPropertyDescriptor = __nested_webpack_require_10742__(\"5c6c\");\nvar toIndexedObject = __nested_webpack_require_10742__(\"fc6a\");\nvar toPrimitive = __nested_webpack_require_10742__(\"c04e\");\nvar has = __nested_webpack_require_10742__(\"5135\");\nvar IE8_DOM_DEFINE = __nested_webpack_require_10742__(\"0cfb\");\n\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n\n\n/***/ }),\n\n/***/ \"0a96\":\n/***/ (function(module) {\n\nmodule.exports = JSON.parse(\"{\\\"weekDays\\\":[\\\"Monday\\\",\\\"Tuesday\\\",\\\"Wednesday\\\",\\\"Thursday\\\",\\\"Friday\\\",\\\"Saturday\\\",\\\"Sunday\\\"],\\\"months\\\":[\\\"January\\\",\\\"February\\\",\\\"March\\\",\\\"April\\\",\\\"May\\\",\\\"June\\\",\\\"July\\\",\\\"August\\\",\\\"September\\\",\\\"October\\\",\\\"November\\\",\\\"December\\\"],\\\"years\\\":\\\"Years\\\",\\\"year\\\":\\\"Year\\\",\\\"month\\\":\\\"Month\\\",\\\"week\\\":\\\"Week\\\",\\\"day\\\":\\\"Day\\\",\\\"today\\\":\\\"Today\\\",\\\"noEvent\\\":\\\"No Event\\\",\\\"allDay\\\":\\\"All day\\\",\\\"deleteEvent\\\":\\\"Delete\\\",\\\"createEvent\\\":\\\"Create an event\\\",\\\"dateFormat\\\":\\\"dddd MMMM D{S}, YYYY\\\"}\");\n\n/***/ }),\n\n/***/ \"0cfb\":\n/***/ (function(module, exports, __nested_webpack_require_12333__) {\n\nvar DESCRIPTORS = __nested_webpack_require_12333__(\"83ab\");\nvar fails = __nested_webpack_require_12333__(\"d039\");\nvar createElement = __nested_webpack_require_12333__(\"cc12\");\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"1148\":\n/***/ (function(module, exports, __nested_webpack_require_12765__) {\n\n\"use strict\";\n\nvar toInteger = __nested_webpack_require_12765__(\"a691\");\nvar requireObjectCoercible = __nested_webpack_require_12765__(\"1d80\");\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"1276\":\n/***/ (function(module, exports, __nested_webpack_require_13402__) {\n\n\"use strict\";\n\nvar fixRegExpWellKnownSymbolLogic = __nested_webpack_require_13402__(\"d784\");\nvar isRegExp = __nested_webpack_require_13402__(\"44e7\");\nvar anObject = __nested_webpack_require_13402__(\"825a\");\nvar requireObjectCoercible = __nested_webpack_require_13402__(\"1d80\");\nvar speciesConstructor = __nested_webpack_require_13402__(\"4840\");\nvar advanceStringIndex = __nested_webpack_require_13402__(\"8aa5\");\nvar toLength = __nested_webpack_require_13402__(\"50c4\");\nvar callRegExpExec = __nested_webpack_require_13402__(\"14c3\");\nvar regexpExec = __nested_webpack_require_13402__(\"9263\");\nvar fails = __nested_webpack_require_13402__(\"d039\");\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n\n\n/***/ }),\n\n/***/ \"1332\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ \"13d5\":\n/***/ (function(module, exports, __nested_webpack_require_18943__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_18943__(\"23e7\");\nvar $reduce = __nested_webpack_require_18943__(\"d58f\").left;\nvar arrayMethodIsStrict = __nested_webpack_require_18943__(\"a640\");\nvar arrayMethodUsesToLength = __nested_webpack_require_18943__(\"ae40\");\nvar CHROME_VERSION = __nested_webpack_require_18943__(\"2d00\");\nvar IS_NODE = __nested_webpack_require_18943__(\"605d\");\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"14c3\":\n/***/ (function(module, exports, __nested_webpack_require_19992__) {\n\nvar classof = __nested_webpack_require_19992__(\"c6b6\");\nvar regexpExec = __nested_webpack_require_19992__(\"9263\");\n\n// `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n\n\n/***/ }),\n\n/***/ \"159b\":\n/***/ (function(module, exports, __nested_webpack_require_20680__) {\n\nvar global = __nested_webpack_require_20680__(\"da84\");\nvar DOMIterables = __nested_webpack_require_20680__(\"fdbc\");\nvar forEach = __nested_webpack_require_20680__(\"17c2\");\nvar createNonEnumerableProperty = __nested_webpack_require_20680__(\"9112\");\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);\n  } catch (error) {\n    CollectionPrototype.forEach = forEach;\n  }\n}\n\n\n/***/ }),\n\n/***/ \"17c2\":\n/***/ (function(module, exports, __nested_webpack_require_21404__) {\n\n\"use strict\";\n\nvar $forEach = __nested_webpack_require_21404__(\"b727\").forEach;\nvar arrayMethodIsStrict = __nested_webpack_require_21404__(\"a640\");\nvar arrayMethodUsesToLength = __nested_webpack_require_21404__(\"ae40\");\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n\n\n/***/ }),\n\n/***/ \"19aa\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it, Constructor, name) {\n  if (!(it instanceof Constructor)) {\n    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"1be4\":\n/***/ (function(module, exports, __nested_webpack_require_22346__) {\n\nvar getBuiltIn = __nested_webpack_require_22346__(\"d066\");\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n\n\n/***/ }),\n\n/***/ \"1c0b\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"1c7e\":\n/***/ (function(module, exports, __nested_webpack_require_22740__) {\n\nvar wellKnownSymbol = __nested_webpack_require_22740__(\"b622\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\n\n/***/ }),\n\n/***/ \"1cdc\":\n/***/ (function(module, exports, __nested_webpack_require_23746__) {\n\nvar userAgent = __nested_webpack_require_23746__(\"342f\");\n\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n\n\n/***/ }),\n\n/***/ \"1d80\":\n/***/ (function(module, exports) {\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"1dde\":\n/***/ (function(module, exports, __nested_webpack_require_24236__) {\n\nvar fails = __nested_webpack_require_24236__(\"d039\");\nvar wellKnownSymbol = __nested_webpack_require_24236__(\"b622\");\nvar V8_VERSION = __nested_webpack_require_24236__(\"2d00\");\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n\n\n/***/ }),\n\n/***/ \"2266\":\n/***/ (function(module, exports, __nested_webpack_require_24963__) {\n\nvar anObject = __nested_webpack_require_24963__(\"825a\");\nvar isArrayIteratorMethod = __nested_webpack_require_24963__(\"e95a\");\nvar toLength = __nested_webpack_require_24963__(\"50c4\");\nvar bind = __nested_webpack_require_24963__(\"0366\");\nvar getIteratorMethod = __nested_webpack_require_24963__(\"35a1\");\nvar iteratorClose = __nested_webpack_require_24963__(\"2a62\");\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator);\n      throw error;\n    }\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\n\n/***/ }),\n\n/***/ \"23cb\":\n/***/ (function(module, exports, __nested_webpack_require_27026__) {\n\nvar toInteger = __nested_webpack_require_27026__(\"a691\");\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n\n\n/***/ }),\n\n/***/ \"23e7\":\n/***/ (function(module, exports, __nested_webpack_require_27542__) {\n\nvar global = __nested_webpack_require_27542__(\"da84\");\nvar getOwnPropertyDescriptor = __nested_webpack_require_27542__(\"06cf\").f;\nvar createNonEnumerableProperty = __nested_webpack_require_27542__(\"9112\");\nvar redefine = __nested_webpack_require_27542__(\"6eeb\");\nvar setGlobal = __nested_webpack_require_27542__(\"ce4e\");\nvar copyConstructorProperties = __nested_webpack_require_27542__(\"e893\");\nvar isForced = __nested_webpack_require_27542__(\"94ca\");\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n\n\n/***/ }),\n\n/***/ \"241c\":\n/***/ (function(module, exports, __nested_webpack_require_30042__) {\n\nvar internalObjectKeys = __nested_webpack_require_30042__(\"ca84\");\nvar enumBugKeys = __nested_webpack_require_30042__(\"7839\");\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertynames\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n\n\n/***/ }),\n\n/***/ \"2532\":\n/***/ (function(module, exports, __nested_webpack_require_30517__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_30517__(\"23e7\");\nvar notARegExp = __nested_webpack_require_30517__(\"5a34\");\nvar requireObjectCoercible = __nested_webpack_require_30517__(\"1d80\");\nvar correctIsRegExpLogic = __nested_webpack_require_30517__(\"ab13\");\n\n// `String.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.includes\n$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~String(requireObjectCoercible(this))\n      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"25f0\":\n/***/ (function(module, exports, __nested_webpack_require_31216__) {\n\n\"use strict\";\n\nvar redefine = __nested_webpack_require_31216__(\"6eeb\");\nvar anObject = __nested_webpack_require_31216__(\"825a\");\nvar fails = __nested_webpack_require_31216__(\"d039\");\nvar flags = __nested_webpack_require_31216__(\"ad6d\");\n\nvar TO_STRING = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar nativeToString = RegExpPrototype[TO_STRING];\n\nvar NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\n// FF44- RegExp#toString has a wrong name\nvar INCORRECT_NAME = nativeToString.name != TO_STRING;\n\n// `RegExp.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    var p = String(R.source);\n    var rf = R.flags;\n    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);\n    return '/' + p + '/' + f;\n  }, { unsafe: true });\n}\n\n\n/***/ }),\n\n/***/ \"2626\":\n/***/ (function(module, exports, __nested_webpack_require_32264__) {\n\n\"use strict\";\n\nvar getBuiltIn = __nested_webpack_require_32264__(\"d066\");\nvar definePropertyModule = __nested_webpack_require_32264__(\"9bf2\");\nvar wellKnownSymbol = __nested_webpack_require_32264__(\"b622\");\nvar DESCRIPTORS = __nested_webpack_require_32264__(\"83ab\");\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n  var defineProperty = definePropertyModule.f;\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineProperty(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n\n\n/***/ }),\n\n/***/ \"2a62\":\n/***/ (function(module, exports, __nested_webpack_require_32937__) {\n\nvar anObject = __nested_webpack_require_32937__(\"825a\");\n\nmodule.exports = function (iterator) {\n  var returnMethod = iterator['return'];\n  if (returnMethod !== undefined) {\n    return anObject(returnMethod.call(iterator)).value;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"2cf4\":\n/***/ (function(module, exports, __nested_webpack_require_33245__) {\n\nvar global = __nested_webpack_require_33245__(\"da84\");\nvar fails = __nested_webpack_require_33245__(\"d039\");\nvar bind = __nested_webpack_require_33245__(\"0366\");\nvar html = __nested_webpack_require_33245__(\"1be4\");\nvar createElement = __nested_webpack_require_33245__(\"cc12\");\nvar IS_IOS = __nested_webpack_require_33245__(\"1cdc\");\nvar IS_NODE = __nested_webpack_require_33245__(\"605d\");\n\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\n\nvar run = function (id) {\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar listener = function (event) {\n  run(event.data);\n};\n\nvar post = function (id) {\n  // old engines have not location.origin\n  global.postMessage(id + '', location.protocol + '//' + location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = bind(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    typeof postMessage == 'function' &&\n    !global.importScripts &&\n    location && location.protocol !== 'file:' &&\n    !fails(post)\n  ) {\n    defer = post;\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n\n\n/***/ }),\n\n/***/ \"2d00\":\n/***/ (function(module, exports, __nested_webpack_require_36232__) {\n\nvar global = __nested_webpack_require_36232__(\"da84\");\nvar userAgent = __nested_webpack_require_36232__(\"342f\");\n\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  version = match[0] + match[1];\n} else if (userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = match[1];\n  }\n}\n\nmodule.exports = version && +version;\n\n\n/***/ }),\n\n/***/ \"2f4d\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_36839__) {\n\n\"use strict\";\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_weekdays_headings_vue_vue_type_style_index_0_id_f3db6496_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_36839__(\"43b5\");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_weekdays_headings_vue_vue_type_style_index_0_id_f3db6496_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_36839__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_weekdays_headings_vue_vue_type_style_index_0_id_f3db6496_lang_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n\n\n/***/ }),\n\n/***/ \"342f\":\n/***/ (function(module, exports, __nested_webpack_require_38696__) {\n\nvar getBuiltIn = __nested_webpack_require_38696__(\"d066\");\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n\n\n/***/ }),\n\n/***/ \"35a1\":\n/***/ (function(module, exports, __nested_webpack_require_38888__) {\n\nvar classof = __nested_webpack_require_38888__(\"f5df\");\nvar Iterators = __nested_webpack_require_38888__(\"3f8c\");\nvar wellKnownSymbol = __nested_webpack_require_38888__(\"b622\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n\n/***/ \"37e8\":\n/***/ (function(module, exports, __nested_webpack_require_39291__) {\n\nvar DESCRIPTORS = __nested_webpack_require_39291__(\"83ab\");\nvar definePropertyModule = __nested_webpack_require_39291__(\"9bf2\");\nvar anObject = __nested_webpack_require_39291__(\"825a\");\nvar objectKeys = __nested_webpack_require_39291__(\"df75\");\n\n// `Object.defineProperties` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperties\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"38cf\":\n/***/ (function(module, exports, __nested_webpack_require_39981__) {\n\nvar $ = __nested_webpack_require_39981__(\"23e7\");\nvar repeat = __nested_webpack_require_39981__(\"1148\");\n\n// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n\n\n/***/ }),\n\n/***/ \"3bbe\":\n/***/ (function(module, exports, __nested_webpack_require_40304__) {\n\nvar isObject = __nested_webpack_require_40304__(\"861d\");\n\nmodule.exports = function (it) {\n  if (!isObject(it) && it !== null) {\n    throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"3ca3\":\n/***/ (function(module, exports, __nested_webpack_require_40590__) {\n\n\"use strict\";\n\nvar charAt = __nested_webpack_require_40590__(\"6547\").charAt;\nvar InternalStateModule = __nested_webpack_require_40590__(\"69f3\");\nvar defineIterator = __nested_webpack_require_40590__(\"7dd0\");\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n\n\n/***/ }),\n\n/***/ \"3f8c\":\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n\n/***/ \"4160\":\n/***/ (function(module, exports, __nested_webpack_require_41775__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_41775__(\"23e7\");\nvar forEach = __nested_webpack_require_41775__(\"17c2\");\n\n// `Array.prototype.forEach` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {\n  forEach: forEach\n});\n\n\n/***/ }),\n\n/***/ \"428f\":\n/***/ (function(module, exports, __nested_webpack_require_42146__) {\n\nvar global = __nested_webpack_require_42146__(\"da84\");\n\nmodule.exports = global;\n\n\n/***/ }),\n\n/***/ \"43b5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ \"44ad\":\n/***/ (function(module, exports, __nested_webpack_require_42421__) {\n\nvar fails = __nested_webpack_require_42421__(\"d039\");\nvar classof = __nested_webpack_require_42421__(\"c6b6\");\n\nvar split = ''.split;\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n\n\n/***/ }),\n\n/***/ \"44d2\":\n/***/ (function(module, exports, __nested_webpack_require_42998__) {\n\nvar wellKnownSymbol = __nested_webpack_require_42998__(\"b622\");\nvar create = __nested_webpack_require_42998__(\"7c73\");\nvar definePropertyModule = __nested_webpack_require_42998__(\"9bf2\");\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\n\n/***/ }),\n\n/***/ \"44de\":\n/***/ (function(module, exports, __nested_webpack_require_43712__) {\n\nvar global = __nested_webpack_require_43712__(\"da84\");\n\nmodule.exports = function (a, b) {\n  var console = global.console;\n  if (console && console.error) {\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  }\n};\n\n\n/***/ }),\n\n/***/ \"44e7\":\n/***/ (function(module, exports, __nested_webpack_require_44016__) {\n\nvar isObject = __nested_webpack_require_44016__(\"861d\");\nvar classof = __nested_webpack_require_44016__(\"c6b6\");\nvar wellKnownSymbol = __nested_webpack_require_44016__(\"b622\");\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n\n\n/***/ }),\n\n/***/ \"45fc\":\n/***/ (function(module, exports, __nested_webpack_require_44515__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_44515__(\"23e7\");\nvar $some = __nested_webpack_require_44515__(\"b727\").some;\nvar arrayMethodIsStrict = __nested_webpack_require_44515__(\"a640\");\nvar arrayMethodUsesToLength = __nested_webpack_require_44515__(\"ae40\");\n\nvar STRICT_METHOD = arrayMethodIsStrict('some');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('some');\n\n// `Array.prototype.some` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.some\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"4840\":\n/***/ (function(module, exports, __nested_webpack_require_45235__) {\n\nvar anObject = __nested_webpack_require_45235__(\"825a\");\nvar aFunction = __nested_webpack_require_45235__(\"1c0b\");\nvar wellKnownSymbol = __nested_webpack_require_45235__(\"b622\");\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.github.io/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n\n\n/***/ }),\n\n/***/ \"4930\":\n/***/ (function(module, exports, __nested_webpack_require_45808__) {\n\nvar fails = __nested_webpack_require_45808__(\"d039\");\n\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  // Chrome 38 Symbol has incorrect toString conversion\n  // eslint-disable-next-line no-undef\n  return !String(Symbol());\n});\n\n\n/***/ }),\n\n/***/ \"4a53\":\n/***/ (function(module, exports, __nested_webpack_require_46133__) {\n\nvar map = {\n\t\"./ar\": [\n\t\t\"cfcc\",\n\t\t0\n\t],\n\t\"./ar.json\": [\n\t\t\"cfcc\",\n\t\t0\n\t],\n\t\"./bg\": [\n\t\t\"1f0e\",\n\t\t1\n\t],\n\t\"./bg.json\": [\n\t\t\"1f0e\",\n\t\t1\n\t],\n\t\"./bn\": [\n\t\t\"d2d5\",\n\t\t2\n\t],\n\t\"./bn.json\": [\n\t\t\"d2d5\",\n\t\t2\n\t],\n\t\"./bs\": [\n\t\t\"e06f\",\n\t\t3\n\t],\n\t\"./bs.json\": [\n\t\t\"e06f\",\n\t\t3\n\t],\n\t\"./ca\": [\n\t\t\"aeaf\",\n\t\t4\n\t],\n\t\"./ca.json\": [\n\t\t\"aeaf\",\n\t\t4\n\t],\n\t\"./cs\": [\n\t\t\"442f\",\n\t\t5\n\t],\n\t\"./cs.json\": [\n\t\t\"442f\",\n\t\t5\n\t],\n\t\"./da\": [\n\t\t\"93f6\",\n\t\t6\n\t],\n\t\"./da.json\": [\n\t\t\"93f6\",\n\t\t6\n\t],\n\t\"./de\": [\n\t\t\"44ff\",\n\t\t7\n\t],\n\t\"./de.json\": [\n\t\t\"44ff\",\n\t\t7\n\t],\n\t\"./el\": [\n\t\t\"bac9\",\n\t\t8\n\t],\n\t\"./el.json\": [\n\t\t\"bac9\",\n\t\t8\n\t],\n\t\"./en\": [\n\t\t\"0a96\"\n\t],\n\t\"./en.json\": [\n\t\t\"0a96\"\n\t],\n\t\"./es\": [\n\t\t\"3541\",\n\t\t9\n\t],\n\t\"./es.json\": [\n\t\t\"3541\",\n\t\t9\n\t],\n\t\"./fa\": [\n\t\t\"e4ca\",\n\t\t10\n\t],\n\t\"./fa.json\": [\n\t\t\"e4ca\",\n\t\t10\n\t],\n\t\"./fr\": [\n\t\t\"d791\",\n\t\t11\n\t],\n\t\"./fr.json\": [\n\t\t\"d791\",\n\t\t11\n\t],\n\t\"./he\": [\n\t\t\"5f2c\",\n\t\t12\n\t],\n\t\"./he.json\": [\n\t\t\"5f2c\",\n\t\t12\n\t],\n\t\"./hr\": [\n\t\t\"2364\",\n\t\t13\n\t],\n\t\"./hr.json\": [\n\t\t\"2364\",\n\t\t13\n\t],\n\t\"./hu\": [\n\t\t\"0ade\",\n\t\t14\n\t],\n\t\"./hu.json\": [\n\t\t\"0ade\",\n\t\t14\n\t],\n\t\"./id\": [\n\t\t\"ad69\",\n\t\t15\n\t],\n\t\"./id.json\": [\n\t\t\"ad69\",\n\t\t15\n\t],\n\t\"./is\": [\n\t\t\"3ada\",\n\t\t16\n\t],\n\t\"./is.json\": [\n\t\t\"3ada\",\n\t\t16\n\t],\n\t\"./it\": [\n\t\t\"1412\",\n\t\t17\n\t],\n\t\"./it.json\": [\n\t\t\"1412\",\n\t\t17\n\t],\n\t\"./ja\": [\n\t\t\"e135\",\n\t\t18\n\t],\n\t\"./ja.json\": [\n\t\t\"e135\",\n\t\t18\n\t],\n\t\"./ka\": [\n\t\t\"2969\",\n\t\t19\n\t],\n\t\"./ka.json\": [\n\t\t\"2969\",\n\t\t19\n\t],\n\t\"./ko\": [\n\t\t\"03b7\",\n\t\t20\n\t],\n\t\"./ko.json\": [\n\t\t\"03b7\",\n\t\t20\n\t],\n\t\"./lt\": [\n\t\t\"a2f0\",\n\t\t21\n\t],\n\t\"./lt.json\": [\n\t\t\"a2f0\",\n\t\t21\n\t],\n\t\"./mn\": [\n\t\t\"956e\",\n\t\t22\n\t],\n\t\"./mn.json\": [\n\t\t\"956e\",\n\t\t22\n\t],\n\t\"./nl\": [\n\t\t\"9f37\",\n\t\t23\n\t],\n\t\"./nl.json\": [\n\t\t\"9f37\",\n\t\t23\n\t],\n\t\"./no\": [\n\t\t\"9efb\",\n\t\t24\n\t],\n\t\"./no.json\": [\n\t\t\"9efb\",\n\t\t24\n\t],\n\t\"./pl\": [\n\t\t\"e44c\",\n\t\t25\n\t],\n\t\"./pl.json\": [\n\t\t\"e44c\",\n\t\t25\n\t],\n\t\"./pt-br\": [\n\t\t\"dac8\",\n\t\t26\n\t],\n\t\"./pt-br.json\": [\n\t\t\"dac8\",\n\t\t26\n\t],\n\t\"./ro\": [\n\t\t\"0946\",\n\t\t27\n\t],\n\t\"./ro.json\": [\n\t\t\"0946\",\n\t\t27\n\t],\n\t\"./ru\": [\n\t\t\"d82c\",\n\t\t28\n\t],\n\t\"./ru.json\": [\n\t\t\"d82c\",\n\t\t28\n\t],\n\t\"./sk\": [\n\t\t\"1037\",\n\t\t29\n\t],\n\t\"./sk.json\": [\n\t\t\"1037\",\n\t\t29\n\t],\n\t\"./sl\": [\n\t\t\"c17e\",\n\t\t30\n\t],\n\t\"./sl.json\": [\n\t\t\"c17e\",\n\t\t30\n\t],\n\t\"./sq\": [\n\t\t\"09b8\",\n\t\t31\n\t],\n\t\"./sq.json\": [\n\t\t\"09b8\",\n\t\t31\n\t],\n\t\"./sr\": [\n\t\t\"65a6\",\n\t\t32\n\t],\n\t\"./sr.json\": [\n\t\t\"65a6\",\n\t\t32\n\t],\n\t\"./sv\": [\n\t\t\"1fd1\",\n\t\t33\n\t],\n\t\"./sv.json\": [\n\t\t\"1fd1\",\n\t\t33\n\t],\n\t\"./tr\": [\n\t\t\"20e4\",\n\t\t34\n\t],\n\t\"./tr.json\": [\n\t\t\"20e4\",\n\t\t34\n\t],\n\t\"./uk\": [\n\t\t\"7dc6\",\n\t\t35\n\t],\n\t\"./uk.json\": [\n\t\t\"7dc6\",\n\t\t35\n\t],\n\t\"./vi\": [\n\t\t\"5465\",\n\t\t36\n\t],\n\t\"./vi.json\": [\n\t\t\"5465\",\n\t\t36\n\t],\n\t\"./zh-cn\": [\n\t\t\"8035\",\n\t\t37\n\t],\n\t\"./zh-cn.json\": [\n\t\t\"8035\",\n\t\t37\n\t],\n\t\"./zh-hk\": [\n\t\t\"a5dc\",\n\t\t38\n\t],\n\t\"./zh-hk.json\": [\n\t\t\"a5dc\",\n\t\t38\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__nested_webpack_require_46133__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__nested_webpack_require_46133__.e)).then(function() {\n\t\treturn __nested_webpack_require_46133__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"4a53\";\nmodule.exports = webpackAsyncContext;\n\n/***/ }),\n\n/***/ \"4d64\":\n/***/ (function(module, exports, __nested_webpack_require_49372__) {\n\nvar toIndexedObject = __nested_webpack_require_49372__(\"fc6a\");\nvar toLength = __nested_webpack_require_49372__(\"50c4\");\nvar toAbsoluteIndex = __nested_webpack_require_49372__(\"23cb\");\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n\n\n/***/ }),\n\n/***/ \"4de4\":\n/***/ (function(module, exports, __nested_webpack_require_50705__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_50705__(\"23e7\");\nvar $filter = __nested_webpack_require_50705__(\"b727\").filter;\nvar arrayMethodHasSpeciesSupport = __nested_webpack_require_50705__(\"1dde\");\nvar arrayMethodUsesToLength = __nested_webpack_require_50705__(\"ae40\");\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n// Edge 14- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('filter');\n\n// `Array.prototype.filter` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"4df4\":\n/***/ (function(module, exports, __nested_webpack_require_51527__) {\n\n\"use strict\";\n\nvar bind = __nested_webpack_require_51527__(\"0366\");\nvar toObject = __nested_webpack_require_51527__(\"7b0b\");\nvar callWithSafeIterationClosing = __nested_webpack_require_51527__(\"9bdd\");\nvar isArrayIteratorMethod = __nested_webpack_require_51527__(\"e95a\");\nvar toLength = __nested_webpack_require_51527__(\"50c4\");\nvar createProperty = __nested_webpack_require_51527__(\"8418\");\nvar getIteratorMethod = __nested_webpack_require_51527__(\"35a1\");\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    result = new C();\n    for (;!(step = next.call(iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"50c4\":\n/***/ (function(module, exports, __nested_webpack_require_53347__) {\n\nvar toInteger = __nested_webpack_require_53347__(\"a691\");\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\n\n/***/ }),\n\n/***/ \"5135\":\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"5319\":\n/***/ (function(module, exports, __nested_webpack_require_53912__) {\n\n\"use strict\";\n\nvar fixRegExpWellKnownSymbolLogic = __nested_webpack_require_53912__(\"d784\");\nvar anObject = __nested_webpack_require_53912__(\"825a\");\nvar toObject = __nested_webpack_require_53912__(\"7b0b\");\nvar toLength = __nested_webpack_require_53912__(\"50c4\");\nvar toInteger = __nested_webpack_require_53912__(\"a691\");\nvar requireObjectCoercible = __nested_webpack_require_53912__(\"1d80\");\nvar advanceStringIndex = __nested_webpack_require_53912__(\"8aa5\");\nvar regExpExec = __nested_webpack_require_53912__(\"14c3\");\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      if (\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n      ) {\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n\n\n/***/ }),\n\n/***/ \"5530\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_59298__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_59298__.d(__webpack_exports__, \"a\", function() { return _objectSpread2; });\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_59298__(\"a4d3\");\n/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_59298__(\"4de4\");\n/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_59298__(\"4160\");\n/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_59298__(\"e439\");\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_59298__(\"dbb4\");\n/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_59298__(\"b64b\");\n/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_59298__(\"159b\");\n/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__nested_webpack_require_59298__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_59298__(\"ade3\");\n\n\n\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/***/ }),\n\n/***/ \"5692\":\n/***/ (function(module, exports, __nested_webpack_require_63116__) {\n\nvar IS_PURE = __nested_webpack_require_63116__(\"c430\");\nvar store = __nested_webpack_require_63116__(\"c6cd\");\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.8.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n\n/***/ \"56ef\":\n/***/ (function(module, exports, __nested_webpack_require_63538__) {\n\nvar getBuiltIn = __nested_webpack_require_63538__(\"d066\");\nvar getOwnPropertyNamesModule = __nested_webpack_require_63538__(\"241c\");\nvar getOwnPropertySymbolsModule = __nested_webpack_require_63538__(\"7418\");\nvar anObject = __nested_webpack_require_63538__(\"825a\");\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n\n\n/***/ }),\n\n/***/ \"5899\":\n/***/ (function(module, exports) {\n\n// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n/***/ }),\n\n/***/ \"58a8\":\n/***/ (function(module, exports, __nested_webpack_require_64484__) {\n\nvar requireObjectCoercible = __nested_webpack_require_64484__(\"1d80\");\nvar whitespaces = __nested_webpack_require_64484__(\"5899\");\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n\n\n/***/ }),\n\n/***/ \"5a34\":\n/***/ (function(module, exports, __nested_webpack_require_65618__) {\n\nvar isRegExp = __nested_webpack_require_65618__(\"44e7\");\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"5c6c\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"605d\":\n/***/ (function(module, exports, __nested_webpack_require_66126__) {\n\nvar classof = __nested_webpack_require_66126__(\"c6b6\");\nvar global = __nested_webpack_require_66126__(\"da84\");\n\nmodule.exports = classof(global.process) == 'process';\n\n\n/***/ }),\n\n/***/ \"6062\":\n/***/ (function(module, exports, __nested_webpack_require_66351__) {\n\n\"use strict\";\n\nvar collection = __nested_webpack_require_66351__(\"6d61\");\nvar collectionStrong = __nested_webpack_require_66351__(\"6566\");\n\n// `Set` constructor\n// https://tc39.github.io/ecma262/#sec-set-objects\nmodule.exports = collection('Set', function (init) {\n  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n\n\n/***/ }),\n\n/***/ \"60da\":\n/***/ (function(module, exports, __nested_webpack_require_66789__) {\n\n\"use strict\";\n\nvar DESCRIPTORS = __nested_webpack_require_66789__(\"83ab\");\nvar fails = __nested_webpack_require_66789__(\"d039\");\nvar objectKeys = __nested_webpack_require_66789__(\"df75\");\nvar getOwnPropertySymbolsModule = __nested_webpack_require_66789__(\"7418\");\nvar propertyIsEnumerableModule = __nested_webpack_require_66789__(\"d1e7\");\nvar toObject = __nested_webpack_require_66789__(\"7b0b\");\nvar IndexedObject = __nested_webpack_require_66789__(\"44ad\");\n\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nmodule.exports = !nativeAssign || fails(function () {\n  // should have correct order of operations (Edge bug)\n  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n    enumerable: true,\n    get: function () {\n      defineProperty(this, 'b', {\n        value: 3,\n        enumerable: false\n      });\n    }\n  }), { b: 2 })).b !== 1) return true;\n  // should work with symbols and should have deterministic property order (V8 bug)\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : nativeAssign;\n\n\n/***/ }),\n\n/***/ \"6547\":\n/***/ (function(module, exports, __nested_webpack_require_68859__) {\n\nvar toInteger = __nested_webpack_require_68859__(\"a691\");\nvar requireObjectCoercible = __nested_webpack_require_68859__(\"1d80\");\n\n// `String.prototype.{ codePointAt, at }` methods implementation\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = String(requireObjectCoercible($this));\n    var position = toInteger(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = S.charCodeAt(position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING ? S.charAt(position) : first\n        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n\n\n/***/ }),\n\n/***/ \"6566\":\n/***/ (function(module, exports, __nested_webpack_require_70065__) {\n\n\"use strict\";\n\nvar defineProperty = __nested_webpack_require_70065__(\"9bf2\").f;\nvar create = __nested_webpack_require_70065__(\"7c73\");\nvar redefineAll = __nested_webpack_require_70065__(\"e2cc\");\nvar bind = __nested_webpack_require_70065__(\"0366\");\nvar anInstance = __nested_webpack_require_70065__(\"19aa\");\nvar iterate = __nested_webpack_require_70065__(\"2266\");\nvar defineIterator = __nested_webpack_require_70065__(\"7dd0\");\nvar setSpecies = __nested_webpack_require_70065__(\"2626\");\nvar DESCRIPTORS = __nested_webpack_require_70065__(\"83ab\");\nvar fastKey = __nested_webpack_require_70065__(\"f183\").fastKey;\nvar InternalStateModule = __nested_webpack_require_70065__(\"69f3\");\n\nvar setInternalState = InternalStateModule.set;\nvar internalStateGetterFor = InternalStateModule.getterFor;\n\nmodule.exports = {\n  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, CONSTRUCTOR_NAME);\n      setInternalState(that, {\n        type: CONSTRUCTOR_NAME,\n        index: create(null),\n        first: undefined,\n        last: undefined,\n        size: 0\n      });\n      if (!DESCRIPTORS) that.size = 0;\n      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n    });\n\n    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);\n\n    var define = function (that, key, value) {\n      var state = getInternalState(that);\n      var entry = getEntry(that, key);\n      var previous, index;\n      // change existing entry\n      if (entry) {\n        entry.value = value;\n      // create new entry\n      } else {\n        state.last = entry = {\n          index: index = fastKey(key, true),\n          key: key,\n          value: value,\n          previous: previous = state.last,\n          next: undefined,\n          removed: false\n        };\n        if (!state.first) state.first = entry;\n        if (previous) previous.next = entry;\n        if (DESCRIPTORS) state.size++;\n        else that.size++;\n        // add to index\n        if (index !== 'F') state.index[index] = entry;\n      } return that;\n    };\n\n    var getEntry = function (that, key) {\n      var state = getInternalState(that);\n      // fast case\n      var index = fastKey(key);\n      var entry;\n      if (index !== 'F') return state.index[index];\n      // frozen object case\n      for (entry = state.first; entry; entry = entry.next) {\n        if (entry.key == key) return entry;\n      }\n    };\n\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        var that = this;\n        var state = getInternalState(that);\n        var data = state.index;\n        var entry = state.first;\n        while (entry) {\n          entry.removed = true;\n          if (entry.previous) entry.previous = entry.previous.next = undefined;\n          delete data[entry.index];\n          entry = entry.next;\n        }\n        state.first = state.last = undefined;\n        if (DESCRIPTORS) state.size = 0;\n        else that.size = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = this;\n        var state = getInternalState(that);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.next;\n          var prev = entry.previous;\n          delete state.index[entry.index];\n          entry.removed = true;\n          if (prev) prev.next = next;\n          if (next) next.previous = prev;\n          if (state.first == entry) state.first = next;\n          if (state.last == entry) state.last = prev;\n          if (DESCRIPTORS) state.size--;\n          else that.size--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        var state = getInternalState(this);\n        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.next : state.first) {\n          boundFunction(entry.value, entry.key, this);\n          // revert to the last existing entry\n          while (entry && entry.removed) entry = entry.previous;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(this, key);\n      }\n    });\n\n    redefineAll(C.prototype, IS_MAP ? {\n      // 23.1.3.6 Map.prototype.get(key)\n      get: function get(key) {\n        var entry = getEntry(this, key);\n        return entry && entry.value;\n      },\n      // 23.1.3.9 Map.prototype.set(key, value)\n      set: function set(key, value) {\n        return define(this, key === 0 ? 0 : key, value);\n      }\n    } : {\n      // 23.2.3.1 Set.prototype.add(value)\n      add: function add(value) {\n        return define(this, value = value === 0 ? 0 : value, value);\n      }\n    });\n    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {\n      get: function () {\n        return getInternalState(this).size;\n      }\n    });\n    return C;\n  },\n  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {\n    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';\n    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);\n    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {\n      setInternalState(this, {\n        type: ITERATOR_NAME,\n        target: iterated,\n        state: getInternalCollectionState(iterated),\n        kind: kind,\n        last: undefined\n      });\n    }, function () {\n      var state = getInternalIteratorState(this);\n      var kind = state.kind;\n      var entry = state.last;\n      // revert to the last existing entry\n      while (entry && entry.removed) entry = entry.previous;\n      // get next entry\n      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {\n        // or finish the iteration\n        state.target = undefined;\n        return { value: undefined, done: true };\n      }\n      // return step by kind\n      if (kind == 'keys') return { value: entry.key, done: false };\n      if (kind == 'values') return { value: entry.value, done: false };\n      return { value: [entry.key, entry.value], done: false };\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(CONSTRUCTOR_NAME);\n  }\n};\n\n\n/***/ }),\n\n/***/ \"65f0\":\n/***/ (function(module, exports, __nested_webpack_require_76779__) {\n\nvar isObject = __nested_webpack_require_76779__(\"861d\");\nvar isArray = __nested_webpack_require_76779__(\"e8b5\");\nvar wellKnownSymbol = __nested_webpack_require_76779__(\"b622\");\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n\n\n/***/ }),\n\n/***/ \"69f3\":\n/***/ (function(module, exports, __nested_webpack_require_77559__) {\n\nvar NATIVE_WEAK_MAP = __nested_webpack_require_77559__(\"7f9a\");\nvar global = __nested_webpack_require_77559__(\"da84\");\nvar isObject = __nested_webpack_require_77559__(\"861d\");\nvar createNonEnumerableProperty = __nested_webpack_require_77559__(\"9112\");\nvar objectHas = __nested_webpack_require_77559__(\"5135\");\nvar shared = __nested_webpack_require_77559__(\"c6cd\");\nvar sharedKey = __nested_webpack_require_77559__(\"f772\");\nvar hiddenKeys = __nested_webpack_require_77559__(\"d012\");\n\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = shared.state || (shared.state = new WeakMap());\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    metadata.facade = it;\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\n\n/***/ }),\n\n/***/ \"6d61\":\n/***/ (function(module, exports, __nested_webpack_require_79253__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_79253__(\"23e7\");\nvar global = __nested_webpack_require_79253__(\"da84\");\nvar isForced = __nested_webpack_require_79253__(\"94ca\");\nvar redefine = __nested_webpack_require_79253__(\"6eeb\");\nvar InternalMetadataModule = __nested_webpack_require_79253__(\"f183\");\nvar iterate = __nested_webpack_require_79253__(\"2266\");\nvar anInstance = __nested_webpack_require_79253__(\"19aa\");\nvar isObject = __nested_webpack_require_79253__(\"861d\");\nvar fails = __nested_webpack_require_79253__(\"d039\");\nvar checkCorrectnessOfIteration = __nested_webpack_require_79253__(\"1c7e\");\nvar setToStringTag = __nested_webpack_require_79253__(\"d44e\");\nvar inheritIfRequired = __nested_webpack_require_79253__(\"7156\");\n\nmodule.exports = function (CONSTRUCTOR_NAME, wrapper, common) {\n  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;\n  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var NativeConstructor = global[CONSTRUCTOR_NAME];\n  var NativePrototype = NativeConstructor && NativeConstructor.prototype;\n  var Constructor = NativeConstructor;\n  var exported = {};\n\n  var fixMethod = function (KEY) {\n    var nativeMethod = NativePrototype[KEY];\n    redefine(NativePrototype, KEY,\n      KEY == 'add' ? function add(value) {\n        nativeMethod.call(this, value === 0 ? 0 : value);\n        return this;\n      } : KEY == 'delete' ? function (key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'get' ? function get(key) {\n        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : KEY == 'has' ? function has(key) {\n        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);\n      } : function set(key, value) {\n        nativeMethod.call(this, key === 0 ? 0 : key, value);\n        return this;\n      }\n    );\n  };\n\n  // eslint-disable-next-line max-len\n  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {\n    new NativeConstructor().entries().next();\n  })))) {\n    // create collection constructor\n    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);\n    InternalMetadataModule.REQUIRED = true;\n  } else if (isForced(CONSTRUCTOR_NAME, true)) {\n    var instance = new Constructor();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    // eslint-disable-next-line no-new\n    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new NativeConstructor();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n\n    if (!ACCEPT_ITERABLES) {\n      Constructor = wrapper(function (dummy, iterable) {\n        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);\n        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);\n        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });\n        return that;\n      });\n      Constructor.prototype = NativePrototype;\n      NativePrototype.constructor = Constructor;\n    }\n\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n\n    // weak collections should not contains .clear method\n    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;\n  }\n\n  exported[CONSTRUCTOR_NAME] = Constructor;\n  $({ global: true, forced: Constructor != NativeConstructor }, exported);\n\n  setToStringTag(Constructor, CONSTRUCTOR_NAME);\n\n  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);\n\n  return Constructor;\n};\n\n\n/***/ }),\n\n/***/ \"6eeb\":\n/***/ (function(module, exports, __nested_webpack_require_83537__) {\n\nvar global = __nested_webpack_require_83537__(\"da84\");\nvar createNonEnumerableProperty = __nested_webpack_require_83537__(\"9112\");\nvar has = __nested_webpack_require_83537__(\"5135\");\nvar setGlobal = __nested_webpack_require_83537__(\"ce4e\");\nvar inspectSource = __nested_webpack_require_83537__(\"8925\");\nvar InternalStateModule = __nested_webpack_require_83537__(\"69f3\");\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  var state;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) {\n      createNonEnumerableProperty(value, 'name', key);\n    }\n    state = enforceInternalState(value);\n    if (!state.source) {\n      state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\n    }\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n\n\n/***/ }),\n\n/***/ \"7156\":\n/***/ (function(module, exports, __nested_webpack_require_85151__) {\n\nvar isObject = __nested_webpack_require_85151__(\"861d\");\nvar setPrototypeOf = __nested_webpack_require_85151__(\"d2bb\");\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n\n\n/***/ }),\n\n/***/ \"7418\":\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n\n/***/ \"746f\":\n/***/ (function(module, exports, __nested_webpack_require_86007__) {\n\nvar path = __nested_webpack_require_86007__(\"428f\");\nvar has = __nested_webpack_require_86007__(\"5135\");\nvar wrappedWellKnownSymbolModule = __nested_webpack_require_86007__(\"e538\");\nvar defineProperty = __nested_webpack_require_86007__(\"9bf2\").f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n\n\n/***/ }),\n\n/***/ \"7839\":\n/***/ (function(module, exports) {\n\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n/***/ }),\n\n/***/ \"7b0b\":\n/***/ (function(module, exports, __nested_webpack_require_86727__) {\n\nvar requireObjectCoercible = __nested_webpack_require_86727__(\"1d80\");\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n\n\n/***/ }),\n\n/***/ \"7b5b\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ \"7c73\":\n/***/ (function(module, exports, __nested_webpack_require_87167__) {\n\nvar anObject = __nested_webpack_require_87167__(\"825a\");\nvar defineProperties = __nested_webpack_require_87167__(\"37e8\");\nvar enumBugKeys = __nested_webpack_require_87167__(\"7839\");\nvar hiddenKeys = __nested_webpack_require_87167__(\"d012\");\nvar html = __nested_webpack_require_87167__(\"1be4\");\nvar documentCreateElement = __nested_webpack_require_87167__(\"cc12\");\nvar sharedKey = __nested_webpack_require_87167__(\"f772\");\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    /* global ActiveXObject */\n    activeXDocument = document.domain && new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.github.io/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n\n\n/***/ }),\n\n/***/ \"7db0\":\n/***/ (function(module, exports, __nested_webpack_require_90060__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_90060__(\"23e7\");\nvar $find = __nested_webpack_require_90060__(\"b727\").find;\nvar addToUnscopables = __nested_webpack_require_90060__(\"44d2\");\nvar arrayMethodUsesToLength = __nested_webpack_require_90060__(\"ae40\");\n\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength(FIND);\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND);\n\n\n/***/ }),\n\n/***/ \"7dd0\":\n/***/ (function(module, exports, __nested_webpack_require_90965__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_90965__(\"23e7\");\nvar createIteratorConstructor = __nested_webpack_require_90965__(\"9ed3\");\nvar getPrototypeOf = __nested_webpack_require_90965__(\"e163\");\nvar setPrototypeOf = __nested_webpack_require_90965__(\"d2bb\");\nvar setToStringTag = __nested_webpack_require_90965__(\"d44e\");\nvar createNonEnumerableProperty = __nested_webpack_require_90965__(\"9112\");\nvar redefine = __nested_webpack_require_90965__(\"6eeb\");\nvar wellKnownSymbol = __nested_webpack_require_90965__(\"b622\");\nvar IS_PURE = __nested_webpack_require_90965__(\"c430\");\nvar Iterators = __nested_webpack_require_90965__(\"3f8c\");\nvar IteratorsCore = __nested_webpack_require_90965__(\"ae93\");\n\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n\n\n/***/ }),\n\n/***/ \"7f9a\":\n/***/ (function(module, exports, __nested_webpack_require_94944__) {\n\nvar global = __nested_webpack_require_94944__(\"da84\");\nvar inspectSource = __nested_webpack_require_94944__(\"8925\");\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n\n\n/***/ }),\n\n/***/ \"81d5\":\n/***/ (function(module, exports, __nested_webpack_require_95245__) {\n\n\"use strict\";\n\nvar toObject = __nested_webpack_require_95245__(\"7b0b\");\nvar toAbsoluteIndex = __nested_webpack_require_95245__(\"23cb\");\nvar toLength = __nested_webpack_require_95245__(\"50c4\");\n\n// `Array.prototype.fill` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"825a\":\n/***/ (function(module, exports, __nested_webpack_require_96049__) {\n\nvar isObject = __nested_webpack_require_96049__(\"861d\");\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"83ab\":\n/***/ (function(module, exports, __nested_webpack_require_96307__) {\n\nvar fails = __nested_webpack_require_96307__(\"d039\");\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !fails(function () {\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n\n\n/***/ }),\n\n/***/ \"8418\":\n/***/ (function(module, exports, __nested_webpack_require_96602__) {\n\n\"use strict\";\n\nvar toPrimitive = __nested_webpack_require_96602__(\"c04e\");\nvar definePropertyModule = __nested_webpack_require_96602__(\"9bf2\");\nvar createPropertyDescriptor = __nested_webpack_require_96602__(\"5c6c\");\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n\n\n/***/ }),\n\n/***/ \"857a\":\n/***/ (function(module, exports, __nested_webpack_require_97101__) {\n\nvar requireObjectCoercible = __nested_webpack_require_97101__(\"1d80\");\n\nvar quot = /\"/g;\n\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\n// https://tc39.github.io/ecma262/#sec-createhtml\nmodule.exports = function (string, tag, attribute, value) {\n  var S = String(requireObjectCoercible(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\n\n\n/***/ }),\n\n/***/ \"861d\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"8875\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// addapted from the document.currentScript polyfill by Adam Miller\n// MIT license\n// source: https://github.com/amiller-gh/currentScript-polyfill\n\n// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(typeof self !== 'undefined' ? self : this, function () {\n  function getCurrentScript () {\n    var descriptor = Object.getOwnPropertyDescriptor(document, 'currentScript')\n    // for chrome\n    if (!descriptor && 'currentScript' in document && document.currentScript) {\n      return document.currentScript\n    }\n\n    // for other browsers with native support for currentScript\n    if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {\n      return document.currentScript\n    }\n  \n    // IE 8-10 support script readyState\n    // IE 11+ & Firefox support stack trace\n    try {\n      throw new Error();\n    }\n    catch (err) {\n      // Find the second match for the \"at\" string to get file src url from stack.\n      var ieStackRegExp = /.*at [^(]*\\((.*):(.+):(.+)\\)$/ig,\n        ffStackRegExp = /@([^@]*):(\\d+):(\\d+)\\s*$/ig,\n        stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),\n        scriptLocation = (stackDetails && stackDetails[1]) || false,\n        line = (stackDetails && stackDetails[2]) || false,\n        currentLocation = document.location.href.replace(document.location.hash, ''),\n        pageSource,\n        inlineScriptSourceRegExp,\n        inlineScriptSource,\n        scripts = document.getElementsByTagName('script'); // Live NodeList collection\n  \n      if (scriptLocation === currentLocation) {\n        pageSource = document.documentElement.outerHTML;\n        inlineScriptSourceRegExp = new RegExp('(?:[^\\\\n]+?\\\\n){0,' + (line - 2) + '}[^<]*<script>([\\\\d\\\\D]*?)<\\\\/script>[\\\\d\\\\D]*', 'i');\n        inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();\n      }\n  \n      for (var i = 0; i < scripts.length; i++) {\n        // If ready state is interactive, return the script tag\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i];\n        }\n  \n        // If src matches, return the script tag\n        if (scripts[i].src === scriptLocation) {\n          return scripts[i];\n        }\n  \n        // If inline source matches, return the script tag\n        if (\n          scriptLocation === currentLocation &&\n          scripts[i].innerHTML &&\n          scripts[i].innerHTML.trim() === inlineScriptSource\n        ) {\n          return scripts[i];\n        }\n      }\n  \n      // If no match, return null\n      return null;\n    }\n  };\n\n  return getCurrentScript\n}));\n\n\n/***/ }),\n\n/***/ \"8925\":\n/***/ (function(module, exports, __nested_webpack_require_101067__) {\n\nvar store = __nested_webpack_require_101067__(\"c6cd\");\n\nvar functionToString = Function.toString;\n\n// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper\nif (typeof store.inspectSource != 'function') {\n  store.inspectSource = function (it) {\n    return functionToString.call(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n\n\n/***/ }),\n\n/***/ \"8aa5\":\n/***/ (function(module, exports, __nested_webpack_require_101480__) {\n\n\"use strict\";\n\nvar charAt = __nested_webpack_require_101480__(\"6547\").charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n\n\n/***/ }),\n\n/***/ \"8bbf\":\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\n/***/ }),\n\n/***/ \"90e3\":\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n\n\n/***/ }),\n\n/***/ \"9112\":\n/***/ (function(module, exports, __nested_webpack_require_102174__) {\n\nvar DESCRIPTORS = __nested_webpack_require_102174__(\"83ab\");\nvar definePropertyModule = __nested_webpack_require_102174__(\"9bf2\");\nvar createPropertyDescriptor = __nested_webpack_require_102174__(\"5c6c\");\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"9263\":\n/***/ (function(module, exports, __nested_webpack_require_102646__) {\n\n\"use strict\";\n\nvar regexpFlags = __nested_webpack_require_102646__(\"ad6d\");\nvar stickyHelpers = __nested_webpack_require_102646__(\"9f7f\");\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n\n\n/***/ }),\n\n/***/ \"94ca\":\n/***/ (function(module, exports, __nested_webpack_require_105542__) {\n\nvar fails = __nested_webpack_require_105542__(\"d039\");\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n\n\n/***/ }),\n\n/***/ \"99af\":\n/***/ (function(module, exports, __nested_webpack_require_106197__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_106197__(\"23e7\");\nvar fails = __nested_webpack_require_106197__(\"d039\");\nvar isArray = __nested_webpack_require_106197__(\"e8b5\");\nvar isObject = __nested_webpack_require_106197__(\"861d\");\nvar toObject = __nested_webpack_require_106197__(\"7b0b\");\nvar toLength = __nested_webpack_require_106197__(\"50c4\");\nvar createProperty = __nested_webpack_require_106197__(\"8418\");\nvar arraySpeciesCreate = __nested_webpack_require_106197__(\"65f0\");\nvar arrayMethodHasSpeciesSupport = __nested_webpack_require_106197__(\"1dde\");\nvar wellKnownSymbol = __nested_webpack_require_106197__(\"b622\");\nvar V8_VERSION = __nested_webpack_require_106197__(\"2d00\");\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"9bdd\":\n/***/ (function(module, exports, __nested_webpack_require_108569__) {\n\nvar anObject = __nested_webpack_require_108569__(\"825a\");\nvar iteratorClose = __nested_webpack_require_108569__(\"2a62\");\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (error) {\n    iteratorClose(iterator);\n    throw error;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"9bf2\":\n/***/ (function(module, exports, __nested_webpack_require_109063__) {\n\nvar DESCRIPTORS = __nested_webpack_require_109063__(\"83ab\");\nvar IE8_DOM_DEFINE = __nested_webpack_require_109063__(\"0cfb\");\nvar anObject = __nested_webpack_require_109063__(\"825a\");\nvar toPrimitive = __nested_webpack_require_109063__(\"c04e\");\n\nvar nativeDefineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.github.io/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"9ed3\":\n/***/ (function(module, exports, __nested_webpack_require_109918__) {\n\n\"use strict\";\n\nvar IteratorPrototype = __nested_webpack_require_109918__(\"ae93\").IteratorPrototype;\nvar create = __nested_webpack_require_109918__(\"7c73\");\nvar createPropertyDescriptor = __nested_webpack_require_109918__(\"5c6c\");\nvar setToStringTag = __nested_webpack_require_109918__(\"d44e\");\nvar Iterators = __nested_webpack_require_109918__(\"3f8c\");\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n\n\n/***/ }),\n\n/***/ \"9f7f\":\n/***/ (function(module, exports, __nested_webpack_require_110685__) {\n\n\"use strict\";\n\n\nvar fails = __nested_webpack_require_110685__(\"d039\");\n\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n// so we use an intermediate function.\nfunction RE(s, f) {\n  return RegExp(s, f);\n}\n\nexports.UNSUPPORTED_Y = fails(function () {\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n  var re = RE('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\nexports.BROKEN_CARET = fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = RE('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n\n\n/***/ }),\n\n/***/ \"a15b\":\n/***/ (function(module, exports, __nested_webpack_require_111383__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_111383__(\"23e7\");\nvar IndexedObject = __nested_webpack_require_111383__(\"44ad\");\nvar toIndexedObject = __nested_webpack_require_111383__(\"fc6a\");\nvar arrayMethodIsStrict = __nested_webpack_require_111383__(\"a640\");\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"a434\":\n/***/ (function(module, exports, __nested_webpack_require_112107__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_112107__(\"23e7\");\nvar toAbsoluteIndex = __nested_webpack_require_112107__(\"23cb\");\nvar toInteger = __nested_webpack_require_112107__(\"a691\");\nvar toLength = __nested_webpack_require_112107__(\"50c4\");\nvar toObject = __nested_webpack_require_112107__(\"7b0b\");\nvar arraySpeciesCreate = __nested_webpack_require_112107__(\"65f0\");\nvar createProperty = __nested_webpack_require_112107__(\"8418\");\nvar arrayMethodHasSpeciesSupport = __nested_webpack_require_112107__(\"1dde\");\nvar arrayMethodUsesToLength = __nested_webpack_require_112107__(\"ae40\");\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar max = Math.max;\nvar min = Math.min;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';\n\n// `Array.prototype.splice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.splice\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  splice: function splice(start, deleteCount /* , ...items */) {\n    var O = toObject(this);\n    var len = toLength(O.length);\n    var actualStart = toAbsoluteIndex(start, len);\n    var argumentsLength = arguments.length;\n    var insertCount, actualDeleteCount, A, k, from, to;\n    if (argumentsLength === 0) {\n      insertCount = actualDeleteCount = 0;\n    } else if (argumentsLength === 1) {\n      insertCount = 0;\n      actualDeleteCount = len - actualStart;\n    } else {\n      insertCount = argumentsLength - 2;\n      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);\n    }\n    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {\n      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);\n    }\n    A = arraySpeciesCreate(O, actualDeleteCount);\n    for (k = 0; k < actualDeleteCount; k++) {\n      from = actualStart + k;\n      if (from in O) createProperty(A, k, O[from]);\n    }\n    A.length = actualDeleteCount;\n    if (insertCount < actualDeleteCount) {\n      for (k = actualStart; k < len - actualDeleteCount; k++) {\n        from = k + actualDeleteCount;\n        to = k + insertCount;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];\n    } else if (insertCount > actualDeleteCount) {\n      for (k = len - actualDeleteCount; k > actualStart; k--) {\n        from = k + actualDeleteCount - 1;\n        to = k + insertCount - 1;\n        if (from in O) O[to] = O[from];\n        else delete O[to];\n      }\n    }\n    for (k = 0; k < insertCount; k++) {\n      O[k + actualStart] = arguments[k + 2];\n    }\n    O.length = len - actualDeleteCount + insertCount;\n    return A;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"a4d3\":\n/***/ (function(module, exports, __nested_webpack_require_114911__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_114911__(\"23e7\");\nvar global = __nested_webpack_require_114911__(\"da84\");\nvar getBuiltIn = __nested_webpack_require_114911__(\"d066\");\nvar IS_PURE = __nested_webpack_require_114911__(\"c430\");\nvar DESCRIPTORS = __nested_webpack_require_114911__(\"83ab\");\nvar NATIVE_SYMBOL = __nested_webpack_require_114911__(\"4930\");\nvar USE_SYMBOL_AS_UID = __nested_webpack_require_114911__(\"fdbf\");\nvar fails = __nested_webpack_require_114911__(\"d039\");\nvar has = __nested_webpack_require_114911__(\"5135\");\nvar isArray = __nested_webpack_require_114911__(\"e8b5\");\nvar isObject = __nested_webpack_require_114911__(\"861d\");\nvar anObject = __nested_webpack_require_114911__(\"825a\");\nvar toObject = __nested_webpack_require_114911__(\"7b0b\");\nvar toIndexedObject = __nested_webpack_require_114911__(\"fc6a\");\nvar toPrimitive = __nested_webpack_require_114911__(\"c04e\");\nvar createPropertyDescriptor = __nested_webpack_require_114911__(\"5c6c\");\nvar nativeObjectCreate = __nested_webpack_require_114911__(\"7c73\");\nvar objectKeys = __nested_webpack_require_114911__(\"df75\");\nvar getOwnPropertyNamesModule = __nested_webpack_require_114911__(\"241c\");\nvar getOwnPropertyNamesExternal = __nested_webpack_require_114911__(\"057f\");\nvar getOwnPropertySymbolsModule = __nested_webpack_require_114911__(\"7418\");\nvar getOwnPropertyDescriptorModule = __nested_webpack_require_114911__(\"06cf\");\nvar definePropertyModule = __nested_webpack_require_114911__(\"9bf2\");\nvar propertyIsEnumerableModule = __nested_webpack_require_114911__(\"d1e7\");\nvar createNonEnumerableProperty = __nested_webpack_require_114911__(\"9112\");\nvar redefine = __nested_webpack_require_114911__(\"6eeb\");\nvar shared = __nested_webpack_require_114911__(\"5692\");\nvar sharedKey = __nested_webpack_require_114911__(\"f772\");\nvar hiddenKeys = __nested_webpack_require_114911__(\"d012\");\nvar uid = __nested_webpack_require_114911__(\"90e3\");\nvar wellKnownSymbol = __nested_webpack_require_114911__(\"b622\");\nvar wrappedWellKnownSymbolModule = __nested_webpack_require_114911__(\"e538\");\nvar defineWellKnownSymbol = __nested_webpack_require_114911__(\"746f\");\nvar setToStringTag = __nested_webpack_require_114911__(\"d44e\");\nvar InternalStateModule = __nested_webpack_require_114911__(\"69f3\");\nvar $forEach = __nested_webpack_require_114911__(\"b727\").forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\nvar ObjectPrototype = Object[PROTOTYPE];\nvar $Symbol = global.Symbol;\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPrimitive(P, true);\n  anObject(Attributes);\n  if (has(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPrimitive(V, true);\n  var enumerable = nativePropertyIsEnumerable.call(this, P);\n  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPrimitive(P, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n      result.push(AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  redefine($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = String(key);\n    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return getOwnPropertySymbolsModule.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nif ($stringify) {\n  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {\n    var symbol = $Symbol();\n    // MS Edge converts symbol values to JSON as {}\n    return $stringify([symbol]) != '[null]'\n      // WebKit converts symbol values to JSON as null\n      || $stringify({ a: symbol }) != '{}'\n      // V8 throws on boxed symbols\n      || $stringify(Object(symbol)) != '{}';\n  });\n\n  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {\n    // eslint-disable-next-line no-unused-vars\n    stringify: function stringify(it, replacer, space) {\n      var args = [it];\n      var index = 1;\n      var $replacer;\n      while (arguments.length > index) args.push(arguments[index++]);\n      $replacer = replacer;\n      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n      if (!isArray(replacer)) replacer = function (key, value) {\n        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return $stringify.apply(null, args);\n    }\n  });\n}\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {\n  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n\n\n/***/ }),\n\n/***/ \"a630\":\n/***/ (function(module, exports, __nested_webpack_require_127663__) {\n\nvar $ = __nested_webpack_require_127663__(\"23e7\");\nvar from = __nested_webpack_require_127663__(\"4df4\");\nvar checkCorrectnessOfIteration = __nested_webpack_require_127663__(\"1c7e\");\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n\n\n/***/ }),\n\n/***/ \"a640\":\n/***/ (function(module, exports, __nested_webpack_require_128150__) {\n\n\"use strict\";\n\nvar fails = __nested_webpack_require_128150__(\"d039\");\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n\n\n/***/ }),\n\n/***/ \"a691\":\n/***/ (function(module, exports) {\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n\n\n/***/ }),\n\n/***/ \"a9e3\":\n/***/ (function(module, exports, __nested_webpack_require_128873__) {\n\n\"use strict\";\n\nvar DESCRIPTORS = __nested_webpack_require_128873__(\"83ab\");\nvar global = __nested_webpack_require_128873__(\"da84\");\nvar isForced = __nested_webpack_require_128873__(\"94ca\");\nvar redefine = __nested_webpack_require_128873__(\"6eeb\");\nvar has = __nested_webpack_require_128873__(\"5135\");\nvar classof = __nested_webpack_require_128873__(\"c6b6\");\nvar inheritIfRequired = __nested_webpack_require_128873__(\"7156\");\nvar toPrimitive = __nested_webpack_require_128873__(\"c04e\");\nvar fails = __nested_webpack_require_128873__(\"d039\");\nvar create = __nested_webpack_require_128873__(\"7c73\");\nvar getOwnPropertyNames = __nested_webpack_require_128873__(\"241c\").f;\nvar getOwnPropertyDescriptor = __nested_webpack_require_128873__(\"06cf\").f;\nvar defineProperty = __nested_webpack_require_128873__(\"9bf2\").f;\nvar trim = __nested_webpack_require_128873__(\"58a8\").trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n\n\n/***/ }),\n\n/***/ \"ab13\":\n/***/ (function(module, exports, __nested_webpack_require_132379__) {\n\nvar wellKnownSymbol = __nested_webpack_require_132379__(\"b622\");\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\n\n/***/ }),\n\n/***/ \"ac1f\":\n/***/ (function(module, exports, __nested_webpack_require_132815__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_132815__(\"23e7\");\nvar exec = __nested_webpack_require_132815__(\"9263\");\n\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n\n\n/***/ }),\n\n/***/ \"ad6d\":\n/***/ (function(module, exports, __nested_webpack_require_133075__) {\n\n\"use strict\";\n\nvar anObject = __nested_webpack_require_133075__(\"825a\");\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"ade3\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_133658__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_133658__.d(__webpack_exports__, \"a\", function() { return _defineProperty; });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/***/ }),\n\n/***/ \"ae40\":\n/***/ (function(module, exports, __nested_webpack_require_134130__) {\n\nvar DESCRIPTORS = __nested_webpack_require_134130__(\"83ab\");\nvar fails = __nested_webpack_require_134130__(\"d039\");\nvar has = __nested_webpack_require_134130__(\"5135\");\n\nvar defineProperty = Object.defineProperty;\nvar cache = {};\n\nvar thrower = function (it) { throw it; };\n\nmodule.exports = function (METHOD_NAME, options) {\n  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];\n  if (!options) options = {};\n  var method = [][METHOD_NAME];\n  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n  var argument0 = has(options, 0) ? options[0] : thrower;\n  var argument1 = has(options, 1) ? options[1] : undefined;\n\n  return cache[METHOD_NAME] = !!method && !fails(function () {\n    if (ACCESSORS && !DESCRIPTORS) return true;\n    var O = { length: -1 };\n\n    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });\n    else O[1] = 1;\n\n    method.call(O, argument0, argument1);\n  });\n};\n\n\n/***/ }),\n\n/***/ \"ae93\":\n/***/ (function(module, exports, __nested_webpack_require_135098__) {\n\n\"use strict\";\n\nvar getPrototypeOf = __nested_webpack_require_135098__(\"e163\");\nvar createNonEnumerableProperty = __nested_webpack_require_135098__(\"9112\");\nvar has = __nested_webpack_require_135098__(\"5135\");\nvar wellKnownSymbol = __nested_webpack_require_135098__(\"b622\");\nvar IS_PURE = __nested_webpack_require_135098__(\"c430\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n\n\n/***/ }),\n\n/***/ \"af03\":\n/***/ (function(module, exports, __nested_webpack_require_136469__) {\n\nvar fails = __nested_webpack_require_136469__(\"d039\");\n\n// check the existence of a method, lowercase\n// of a tag and escaping quotes in arguments\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    var test = ''[METHOD_NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  });\n};\n\n\n/***/ }),\n\n/***/ \"b041\":\n/***/ (function(module, exports, __nested_webpack_require_136873__) {\n\n\"use strict\";\n\nvar TO_STRING_TAG_SUPPORT = __nested_webpack_require_136873__(\"00ee\");\nvar classof = __nested_webpack_require_136873__(\"f5df\");\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n\n\n/***/ }),\n\n/***/ \"b0c0\":\n/***/ (function(module, exports, __nested_webpack_require_137314__) {\n\nvar DESCRIPTORS = __nested_webpack_require_137314__(\"83ab\");\nvar defineProperty = __nested_webpack_require_137314__(\"9bf2\").f;\n\nvar FunctionPrototype = Function.prototype;\nvar FunctionPrototypeToString = FunctionPrototype.toString;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// Function instances `.name` property\n// https://tc39.github.io/ecma262/#sec-function-instances-name\nif (DESCRIPTORS && !(NAME in FunctionPrototype)) {\n  defineProperty(FunctionPrototype, NAME, {\n    configurable: true,\n    get: function () {\n      try {\n        return FunctionPrototypeToString.call(this).match(nameRE)[1];\n      } catch (error) {\n        return '';\n      }\n    }\n  });\n}\n\n\n/***/ }),\n\n/***/ \"b48b\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_138063__) {\n\n\"use strict\";\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_event_vue_vue_type_style_index_0_id_cdf79fc4_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_138063__(\"7b5b\");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_event_vue_vue_type_style_index_0_id_cdf79fc4_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_138063__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_event_vue_vue_type_style_index_0_id_cdf79fc4_lang_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n\n\n/***/ }),\n\n/***/ \"b575\":\n/***/ (function(module, exports, __nested_webpack_require_139884__) {\n\nvar global = __nested_webpack_require_139884__(\"da84\");\nvar getOwnPropertyDescriptor = __nested_webpack_require_139884__(\"06cf\").f;\nvar macrotask = __nested_webpack_require_139884__(\"2cf4\").set;\nvar IS_IOS = __nested_webpack_require_139884__(\"1cdc\");\nvar IS_NODE = __nested_webpack_require_139884__(\"605d\");\n\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar document = global.document;\nvar process = global.process;\nvar Promise = global.Promise;\n// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\n\nvar flush, head, last, notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!queueMicrotask) {\n  flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (error) {\n        if (head) notify();\n        else last = undefined;\n        throw error;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  if (!IS_IOS && !IS_NODE && MutationObserver && document) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    then = promise.then;\n    notify = function () {\n      then.call(promise, flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n}\n\nmodule.exports = queueMicrotask || function (fn) {\n  var task = { fn: fn, next: undefined };\n  if (last) last.next = task;\n  if (!head) {\n    head = task;\n    notify();\n  } last = task;\n};\n\n\n/***/ }),\n\n/***/ \"b622\":\n/***/ (function(module, exports, __nested_webpack_require_142416__) {\n\nvar global = __nested_webpack_require_142416__(\"da84\");\nvar shared = __nested_webpack_require_142416__(\"5692\");\nvar has = __nested_webpack_require_142416__(\"5135\");\nvar uid = __nested_webpack_require_142416__(\"90e3\");\nvar NATIVE_SYMBOL = __nested_webpack_require_142416__(\"4930\");\nvar USE_SYMBOL_AS_UID = __nested_webpack_require_142416__(\"fdbf\");\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!has(WellKnownSymbolsStore, name)) {\n    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];\n    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n\n\n/***/ }),\n\n/***/ \"b64b\":\n/***/ (function(module, exports, __nested_webpack_require_143222__) {\n\nvar $ = __nested_webpack_require_143222__(\"23e7\");\nvar toObject = __nested_webpack_require_143222__(\"7b0b\");\nvar nativeKeys = __nested_webpack_require_143222__(\"df75\");\nvar fails = __nested_webpack_require_143222__(\"d039\");\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  keys: function keys(it) {\n    return nativeKeys(toObject(it));\n  }\n});\n\n\n/***/ }),\n\n/***/ \"b727\":\n/***/ (function(module, exports, __nested_webpack_require_143756__) {\n\nvar bind = __nested_webpack_require_143756__(\"0366\");\nvar IndexedObject = __nested_webpack_require_143756__(\"44ad\");\nvar toObject = __nested_webpack_require_143756__(\"7b0b\");\nvar toLength = __nested_webpack_require_143756__(\"50c4\");\nvar arraySpeciesCreate = __nested_webpack_require_143756__(\"65f0\");\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var IS_FILTER_OUT = TYPE == 7;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push.call(target, value); // filterOut\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6),\n  // `Array.prototype.filterOut` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterOut: createMethod(7)\n};\n\n\n/***/ }),\n\n/***/ \"bb2f\":\n/***/ (function(module, exports, __nested_webpack_require_146625__) {\n\nvar fails = __nested_webpack_require_146625__(\"d039\");\n\nmodule.exports = !fails(function () {\n  return Object.isExtensible(Object.preventExtensions({}));\n});\n\n\n/***/ }),\n\n/***/ \"bee2\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_146865__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_146865__.d(__webpack_exports__, \"a\", function() { return _createClass; });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/***/ }),\n\n/***/ \"c04e\":\n/***/ (function(module, exports, __nested_webpack_require_147644__) {\n\nvar isObject = __nested_webpack_require_147644__(\"861d\");\n\n// `ToPrimitive` abstract operation\n// https://tc39.github.io/ecma262/#sec-toprimitive\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (input, PREFERRED_STRING) {\n  if (!isObject(input)) return input;\n  var fn, val;\n  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;\n  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"c430\":\n/***/ (function(module, exports) {\n\nmodule.exports = false;\n\n\n/***/ }),\n\n/***/ \"c4be\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ \"c6b6\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"c6cd\":\n/***/ (function(module, exports, __nested_webpack_require_148880__) {\n\nvar global = __nested_webpack_require_148880__(\"da84\");\nvar setGlobal = __nested_webpack_require_148880__(\"ce4e\");\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n\n\n/***/ }),\n\n/***/ \"c740\":\n/***/ (function(module, exports, __nested_webpack_require_149165__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_149165__(\"23e7\");\nvar $findIndex = __nested_webpack_require_149165__(\"b727\").findIndex;\nvar addToUnscopables = __nested_webpack_require_149165__(\"44d2\");\nvar arrayMethodUsesToLength = __nested_webpack_require_149165__(\"ae40\");\n\nvar FIND_INDEX = 'findIndex';\nvar SKIPS_HOLES = true;\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);\n\n// Shouldn't skip holes\nif (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.findIndex` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.findindex\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND_INDEX);\n\n\n/***/ }),\n\n/***/ \"c8ba\":\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n\n/***/ \"c8c4\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_150687__) {\n\n\"use strict\";\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_header_vue_vue_type_style_index_0_id_d2bb7926_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_150687__(\"c4be\");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_header_vue_vue_type_style_index_0_id_d2bb7926_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_150687__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_header_vue_vue_type_style_index_0_id_d2bb7926_lang_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n\n\n/***/ }),\n\n/***/ \"c96a\":\n/***/ (function(module, exports, __nested_webpack_require_152511__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_152511__(\"23e7\");\nvar createHTML = __nested_webpack_require_152511__(\"857a\");\nvar forcedStringHTMLMethod = __nested_webpack_require_152511__(\"af03\");\n\n// `String.prototype.small` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.small\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('small') }, {\n  small: function small() {\n    return createHTML(this, 'small', '', '');\n  }\n});\n\n\n/***/ }),\n\n/***/ \"c975\":\n/***/ (function(module, exports, __nested_webpack_require_153011__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_153011__(\"23e7\");\nvar $indexOf = __nested_webpack_require_153011__(\"4d64\").indexOf;\nvar arrayMethodIsStrict = __nested_webpack_require_153011__(\"a640\");\nvar arrayMethodUsesToLength = __nested_webpack_require_153011__(\"ae40\");\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"ca84\":\n/***/ (function(module, exports, __nested_webpack_require_154012__) {\n\nvar has = __nested_webpack_require_154012__(\"5135\");\nvar toIndexedObject = __nested_webpack_require_154012__(\"fc6a\");\nvar indexOf = __nested_webpack_require_154012__(\"4d64\").indexOf;\nvar hiddenKeys = __nested_webpack_require_154012__(\"d012\");\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~indexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"caad\":\n/***/ (function(module, exports, __nested_webpack_require_154645__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_154645__(\"23e7\");\nvar $includes = __nested_webpack_require_154645__(\"4d64\").includes;\nvar addToUnscopables = __nested_webpack_require_154645__(\"44d2\");\nvar arrayMethodUsesToLength = __nested_webpack_require_154645__(\"ae40\");\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.includes` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\n$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n\n\n/***/ }),\n\n/***/ \"cb29\":\n/***/ (function(module, exports, __nested_webpack_require_155443__) {\n\nvar $ = __nested_webpack_require_155443__(\"23e7\");\nvar fill = __nested_webpack_require_155443__(\"81d5\");\nvar addToUnscopables = __nested_webpack_require_155443__(\"44d2\");\n\n// `Array.prototype.fill` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n\n\n/***/ }),\n\n/***/ \"cc12\":\n/***/ (function(module, exports, __nested_webpack_require_155901__) {\n\nvar global = __nested_webpack_require_155901__(\"da84\");\nvar isObject = __nested_webpack_require_155901__(\"861d\");\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"cca6\":\n/***/ (function(module, exports, __nested_webpack_require_156316__) {\n\nvar $ = __nested_webpack_require_156316__(\"23e7\");\nvar assign = __nested_webpack_require_156316__(\"60da\");\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n\n\n/***/ }),\n\n/***/ \"cdf9\":\n/***/ (function(module, exports, __nested_webpack_require_156652__) {\n\nvar anObject = __nested_webpack_require_156652__(\"825a\");\nvar isObject = __nested_webpack_require_156652__(\"861d\");\nvar newPromiseCapability = __nested_webpack_require_156652__(\"f069\");\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\n\n/***/ }),\n\n/***/ \"ce4e\":\n/***/ (function(module, exports, __nested_webpack_require_157132__) {\n\nvar global = __nested_webpack_require_157132__(\"da84\");\nvar createNonEnumerableProperty = __nested_webpack_require_157132__(\"9112\");\n\nmodule.exports = function (key, value) {\n  try {\n    createNonEnumerableProperty(global, key, value);\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n\n\n/***/ }),\n\n/***/ \"d012\":\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n\n/***/ \"d039\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"d066\":\n/***/ (function(module, exports, __nested_webpack_require_157745__) {\n\nvar path = __nested_webpack_require_157745__(\"428f\");\nvar global = __nested_webpack_require_157745__(\"da84\");\n\nvar aFunction = function (variable) {\n  return typeof variable == 'function' ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])\n    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n\n\n/***/ }),\n\n/***/ \"d1e7\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n\n\n/***/ }),\n\n/***/ \"d28b\":\n/***/ (function(module, exports, __nested_webpack_require_158934__) {\n\nvar defineWellKnownSymbol = __nested_webpack_require_158934__(\"746f\");\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n\n\n/***/ }),\n\n/***/ \"d2bb\":\n/***/ (function(module, exports, __nested_webpack_require_159205__) {\n\nvar anObject = __nested_webpack_require_159205__(\"825a\");\nvar aPossiblePrototype = __nested_webpack_require_159205__(\"3bbe\");\n\n// `Object.setPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\n\n/***/ }),\n\n/***/ \"d3b7\":\n/***/ (function(module, exports, __nested_webpack_require_160125__) {\n\nvar TO_STRING_TAG_SUPPORT = __nested_webpack_require_160125__(\"00ee\");\nvar redefine = __nested_webpack_require_160125__(\"6eeb\");\nvar toString = __nested_webpack_require_160125__(\"b041\");\n\n// `Object.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nif (!TO_STRING_TAG_SUPPORT) {\n  redefine(Object.prototype, 'toString', toString, { unsafe: true });\n}\n\n\n/***/ }),\n\n/***/ \"d44e\":\n/***/ (function(module, exports, __nested_webpack_require_160560__) {\n\nvar defineProperty = __nested_webpack_require_160560__(\"9bf2\").f;\nvar has = __nested_webpack_require_160560__(\"5135\");\nvar wellKnownSymbol = __nested_webpack_require_160560__(\"b622\");\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n\n\n/***/ }),\n\n/***/ \"d4ec\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_161048__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_161048__.d(__webpack_exports__, \"a\", function() { return _classCallCheck; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/***/ }),\n\n/***/ \"d58f\":\n/***/ (function(module, exports, __nested_webpack_require_161427__) {\n\nvar aFunction = __nested_webpack_require_161427__(\"1c0b\");\nvar toObject = __nested_webpack_require_161427__(\"7b0b\");\nvar IndexedObject = __nested_webpack_require_161427__(\"44ad\");\nvar toLength = __nested_webpack_require_161427__(\"50c4\");\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aFunction(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = toLength(O.length);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n\n\n/***/ }),\n\n/***/ \"d784\":\n/***/ (function(module, exports, __nested_webpack_require_162822__) {\n\n\"use strict\";\n\n// TODO: Remove from `core-js@4` since it's moved to entry points\n__nested_webpack_require_162822__(\"ac1f\");\nvar redefine = __nested_webpack_require_162822__(\"6eeb\");\nvar fails = __nested_webpack_require_162822__(\"d039\");\nvar wellKnownSymbol = __nested_webpack_require_162822__(\"b622\");\nvar regexpExec = __nested_webpack_require_162822__(\"9263\");\nvar createNonEnumerableProperty = __nested_webpack_require_162822__(\"9112\");\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\nvar REPLACE = wellKnownSymbol('replace');\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !(\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\n      REPLACE_KEEPS_$0 &&\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    )) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    }, {\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n  }\n\n  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n};\n\n\n/***/ }),\n\n/***/ \"d81d\":\n/***/ (function(module, exports, __nested_webpack_require_167505__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_167505__(\"23e7\");\nvar $map = __nested_webpack_require_167505__(\"b727\").map;\nvar arrayMethodHasSpeciesSupport = __nested_webpack_require_167505__(\"1dde\");\nvar arrayMethodUsesToLength = __nested_webpack_require_167505__(\"ae40\");\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n// FF49- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('map');\n\n// `Array.prototype.map` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"da84\":\n/***/ (function(module, exports, __nested_webpack_require_168297__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line no-undef\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func\n  (function () { return this; })() || Function('return this')();\n\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_168297__(\"c8ba\")))\n\n/***/ }),\n\n/***/ \"dbb4\":\n/***/ (function(module, exports, __nested_webpack_require_168998__) {\n\nvar $ = __nested_webpack_require_168998__(\"23e7\");\nvar DESCRIPTORS = __nested_webpack_require_168998__(\"83ab\");\nvar ownKeys = __nested_webpack_require_168998__(\"56ef\");\nvar toIndexedObject = __nested_webpack_require_168998__(\"fc6a\");\nvar getOwnPropertyDescriptorModule = __nested_webpack_require_168998__(\"06cf\");\nvar createProperty = __nested_webpack_require_168998__(\"8418\");\n\n// `Object.getOwnPropertyDescriptors` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIndexedObject(object);\n    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var index = 0;\n    var key, descriptor;\n    while (keys.length > index) {\n      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);\n      if (descriptor !== undefined) createProperty(result, key, descriptor);\n    }\n    return result;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"ddb0\":\n/***/ (function(module, exports, __nested_webpack_require_170037__) {\n\nvar global = __nested_webpack_require_170037__(\"da84\");\nvar DOMIterables = __nested_webpack_require_170037__(\"fdbc\");\nvar ArrayIteratorMethods = __nested_webpack_require_170037__(\"e260\");\nvar createNonEnumerableProperty = __nested_webpack_require_170037__(\"9112\");\nvar wellKnownSymbol = __nested_webpack_require_170037__(\"b622\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) {\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n\n\n/***/ }),\n\n/***/ \"de47\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_171632__) {\n\n\"use strict\";\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_cell_vue_vue_type_style_index_0_id_16690b7a_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_171632__(\"f578\");\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_cell_vue_vue_type_style_index_0_id_16690b7a_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_171632__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_cli_service_node_modules_vue_loader_v16_dist_index_js_ref_0_1_cell_vue_vue_type_style_index_0_id_16690b7a_lang_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n\n\n/***/ }),\n\n/***/ \"df75\":\n/***/ (function(module, exports, __nested_webpack_require_173450__) {\n\nvar internalObjectKeys = __nested_webpack_require_173450__(\"ca84\");\nvar enumBugKeys = __nested_webpack_require_173450__(\"7839\");\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n\n\n/***/ }),\n\n/***/ \"e01a\":\n/***/ (function(module, exports, __nested_webpack_require_173810__) {\n\n\"use strict\";\n// `Symbol.prototype.description` getter\n// https://tc39.github.io/ecma262/#sec-symbol.prototype.description\n\nvar $ = __nested_webpack_require_173810__(\"23e7\");\nvar DESCRIPTORS = __nested_webpack_require_173810__(\"83ab\");\nvar global = __nested_webpack_require_173810__(\"da84\");\nvar has = __nested_webpack_require_173810__(\"5135\");\nvar isObject = __nested_webpack_require_173810__(\"861d\");\nvar defineProperty = __nested_webpack_require_173810__(\"9bf2\").f;\nvar copyConstructorProperties = __nested_webpack_require_173810__(\"e893\");\n\nvar NativeSymbol = global.Symbol;\n\nif (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  $({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n\n\n/***/ }),\n\n/***/ \"e163\":\n/***/ (function(module, exports, __nested_webpack_require_175961__) {\n\nvar has = __nested_webpack_require_175961__(\"5135\");\nvar toObject = __nested_webpack_require_175961__(\"7b0b\");\nvar sharedKey = __nested_webpack_require_175961__(\"f772\");\nvar CORRECT_PROTOTYPE_GETTER = __nested_webpack_require_175961__(\"e177\");\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.github.io/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n\n\n/***/ }),\n\n/***/ \"e177\":\n/***/ (function(module, exports, __nested_webpack_require_176724__) {\n\nvar fails = __nested_webpack_require_176724__(\"d039\");\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\n\n/***/ }),\n\n/***/ \"e260\":\n/***/ (function(module, exports, __nested_webpack_require_177014__) {\n\n\"use strict\";\n\nvar toIndexedObject = __nested_webpack_require_177014__(\"fc6a\");\nvar addToUnscopables = __nested_webpack_require_177014__(\"44d2\");\nvar Iterators = __nested_webpack_require_177014__(\"3f8c\");\nvar InternalStateModule = __nested_webpack_require_177014__(\"69f3\");\nvar defineIterator = __nested_webpack_require_177014__(\"7dd0\");\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n/***/ }),\n\n/***/ \"e2cc\":\n/***/ (function(module, exports, __nested_webpack_require_179257__) {\n\nvar redefine = __nested_webpack_require_179257__(\"6eeb\");\n\nmodule.exports = function (target, src, options) {\n  for (var key in src) redefine(target, key, src[key], options);\n  return target;\n};\n\n\n/***/ }),\n\n/***/ \"e439\":\n/***/ (function(module, exports, __nested_webpack_require_179522__) {\n\nvar $ = __nested_webpack_require_179522__(\"23e7\");\nvar fails = __nested_webpack_require_179522__(\"d039\");\nvar toIndexedObject = __nested_webpack_require_179522__(\"fc6a\");\nvar nativeGetOwnPropertyDescriptor = __nested_webpack_require_179522__(\"06cf\").f;\nvar DESCRIPTORS = __nested_webpack_require_179522__(\"83ab\");\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"e538\":\n/***/ (function(module, exports, __nested_webpack_require_180326__) {\n\nvar wellKnownSymbol = __nested_webpack_require_180326__(\"b622\");\n\nexports.f = wellKnownSymbol;\n\n\n/***/ }),\n\n/***/ \"e667\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n\n\n/***/ }),\n\n/***/ \"e6cf\":\n/***/ (function(module, exports, __nested_webpack_require_180710__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_180710__(\"23e7\");\nvar IS_PURE = __nested_webpack_require_180710__(\"c430\");\nvar global = __nested_webpack_require_180710__(\"da84\");\nvar getBuiltIn = __nested_webpack_require_180710__(\"d066\");\nvar NativePromise = __nested_webpack_require_180710__(\"fea9\");\nvar redefine = __nested_webpack_require_180710__(\"6eeb\");\nvar redefineAll = __nested_webpack_require_180710__(\"e2cc\");\nvar setToStringTag = __nested_webpack_require_180710__(\"d44e\");\nvar setSpecies = __nested_webpack_require_180710__(\"2626\");\nvar isObject = __nested_webpack_require_180710__(\"861d\");\nvar aFunction = __nested_webpack_require_180710__(\"1c0b\");\nvar anInstance = __nested_webpack_require_180710__(\"19aa\");\nvar inspectSource = __nested_webpack_require_180710__(\"8925\");\nvar iterate = __nested_webpack_require_180710__(\"2266\");\nvar checkCorrectnessOfIteration = __nested_webpack_require_180710__(\"1c7e\");\nvar speciesConstructor = __nested_webpack_require_180710__(\"4840\");\nvar task = __nested_webpack_require_180710__(\"2cf4\").set;\nvar microtask = __nested_webpack_require_180710__(\"b575\");\nvar promiseResolve = __nested_webpack_require_180710__(\"cdf9\");\nvar hostReportErrors = __nested_webpack_require_180710__(\"44de\");\nvar newPromiseCapabilityModule = __nested_webpack_require_180710__(\"f069\");\nvar perform = __nested_webpack_require_180710__(\"e667\");\nvar InternalStateModule = __nested_webpack_require_180710__(\"69f3\");\nvar isForced = __nested_webpack_require_180710__(\"94ca\");\nvar wellKnownSymbol = __nested_webpack_require_180710__(\"b622\");\nvar IS_NODE = __nested_webpack_require_180710__(\"605d\");\nvar V8_VERSION = __nested_webpack_require_180710__(\"2d00\");\n\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\nvar FORCED = isForced(PROMISE, function () {\n  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n  if (!GLOBAL_CORE_JS_PROMISE) {\n    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n    // We can't detect it synchronously, so just check versions\n    if (V8_VERSION === 66) return true;\n    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    if (!IS_NODE && !NATIVE_REJECTION_EVENT) return true;\n  }\n  // We need Promise#finally in the pure version for preventing prototype pollution\n  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;\n  // Detect correctness of subclassing with @@species support\n  var promise = PromiseConstructor.resolve(1);\n  var FakePromise = function (exec) {\n    exec(function () { /* empty */ }, function () { /* empty */ });\n  };\n  var constructor = promise.constructor = {};\n  constructor[SPECIES] = FakePromise;\n  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);\n});\n\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });\n});\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  var chain = state.reactions;\n  microtask(function () {\n    var value = state.value;\n    var ok = state.state == FULFILLED;\n    var index = 0;\n    // variable length - can't use forEach\n    while (chain.length > index) {\n      var reaction = chain[index++];\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n            state.rejection = HANDLED;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // can throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (error) {\n        if (domain && !exited) domain.exit();\n        reject(error);\n      }\n    }\n    state.reactions = [];\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    global.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  task.call(global, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  task.call(global, function () {\n    var promise = state.facade;\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          then.call(value,\n            bind(internalResolve, wrapper, state),\n            bind(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromiseConstructor, PROMISE);\n    aFunction(executor);\n    Internal.call(this);\n    var state = getInternalState(this);\n    try {\n      executor(bind(internalResolve, state), bind(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: [],\n      rejection: false,\n      state: PENDING,\n      value: undefined\n    });\n  };\n  Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n    // `Promise.prototype.then` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.then\n    then: function then(onFulfilled, onRejected) {\n      var state = getInternalPromiseState(this);\n      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = IS_NODE ? process.domain : undefined;\n      state.parent = true;\n      state.reactions.push(reaction);\n      if (state.state != PENDING) notify(state, false);\n      return reaction.promise;\n    },\n    // `Promise.prototype.catch` method\n    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, state);\n    this.reject = bind(internalReject, state);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && typeof NativePromise == 'function') {\n    nativeThen = NativePromise.prototype.then;\n\n    // wrap native Promise#then for native async functions\n    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n      var that = this;\n      return new PromiseConstructor(function (resolve, reject) {\n        nativeThen.call(that, resolve, reject);\n      }).then(onFulfilled, onRejected);\n    // https://github.com/zloirock/core-js/issues/640\n    }, { unsafe: true });\n\n    // wrap fetch result\n    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {\n      // eslint-disable-next-line no-unused-vars\n      fetch: function fetch(input /* , init */) {\n        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n      }\n    });\n  }\n}\n\n$({ global: true, wrap: true, forced: FORCED }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n\nPromiseWrapper = getBuiltIn(PROMISE);\n\n// statics\n$({ target: PROMISE, stat: true, forced: FORCED }, {\n  // `Promise.reject` method\n  // https://tc39.github.io/ecma262/#sec-promise.reject\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    capability.reject.call(undefined, r);\n    return capability.promise;\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {\n  // `Promise.resolve` method\n  // https://tc39.github.io/ecma262/#sec-promise.resolve\n  resolve: function resolve(x) {\n    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n  }\n});\n\n$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {\n  // `Promise.all` method\n  // https://tc39.github.io/ecma262/#sec-promise.all\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        $promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  },\n  // `Promise.race` method\n  // https://tc39.github.io/ecma262/#sec-promise.race\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aFunction(C.resolve);\n      iterate(iterable, function (promise) {\n        $promiseResolve.call(C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"e893\":\n/***/ (function(module, exports, __nested_webpack_require_194055__) {\n\nvar has = __nested_webpack_require_194055__(\"5135\");\nvar ownKeys = __nested_webpack_require_194055__(\"56ef\");\nvar getOwnPropertyDescriptorModule = __nested_webpack_require_194055__(\"06cf\");\nvar definePropertyModule = __nested_webpack_require_194055__(\"9bf2\");\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n\n\n/***/ }),\n\n/***/ \"e8b5\":\n/***/ (function(module, exports, __nested_webpack_require_194700__) {\n\nvar classof = __nested_webpack_require_194700__(\"c6b6\");\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n\n\n/***/ }),\n\n/***/ \"e95a\":\n/***/ (function(module, exports, __nested_webpack_require_195002__) {\n\nvar wellKnownSymbol = __nested_webpack_require_195002__(\"b622\");\nvar Iterators = __nested_webpack_require_195002__(\"3f8c\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n\n\n/***/ }),\n\n/***/ \"f069\":\n/***/ (function(module, exports, __nested_webpack_require_195427__) {\n\n\"use strict\";\n\nvar aFunction = __nested_webpack_require_195427__(\"1c0b\");\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n\n\n/***/ }),\n\n/***/ \"f183\":\n/***/ (function(module, exports, __nested_webpack_require_196027__) {\n\nvar hiddenKeys = __nested_webpack_require_196027__(\"d012\");\nvar isObject = __nested_webpack_require_196027__(\"861d\");\nvar has = __nested_webpack_require_196027__(\"5135\");\nvar defineProperty = __nested_webpack_require_196027__(\"9bf2\").f;\nvar uid = __nested_webpack_require_196027__(\"90e3\");\nvar FREEZING = __nested_webpack_require_196027__(\"bb2f\");\n\nvar METADATA = uid('meta');\nvar id = 0;\n\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\n\nvar setMetadata = function (it) {\n  defineProperty(it, METADATA, { value: {\n    objectID: 'O' + ++id, // object ID\n    weakData: {}          // weak collections IDs\n  } });\n};\n\nvar fastKey = function (it, create) {\n  // return a primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMetadata(it);\n  // return object ID\n  } return it[METADATA].objectID;\n};\n\nvar getWeakData = function (it, create) {\n  if (!has(it, METADATA)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMetadata(it);\n  // return the store of weak collections IDs\n  } return it[METADATA].weakData;\n};\n\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);\n  return it;\n};\n\nvar meta = module.exports = {\n  REQUIRED: false,\n  fastKey: fastKey,\n  getWeakData: getWeakData,\n  onFreeze: onFreeze\n};\n\nhiddenKeys[METADATA] = true;\n\n\n/***/ }),\n\n/***/ \"f578\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ \"f5df\":\n/***/ (function(module, exports, __nested_webpack_require_197962__) {\n\nvar TO_STRING_TAG_SUPPORT = __nested_webpack_require_197962__(\"00ee\");\nvar classofRaw = __nested_webpack_require_197962__(\"c6b6\");\nvar wellKnownSymbol = __nested_webpack_require_197962__(\"b622\");\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n\n\n/***/ }),\n\n/***/ \"f772\":\n/***/ (function(module, exports, __nested_webpack_require_199015__) {\n\nvar shared = __nested_webpack_require_199015__(\"5692\");\nvar uid = __nested_webpack_require_199015__(\"90e3\");\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n\n\n/***/ }),\n\n/***/ \"fb15\":\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_199304__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_199304__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (true) {\n    var getCurrentScript = __nested_webpack_require_199304__(\"8875\")\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __nested_webpack_require_199304__.p = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\n/* harmony default export */ var setPublicPath = (null);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js\nvar es_regexp_exec = __nested_webpack_require_199304__(\"ac1f\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js\nvar es_string_split = __nested_webpack_require_199304__(\"1276\");\n\n// EXTERNAL MODULE: external {\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"root\":\"Vue\"}\nvar external_commonjs_vue_commonjs2_vue_root_Vue_ = __nested_webpack_require_199304__(\"8bbf\");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/index.vue?vue&type=template&id=0d6f15c8&lang=pug\n\n\n\n\nvar _hoisted_1 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(\" \");\n\nvar _hoisted_2 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"i\", {\n  class: \"angle\"\n}, null, -1);\n\nvar _hoisted_3 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(\" \");\n\nvar _hoisted_4 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(\" \");\n\nvar _hoisted_5 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"i\", {\n  class: \"angle\"\n}, null, -1);\n\nvar _hoisted_6 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(\" \");\n\nvar _hoisted_7 = {\n  class: \"default\"\n};\nvar _hoisted_8 = {\n  key: 0,\n  class: \"vuecal__flex vuecal__body\",\n  grow: \"\"\n};\nvar _hoisted_9 = {\n  class: \"vuecal__flex\",\n  row: \"\",\n  grow: \"\"\n};\nvar _hoisted_10 = {\n  key: 0,\n  class: \"vuecal__time-column\"\n};\n\nvar _hoisted_11 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", {\n  class: \"vuecal__time-cell-line\"\n}, null, -1);\n\nvar _hoisted_12 = {\n  class: \"vuecal__time-cell-label\"\n};\nvar _hoisted_13 = {\n  key: 1,\n  class: \"vuecal__flex vuecal__week-numbers\",\n  column: \"\"\n};\nvar _hoisted_14 = {\n  key: 2,\n  class: \"vuecal__cell-events-count\"\n};\nvar _hoisted_15 = {\n  key: 3,\n  class: \"vuecal__no-event\"\n};\nvar _hoisted_16 = {\n  key: 2,\n  class: \"vuecal__event-time\"\n};\nvar _hoisted_17 = {\n  key: 0\n};\nvar _hoisted_18 = {\n  key: 1,\n  class: \"days-to-end\"\n};\nvar _hoisted_19 = {\n  key: 0,\n  class: \"vuecal__scrollbar-check\"\n};\n\nvar _hoisted_20 = /*#__PURE__*/Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", null, null, -1);\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_vuecal_header = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"vuecal-header\");\n\n  var _component_all_day_bar = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"all-day-bar\");\n\n  var _component_weekdays_headings = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"weekdays-headings\");\n\n  var _component_vuecal_cell = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"vuecal-cell\");\n\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n    class: [\"vuecal__flex vuecal\", $options.cssClasses],\n    column: \"\",\n    ref: \"vuecal\",\n    lang: $props.locale\n  }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(_component_vuecal_header, {\n    options: _ctx.$props,\n    \"edit-events\": $options.editEvents,\n    \"view-props\": {\n      views: $options.views,\n      weekDaysInHeader: $options.weekDaysInHeader\n    },\n    \"week-days\": $options.weekDays,\n    \"has-splits\": $options.hasSplits,\n    \"day-splits\": $options.daySplits,\n    \"switch-to-narrower-view\": $options.switchToNarrowerView\n  }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createSlots\"])({\n    \"arrow-prev\": Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"arrow-prev\", {}, function () {\n        return [_hoisted_1, _hoisted_2, _hoisted_3];\n      })];\n    }),\n    \"arrow-next\": Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"arrow-next\", {}, function () {\n        return [_hoisted_4, _hoisted_5, _hoisted_6];\n      })];\n    }),\n    \"today-button\": Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"today-button\", {}, function () {\n        return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", _hoisted_7, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.texts.today), 1)];\n      })];\n    }),\n    title: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"title\", {\n        title: $options.viewTitle,\n        view: $data.view\n      }, function () {\n        return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($options.viewTitle), 1\n        /* TEXT */\n        )];\n      })];\n    }),\n    _: 2\n  }, [_ctx.$slots['weekday-heading'] ? {\n    name: \"weekday-heading\",\n    fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref) {\n      var heading = _ref.heading,\n          view = _ref.view;\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"weekday-heading\", {\n        heading: heading,\n        view: view\n      })];\n    })\n  } : undefined, _ctx.$slots['split-label'] ? {\n    name: \"split-label\",\n    fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref2) {\n      var split = _ref2.split;\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n        split: split,\n        view: $data.view.id\n      })];\n    })\n  } : undefined]), 1032, [\"options\", \"edit-events\", \"view-props\", \"week-days\", \"has-splits\", \"day-splits\", \"switch-to-narrower-view\"]), !$props.hideBody ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_8, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Transition\"], {\n    name: \"slide-fade--\".concat($data.transitionDirection),\n    appear: $props.transitions\n  }, {\n    default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n        class: \"vuecal__flex\",\n        style: {\n          \"min-width\": \"100%\"\n        },\n        key: $props.transitions ? $data.view.id : false,\n        column: \"\"\n      }, [$props.showAllDayEvents && $options.hasTimeColumn && (!$options.cellOrSplitMinWidth || $options.isDayView && !$props.minSplitWidth) ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_all_day_bar, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"mergeProps\"])({\n        key: 0\n      }, $options.allDayBar), {\n        event: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref3) {\n          var event = _ref3.event,\n              view = _ref3.view;\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n            view: view,\n            event: event\n          }, function () {\n            return [$options.editEvents.title && event.titleEditable ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 0,\n              class: \"vuecal__event-title vuecal__event-title--edit\",\n              contenteditable: \"\",\n              onBlur: function onBlur($event) {\n                return $options.onEventTitleBlur($event, event);\n              },\n              innerHTML: event.title\n            }, null, 40, [\"onBlur\", \"innerHTML\"])) : event.title ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 1,\n              class: \"vuecal__event-title\",\n              innerHTML: event.title\n            }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), event.content && !$options.hasShortEvents && !$options.isShortMonthView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 2,\n              class: \"vuecal__event-content\",\n              innerHTML: event.content\n            }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n          })];\n        }),\n        _: 1\n      }, 16)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", {\n        class: [\"vuecal__bg\", {\n          vuecal__flex: !$options.hasTimeColumn\n        }],\n        column: \"\"\n      }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", _hoisted_9, [$options.hasTimeColumn ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_10, [$props.showAllDayEvents && $options.cellOrSplitMinWidth && !($options.isDayView && !$props.minSplitWidth) ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n        key: 0,\n        class: \"vuecal__all-day-text\",\n        style: {\n          height: $options.allDayBar.height\n        }\n      }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.texts.allDay), 1)], 4)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.timeCells, function (cell, i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n          class: \"vuecal__time-cell\",\n          key: i,\n          style: \"height: \".concat($props.timeCellHeight, \"px\")\n        }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"time-cell\", {\n          hours: cell.hours,\n          minutes: cell.minutes\n        }, function () {\n          return [_hoisted_11, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", _hoisted_12, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(cell.label), 1)];\n        })], 4);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), $props.showWeekNumbers && $options.isMonthView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_13, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])(6, function (i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", {\n          class: \"vuecal__flex vuecal__week-number-cell\",\n          key: i,\n          grow: \"\"\n        }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"week-number-cell\", {\n          week: $options.getWeekNumber(i - 1)\n        }, function () {\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($options.getWeekNumber(i - 1)), 1\n          /* TEXT */\n          )];\n        })]);\n      }), 64\n      /* STABLE_FRAGMENT */\n      ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", {\n        class: [\"vuecal__flex vuecal__cells\", \"\".concat($data.view.id, \"-view\")],\n        grow: \"\",\n        wrap: !$options.cellOrSplitMinWidth || !$options.isWeekView,\n        column: !!$options.cellOrSplitMinWidth\n      }, [$options.cellOrSplitMinWidth && $options.isWeekView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_weekdays_headings, {\n        key: 0,\n        \"transition-direction\": $data.transitionDirection,\n        \"week-days\": $options.weekDays,\n        \"switch-to-narrower-view\": $options.switchToNarrowerView,\n        style: $options.cellOrSplitMinWidth ? \"min-width: \".concat($options.cellOrSplitMinWidth, \"px\") : ''\n      }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createSlots\"])({\n        _: 2\n      }, [_ctx.$slots['weekday-heading'] ? {\n        name: \"weekday-heading\",\n        fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref4) {\n          var heading = _ref4.heading,\n              view = _ref4.view;\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"weekday-heading\", {\n            heading: heading,\n            view: view\n          })];\n        })\n      } : undefined, _ctx.$slots['split-label'] ? {\n        name: \"split-label\",\n        fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref5) {\n          var split = _ref5.split;\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n            split: split,\n            view: $data.view.id\n          })];\n        })\n      } : undefined]), 1032, [\"transition-direction\", \"week-days\", \"switch-to-narrower-view\", \"style\"])) : $options.hasSplits && $props.stickySplitLabels && $props.minSplitWidth ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n        key: 1,\n        class: \"vuecal__flex vuecal__split-days-headers\",\n        style: $options.cellOrSplitMinWidth ? \"min-width: \".concat($options.cellOrSplitMinWidth, \"px\") : ''\n      }, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.daySplits, function (split, i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n          class: [\"day-split-header\", split.class || false],\n          key: i\n        }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n          split: split,\n          view: $data.view.id\n        }, function () {\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(split.label), 1\n          /* TEXT */\n          )];\n        })], 2);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))], 4)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), $props.showAllDayEvents && $options.hasTimeColumn && ($options.isWeekView && $options.cellOrSplitMinWidth || $options.isDayView && $options.hasSplits && $props.minSplitWidth) ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_all_day_bar, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"mergeProps\"])({\n        key: 2\n      }, $options.allDayBar), {\n        event: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref6) {\n          var event = _ref6.event,\n              view = _ref6.view;\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n            view: view,\n            event: event\n          }, function () {\n            return [$options.editEvents.title && event.titleEditable ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 0,\n              class: \"vuecal__event-title vuecal__event-title--edit\",\n              contenteditable: \"\",\n              onBlur: function onBlur($event) {\n                return $options.onEventTitleBlur($event, event);\n              },\n              innerHTML: event.title\n            }, null, 40, [\"onBlur\", \"innerHTML\"])) : event.title ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 1,\n              class: \"vuecal__event-title\",\n              innerHTML: event.title\n            }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), event.content && !$options.hasShortEvents && !$options.isShortMonthView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n              key: 2,\n              class: \"vuecal__event-content\",\n              innerHTML: event.content\n            }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n          })];\n        }),\n        _: 1\n      }, 16)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", {\n        class: \"vuecal__flex\",\n        ref: function ref(el) {\n          return $data.cellsEl = el;\n        },\n        grow: \"\",\n        wrap: !$options.cellOrSplitMinWidth || !$options.isWeekView,\n        style: $options.cellOrSplitMinWidth ? \"min-width: \".concat($options.cellOrSplitMinWidth, \"px\") : ''\n      }, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.viewCells, function (cell, i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_vuecal_cell, {\n          key: i,\n          options: _ctx.$props,\n          \"edit-events\": $options.editEvents,\n          data: cell,\n          \"cell-width\": $props.hideWeekdays.length && ($options.isWeekView || $options.isMonthView) && $options.cellWidth,\n          \"min-timestamp\": $options.minTimestamp,\n          \"max-timestamp\": $options.maxTimestamp,\n          \"cell-splits\": $options.hasSplits && $options.daySplits || []\n        }, {\n          \"cell-content\": Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref7) {\n            var events = _ref7.events,\n                split = _ref7.split,\n                selectCell = _ref7.selectCell;\n            return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"cell-content\", {\n              cell: cell,\n              view: $data.view,\n              \"go-narrower\": selectCell,\n              events: events\n            }, function () {\n              return [split && !$props.stickySplitLabels ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n                key: 0,\n                class: \"split-label\",\n                innerHTML: split.label\n              }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), cell.content ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n                key: 1,\n                class: \"vuecal__cell-date\",\n                innerHTML: cell.content\n              }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), ($options.isMonthView && !$props.eventsOnMonthView || $options.isYearsOrYearView && $props.eventsCountOnYearView) && events.length ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_14, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"events-count\", {\n                view: $data.view,\n                events: events\n              }, function () {\n                return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(events.length), 1\n                /* TEXT */\n                )];\n              })])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), !$options.cellOrSplitHasEvents(events, split) && $options.isWeekOrDayView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_15, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"no-event\", {}, function () {\n                return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.texts.noEvent), 1\n                /* TEXT */\n                )];\n              })])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n            })];\n          }),\n          event: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref8) {\n            var event = _ref8.event,\n                view = _ref8.view;\n            return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n              view: view,\n              event: event\n            }, function () {\n              return [$options.editEvents.title && event.titleEditable ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n                key: 0,\n                class: \"vuecal__event-title vuecal__event-title--edit\",\n                contenteditable: \"\",\n                onBlur: function onBlur($event) {\n                  return $options.onEventTitleBlur($event, event);\n                },\n                innerHTML: event.title\n              }, null, 40, [\"onBlur\", \"innerHTML\"])) : event.title ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n                key: 1,\n                class: \"vuecal__event-title\",\n                innerHTML: event.title\n              }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), $props.time && !event.allDay && !($options.isMonthView && (event.allDay || $props.showAllDayEvents === 'short')) && !$options.isShortMonthView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_16, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.utils.date.formatTime(event.start, $options.TimeFormat)), 1\n              /* TEXT */\n              ), event.endTimeMinutes ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"span\", _hoisted_17, \" - \" + Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.utils.date.formatTime(event.end, $options.TimeFormat, null, true)), 1)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), event.daysCount > 1 && (event.segments[cell.formattedDate] || {}).isFirstDay ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"small\", _hoisted_18, \" +\" + Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(event.daysCount - 1) + Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(($data.texts.day[0] || '').toLowerCase()), 1)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), event.content && !($options.isMonthView && event.allDay && $props.showAllDayEvents === 'short') && !$options.isShortMonthView ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n                key: 3,\n                class: \"vuecal__event-content\",\n                innerHTML: event.content\n              }, null, 8, [\"innerHTML\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n            })];\n          }),\n          \"no-event\": Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n            return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"no-event\", {}, function () {\n              return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($data.texts.noEvent), 1\n              /* TEXT */\n              )];\n            })];\n          }),\n          _: 2\n        }, 1032, [\"options\", \"edit-events\", \"data\", \"cell-width\", \"min-timestamp\", \"max-timestamp\", \"cell-splits\"]);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))], 12, [\"wrap\"])], 10, [\"wrap\", \"column\"])])], 2)]))];\n    }),\n    _: 1\n  }, 8, [\"name\", \"appear\"]), !$data.ready ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", _hoisted_19, [_hoisted_20])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)], 10, [\"lang\"]);\n}\n// CONCATENATED MODULE: ./src/vue-cal/index.vue?vue&type=template&id=0d6f15c8&lang=pug\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js\nvar es_array_concat = __nested_webpack_require_199304__(\"99af\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.fill.js\nvar es_array_fill = __nested_webpack_require_199304__(\"cb29\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js\nvar es_array_filter = __nested_webpack_require_199304__(\"4de4\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js\nvar es_array_find = __nested_webpack_require_199304__(\"7db0\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.for-each.js\nvar es_array_for_each = __nested_webpack_require_199304__(\"4160\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js\nvar es_array_includes = __nested_webpack_require_199304__(\"caad\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js\nvar es_array_index_of = __nested_webpack_require_199304__(\"c975\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js\nvar es_array_join = __nested_webpack_require_199304__(\"a15b\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __nested_webpack_require_199304__(\"d81d\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js\nvar es_array_reduce = __nested_webpack_require_199304__(\"13d5\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js\nvar es_array_slice = __nested_webpack_require_199304__(\"fb6a\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.some.js\nvar es_array_some = __nested_webpack_require_199304__(\"45fc\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js\nvar es_number_constructor = __nested_webpack_require_199304__(\"a9e3\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js\nvar es_object_assign = __nested_webpack_require_199304__(\"cca6\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __nested_webpack_require_199304__(\"b64b\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __nested_webpack_require_199304__(\"d3b7\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js\nvar es_promise = __nested_webpack_require_199304__(\"e6cf\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js\nvar es_string_includes = __nested_webpack_require_199304__(\"2532\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.repeat.js\nvar es_string_repeat = __nested_webpack_require_199304__(\"38cf\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __nested_webpack_require_199304__(\"5319\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.small.js\nvar es_string_small = __nested_webpack_require_199304__(\"c96a\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js\nvar web_dom_collections_for_each = __nested_webpack_require_199304__(\"159b\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __nested_webpack_require_199304__(\"ade3\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js\nvar es_symbol = __nested_webpack_require_199304__(\"a4d3\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js\nvar es_symbol_description = __nested_webpack_require_199304__(\"e01a\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js\nvar es_symbol_iterator = __nested_webpack_require_199304__(\"d28b\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js\nvar es_array_from = __nested_webpack_require_199304__(\"a630\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js\nvar es_array_iterator = __nested_webpack_require_199304__(\"e260\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js\nvar es_string_iterator = __nested_webpack_require_199304__(\"3ca3\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __nested_webpack_require_199304__(\"ddb0\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\n\n\n\n\n\n\n\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js\nvar es_function_name = __nested_webpack_require_199304__(\"b0c0\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __nested_webpack_require_199304__(\"25f0\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\n\n\n\n\n\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\n\n\n\n\n\n\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __nested_webpack_require_199304__(\"5530\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __nested_webpack_require_199304__(\"d4ec\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __nested_webpack_require_199304__(\"bee2\");\n\n// CONCATENATED MODULE: ./src/vue-cal/utils/date.js\n\n\n\n\n\n\n\n\n\n/**\n * Date Utils & prototypes.\n *\n * Waiting for VS Code to support JavaScript private fields.\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields\n * Meantime keep `_` for private.\n */\nvar now, todayDate, todayF, date_self;\nvar _dateObject = {};\nvar _timeObject = {};\n\nvar date_DateUtils = /*#__PURE__*/function () {\n  function DateUtils(texts) {\n    var noPrototypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    Object(classCallCheck[\"a\" /* default */])(this, DateUtils);\n\n    Object(defineProperty[\"a\" /* default */])(this, \"texts\", {});\n\n    Object(defineProperty[\"a\" /* default */])(this, \"dateToMinutes\", function (date) {\n      return date.getHours() * 60 + date.getMinutes();\n    });\n\n    date_self = this; // For use in Date prototypes.\n\n    this._texts = texts; // Add prototypes ASAP - only once.\n\n    if (!noPrototypes && Date && !Date.prototype.addDays) this._initDatePrototypes(); // @todo: This would be nicer, but how to set Date.noPrototypes ASAP only if user wants?\n    // if (Date.noPrototypes) delete Date.noPrototypes\n    // else this._initDatePrototypes()\n  }\n\n  Object(createClass[\"a\" /* default */])(DateUtils, [{\n    key: \"_initDatePrototypes\",\n    value: function _initDatePrototypes() {\n      /* eslint-disable no-extend-native */\n      Date.prototype.addDays = function (days) {\n        return date_self.addDays(this, days);\n      };\n\n      Date.prototype.subtractDays = function (days) {\n        return date_self.subtractDays(this, days);\n      };\n\n      Date.prototype.addHours = function (hours) {\n        return date_self.addHours(this, hours);\n      };\n\n      Date.prototype.subtractHours = function (hours) {\n        return date_self.subtractHours(this, hours);\n      };\n\n      Date.prototype.addMinutes = function (minutes) {\n        return date_self.addMinutes(this, minutes);\n      };\n\n      Date.prototype.subtractMinutes = function (minutes) {\n        return date_self.subtractMinutes(this, minutes);\n      };\n\n      Date.prototype.getWeek = function () {\n        return date_self.getWeek(this);\n      };\n\n      Date.prototype.isToday = function () {\n        return date_self.isToday(this);\n      };\n\n      Date.prototype.isLeapYear = function () {\n        return date_self.isLeapYear(this);\n      };\n\n      Date.prototype.format = function () {\n        var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD';\n        return date_self.formatDate(this, format);\n      };\n\n      Date.prototype.formatTime = function () {\n        var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'HH:mm';\n        return date_self.formatTime(this, format);\n      };\n      /* eslint-enable no-extend-native */\n\n    }\n  }, {\n    key: \"removePrototypes\",\n    value: function removePrototypes() {\n      delete Date.prototype.addDays;\n      delete Date.prototype.subtractDays;\n      delete Date.prototype.addHours;\n      delete Date.prototype.subtractHours;\n      delete Date.prototype.addMinutes;\n      delete Date.prototype.subtractMinutes;\n      delete Date.prototype.getWeek;\n      delete Date.prototype.isToday;\n      delete Date.prototype.isLeapYear;\n      delete Date.prototype.format;\n      delete Date.prototype.formatTime;\n    }\n  }, {\n    key: \"updateTexts\",\n    value: function updateTexts(texts) {\n      this._texts = texts;\n    } // Cache Today's date (to a maximum) for better isToday() performances. Formatted without leading 0.\n    // We still need to update Today's date when Today changes without page refresh.\n\n  }, {\n    key: \"_todayFormatted\",\n    value: function _todayFormatted() {\n      if (todayDate !== new Date().getDate()) {\n        now = new Date();\n        todayDate = now.getDate();\n        todayF = \"\".concat(now.getFullYear(), \"-\").concat(now.getMonth(), \"-\").concat(now.getDate());\n      }\n\n      return todayF;\n    } // UTILITIES.\n    // ====================================================================\n\n  }, {\n    key: \"addDays\",\n    value: function addDays(date, days) {\n      var d = new Date(date.valueOf());\n      d.setDate(d.getDate() + days);\n      return d;\n    }\n  }, {\n    key: \"subtractDays\",\n    value: function subtractDays(date, days) {\n      var d = new Date(date.valueOf());\n      d.setDate(d.getDate() - days);\n      return d;\n    }\n  }, {\n    key: \"addHours\",\n    value: function addHours(date, hours) {\n      var d = new Date(date.valueOf());\n      d.setHours(d.getHours() + hours);\n      return d;\n    }\n  }, {\n    key: \"subtractHours\",\n    value: function subtractHours(date, hours) {\n      var d = new Date(date.valueOf());\n      d.setHours(d.getHours() - hours);\n      return d;\n    }\n  }, {\n    key: \"addMinutes\",\n    value: function addMinutes(date, minutes) {\n      var d = new Date(date.valueOf());\n      d.setMinutes(d.getMinutes() + minutes);\n      return d;\n    }\n  }, {\n    key: \"subtractMinutes\",\n    value: function subtractMinutes(date, minutes) {\n      var d = new Date(date.valueOf());\n      d.setMinutes(d.getMinutes() - minutes);\n      return d;\n    }\n  }, {\n    key: \"getWeek\",\n    value: function getWeek(date) {\n      var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n      var dayNum = d.getUTCDay() || 7;\n      d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n      var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n      return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);\n    }\n  }, {\n    key: \"isToday\",\n    value: function isToday(date) {\n      return \"\".concat(date.getFullYear(), \"-\").concat(date.getMonth(), \"-\").concat(date.getDate()) === this._todayFormatted();\n    }\n  }, {\n    key: \"isLeapYear\",\n    value: function isLeapYear(date) {\n      var year = date.getFullYear();\n      return !(year % 400) || year % 100 && !(year % 4);\n    } // Returns today if it's FirstDayOfWeek (Monday or Sunday) or previous FirstDayOfWeek otherwise.\n\n  }, {\n    key: \"getPreviousFirstDayOfWeek\",\n    value: function getPreviousFirstDayOfWeek() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var weekStartsOnSunday = arguments.length > 1 ? arguments[1] : undefined;\n      var prevFirstDayOfWeek = date && new Date(date.valueOf()) || new Date();\n      var dayModifier = weekStartsOnSunday ? 7 : 6;\n      prevFirstDayOfWeek.setDate(prevFirstDayOfWeek.getDate() - (prevFirstDayOfWeek.getDay() + dayModifier) % 7);\n      return prevFirstDayOfWeek;\n    }\n    /**\n     * Converts a string to a Javascript Date object. If a Date object is passed, return it as is.\n     *\n     * @param {String | Date} date the string to convert to Date.\n     * @return {Date} the equivalent Javascript Date object.\n     */\n\n  }, {\n    key: \"stringToDate\",\n    value: function stringToDate(date) {\n      if (date instanceof Date) return date; // Regexp way is less performant: https://jsperf.com/string-to-date-regexp-vs-new-date\n      // const [, y, m, d, h = 0, min = 0] = date.match(/(\\d{4})-(\\d{2})-(\\d{2})(?: (\\d{2}):(\\d{2}))?/)\n      // return new Date(y, parseInt(m) - 1, d, h, min)\n\n      if (date.length === 10) date += ' 00:00';\n      return new Date(date.replace(/-/g, '/')); // replace '-' with '/' for Safari.\n    }\n    /**\n     * Simply takes a Date and returns the associated time in minutes (sum of hours + minutes).\n     *\n     * @param {Date} date the JavaScript Date to extract minutes from.\n     * @return {Number} the number of minutes (total of hours plus minutes).\n     */\n\n  }, {\n    key: \"countDays\",\n\n    /**\n     * Count the number of days this date range spans onto.\n     * E.g. countDays(2019-11-02 18:00, 2019-11-03 02:00) = 2\n     *\n     * @param {String | Date} start the start date\n     * @param {String | Date} end the end date\n     * @return {Integer} The number of days this date range involves\n     */\n    value: function countDays(start, end) {\n      // replace '-' with '/' for Safari.\n      if (typeof start === 'string') start = start.replace(/-/g, '/');\n      if (typeof end === 'string') end = end.replace(/-/g, '/'); // Set start & end at midnight then compare the delta. Don't modify the original dates.\n\n      start = new Date(start).setHours(0, 0, 0, 0); // Set end at midnight plus 1 sec, so Math.ceil will round it up to a full day.\n\n      end = new Date(end).setHours(0, 0, 1, 0); // Remove the potential daylight saving delta.\n\n      var timezoneDiffMs = (new Date(end).getTimezoneOffset() - new Date(start).getTimezoneOffset()) * 60 * 1000;\n      return Math.ceil((end - start - timezoneDiffMs) / (24 * 3600 * 1000));\n    }\n    /**\n     * Take 2 dates and check if within the same time step (useful in overlapping events).\n     *\n     * @return {Boolean} `true` if their time is included in the same time step,\n     *                   this means these 2 dates are very close.\n     */\n\n  }, {\n    key: \"datesInSameTimeStep\",\n    value: function datesInSameTimeStep(date1, date2, timeStep) {\n      return Math.abs(date1.getTime() - date2.getTime()) <= timeStep * 60 * 1000;\n    } // ====================================================================\n    // FORMATTERS.\n    // ====================================================================\n\n    /**\n     * Formats a date/time to the given format and returns the formatted string.\n     *\n     * @param {Date} date a JavaScript Date object to format.\n     * @param {String} format the wanted format.\n     * @param {Object} texts Optional: the localized texts object to override the vue-cal one in this._texts.\n     *                       This becomes useful when showing multiple instances with different languages,\n     *                       like in the documentation page.\n     * @return {String} the formatted date.\n     */\n\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(date) {\n      var _this = this;\n\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';\n      var texts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (!texts) texts = this._texts;\n      if (!format) format = 'YYYY-MM-DD'; // Allows passing null for default format.\n\n      if (format === 'YYYY-MM-DD') return this.formatDateLite(date); // Reinit the date and time object on each function call.\n\n      _dateObject = {};\n      _timeObject = {}; // Each keyword is a function to load the dateObject or timeObject on demand: no wasted resource.\n\n      var dateObj = {\n        YYYY: function YYYY() {\n          return _this._hydrateDateObject(date, texts).YYYY;\n        },\n        YY: function YY() {\n          return _this._hydrateDateObject(date, texts).YY();\n        },\n        M: function M() {\n          return _this._hydrateDateObject(date, texts).M;\n        },\n        MM: function MM() {\n          return _this._hydrateDateObject(date, texts).MM();\n        },\n        MMM: function MMM() {\n          return _this._hydrateDateObject(date, texts).MMM();\n        },\n        MMMM: function MMMM() {\n          return _this._hydrateDateObject(date, texts).MMMM();\n        },\n        MMMMG: function MMMMG() {\n          return _this._hydrateDateObject(date, texts).MMMMG();\n        },\n        D: function D() {\n          return _this._hydrateDateObject(date, texts).D;\n        },\n        DD: function DD() {\n          return _this._hydrateDateObject(date, texts).DD();\n        },\n        S: function S() {\n          return _this._hydrateDateObject(date, texts).S();\n        },\n        d: function d() {\n          return _this._hydrateDateObject(date, texts).d;\n        },\n        dd: function dd() {\n          return _this._hydrateDateObject(date, texts).dd();\n        },\n        ddd: function ddd() {\n          return _this._hydrateDateObject(date, texts).ddd();\n        },\n        dddd: function dddd() {\n          return _this._hydrateDateObject(date, texts).dddd();\n        },\n        HH: function HH() {\n          return _this._hydrateTimeObject(date, texts).HH;\n        },\n        H: function H() {\n          return _this._hydrateTimeObject(date, texts).H;\n        },\n        hh: function hh() {\n          return _this._hydrateTimeObject(date, texts).hh;\n        },\n        h: function h() {\n          return _this._hydrateTimeObject(date, texts).h;\n        },\n        am: function am() {\n          return _this._hydrateTimeObject(date, texts).am;\n        },\n        AM: function AM() {\n          return _this._hydrateTimeObject(date, texts).AM;\n        },\n        mm: function mm() {\n          return _this._hydrateTimeObject(date, texts).mm;\n        },\n        m: function m() {\n          return _this._hydrateTimeObject(date, texts).m;\n        }\n      };\n      return format.replace(/(\\{[a-zA-Z]+\\}|[a-zA-Z]+)/g, function (m, contents) {\n        var result = dateObj[contents.replace(/\\{|\\}/g, '')];\n        return result !== undefined ? result() : contents;\n      });\n    } // More performant function to convert a Date to `YYYY-MM-DD` formatted string only.\n\n  }, {\n    key: \"formatDateLite\",\n    value: function formatDateLite(date) {\n      var m = date.getMonth() + 1;\n      var d = date.getDate();\n      return \"\".concat(date.getFullYear(), \"-\").concat(m < 10 ? '0' : '').concat(m, \"-\").concat(d < 10 ? '0' : '').concat(d);\n    }\n    /**\n     * Formats a time (from Date or number of mins) to the given format and returns the formatted string.\n     *\n     * @param {Date | Number} date a JavaScript Date object or a time in minutes.\n     * @param {String} format the wanted format.\n     * @param {Object} texts Optional: the localized texts object to override the vue-cal one in this._texts.\n     *                       This becomes useful when showing multiple instances with different languages,\n     *                       like in the documentation page.\n     * @param {Boolean} round if time is 23:59:59, rounds up to 24:00 for formatting only.\n     * @return {String} the formatted time.\n     */\n\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(date) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HH:mm';\n      var texts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var round = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var shouldRound = false;\n\n      if (round) {\n        var _ref = [date.getHours(), date.getMinutes(), date.getSeconds()],\n            h = _ref[0],\n            m = _ref[1],\n            s = _ref[2];\n        if (h + m + s === 23 + 59 + 59) shouldRound = true;\n      }\n\n      if (date instanceof Date && format === 'HH:mm') return shouldRound ? '24:00' : this.formatTimeLite(date);\n      _timeObject = {}; // Reinit the time object on each function call.\n\n      if (!texts) texts = this._texts;\n\n      var timeObj = this._hydrateTimeObject(date, texts);\n\n      var formatted = format.replace(/(\\{[a-zA-Z]+\\}|[a-zA-Z]+)/g, function (m, contents) {\n        var result = timeObj[contents.replace(/\\{|\\}/g, '')];\n        return result !== undefined ? result : contents;\n      }); // Round 23:59:59 to 24:00. For 12-hour format there is nothing to replace: as both are 12am.\n      // Also don't return `24:00` straight away as the user format may be different.\n\n      return shouldRound ? formatted.replace('23:59', '24:00') : formatted;\n    }\n    /**\n     * Formats a time to 'HH:mm' from a Date and returns the formatted string.\n     *\n     * @param {Date} date a JavaScript Date object to format.\n     * @return {String} the formatted time.\n     */\n\n  }, {\n    key: \"formatTimeLite\",\n    value: function formatTimeLite(date) {\n      var h = date.getHours();\n      var m = date.getMinutes();\n      return \"\".concat((h < 10 ? '0' : '') + h, \":\").concat((m < 10 ? '0' : '') + m);\n    }\n  }, {\n    key: \"_nth\",\n    value: function _nth(d) {\n      if (d > 3 && d < 21) return 'th';\n\n      switch (d % 10) {\n        case 1:\n          return 'st';\n\n        case 2:\n          return 'nd';\n\n        case 3:\n          return 'rd';\n\n        default:\n          return 'th';\n      }\n    }\n  }, {\n    key: \"_hydrateDateObject\",\n    value: function _hydrateDateObject(date, texts) {\n      var _this2 = this;\n\n      if (_dateObject.D) return _dateObject;\n      var YYYY = date.getFullYear();\n      var M = date.getMonth() + 1;\n      var D = date.getDate();\n      var day = date.getDay(); // Day of the week.\n\n      var dayNumber = (day - 1 + 7) % 7; // Day of the week. 0 to 6 with 6 = Sunday.\n      // Some of this props are functions, to only calculate on demand.\n\n      _dateObject = {\n        // Year.\n        YYYY: YYYY,\n        // 2019.\n        YY: function YY() {\n          return YYYY.toString().substring(2);\n        },\n        // 19.\n        // Month.\n        M: M,\n        // 1 to 12.\n        MM: function MM() {\n          return (M < 10 ? '0' : '') + M;\n        },\n        // 01 to 12.\n        MMM: function MMM() {\n          return texts.months[M - 1].substring(0, 3);\n        },\n        // Jan to Dec.\n        MMMM: function MMMM() {\n          return texts.months[M - 1];\n        },\n        // January to December.\n        MMMMG: function MMMMG() {\n          return (texts.monthsGenitive || texts.months)[M - 1];\n        },\n        // January to December in genitive form (Greek...)\n        // Day.\n        D: D,\n        // 1 to 31.\n        DD: function DD() {\n          return (D < 10 ? '0' : '') + D;\n        },\n        // 01 to 31.\n        S: function S() {\n          return _this2._nth(D);\n        },\n        // st, nd, rd, th.\n        // Day of the week.\n        d: dayNumber + 1,\n        // 1 to 7 with 7 = Sunday.\n        dd: function dd() {\n          return texts.weekDays[dayNumber][0];\n        },\n        // M to S.\n        ddd: function ddd() {\n          return texts.weekDays[dayNumber].substr(0, 3);\n        },\n        // Mon to Sun.\n        dddd: function dddd() {\n          return texts.weekDays[dayNumber];\n        } // Monday to Sunday.\n\n      };\n      return _dateObject;\n    }\n  }, {\n    key: \"_hydrateTimeObject\",\n    value: function _hydrateTimeObject(date, texts) {\n      if (_timeObject.am) return _timeObject;\n      var H, m;\n\n      if (date instanceof Date) {\n        H = date.getHours();\n        m = date.getMinutes();\n      } else {\n        H = Math.floor(date / 60);\n        m = Math.floor(date % 60);\n      }\n\n      var h = H % 12 ? H % 12 : 12;\n      var am = (texts || {\n        am: 'am',\n        pm: 'pm'\n      })[H === 24 || H < 12 ? 'am' : 'pm'];\n      _timeObject = {\n        H: H,\n        h: h,\n        HH: (H < 10 ? '0' : '') + H,\n        hh: (h < 10 ? '0' : '') + h,\n        am: am,\n        AM: am.toUpperCase(),\n        m: m,\n        mm: (m < 10 ? '0' : '') + m\n      };\n      return _timeObject;\n    } // ====================================================================\n\n  }]);\n\n  return DateUtils;\n}();\n\n\n// CONCATENATED MODULE: ./src/vue-cal/utils/cell.js\n\n\n\n\n/**\n * Cell Utils.\n *\n * Waiting for VS Code to support JavaScript private fields.\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields\n * Meantime keep `_` for private.\n */\nvar minutesInADay = 24 * 60;\n\nvar cell_CellUtils = function CellUtils(vuecal) {\n  var _this = this;\n\n  Object(classCallCheck[\"a\" /* default */])(this, CellUtils);\n\n  Object(defineProperty[\"a\" /* default */])(this, \"_vuecal\", null);\n\n  Object(defineProperty[\"a\" /* default */])(this, \"selectCell\", function () {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var date = arguments.length > 1 ? arguments[1] : undefined;\n    var split = arguments.length > 2 ? arguments[2] : undefined;\n\n    // Cell-click event returns a date and time at cursor position.\n    _this._vuecal.$emit('cell-click', split ? {\n      date: date,\n      split: split\n    } : date); // Switch to narrower view.\n\n\n    if (_this._vuecal.clickToNavigate || force) _this._vuecal.switchToNarrowerView(); // Handle double click manually for touch devices.\n    else if (_this._vuecal.dblclickToNavigate && 'ontouchstart' in window) {\n        _this._vuecal.domEvents.dblTapACell.taps++;\n        setTimeout(function () {\n          return _this._vuecal.domEvents.dblTapACell.taps = 0;\n        }, _this._vuecal.domEvents.dblTapACell.timeout);\n\n        if (_this._vuecal.domEvents.dblTapACell.taps >= 2) {\n          _this._vuecal.domEvents.dblTapACell.taps = 0;\n\n          _this._vuecal.switchToNarrowerView();\n\n          _this._vuecal.$emit('cell-dblclick', split ? {\n            date: date,\n            split: split\n          } : date);\n        }\n      }\n  });\n\n  Object(defineProperty[\"a\" /* default */])(this, \"keyPressEnterCell\", function (date, split) {\n    // Cell-key-press-enter event returns a date and time at cursor position.\n    _this._vuecal.$emit('cell-keypress-enter', split ? {\n      date: date,\n      split: split\n    } : date); // Switch to narrower view.\n\n\n    _this._vuecal.switchToNarrowerView();\n  });\n\n  Object(defineProperty[\"a\" /* default */])(this, \"getPosition\", function (e) {\n    var _this$_vuecal$cellsEl = _this._vuecal.cellsEl.getBoundingClientRect(),\n        left = _this$_vuecal$cellsEl.left,\n        top = _this$_vuecal$cellsEl.top;\n\n    var _ref = 'ontouchstart' in window && e.touches ? e.touches[0] : e,\n        clientX = _ref.clientX,\n        clientY = _ref.clientY;\n\n    return {\n      x: clientX - left,\n      y: clientY - top\n    };\n  });\n\n  Object(defineProperty[\"a\" /* default */])(this, \"minutesAtCursor\", function (e) {\n    var minutes = 0;\n    var cursorCoords = {\n      x: 0,\n      y: 0\n    };\n    var _this$_vuecal$$props = _this._vuecal.$props,\n        timeStep = _this$_vuecal$$props.timeStep,\n        timeCellHeight = _this$_vuecal$$props.timeCellHeight,\n        timeFrom = _this$_vuecal$$props.timeFrom;\n    if (typeof e === 'number') minutes = e;else if (_typeof(e) === 'object') {\n      cursorCoords = _this.getPosition(e);\n      minutes = Math.round(cursorCoords.y * timeStep / parseInt(timeCellHeight) + timeFrom);\n    }\n    return {\n      minutes: Math.max(Math.min(minutes, minutesInADay), 0),\n      cursorCoords: cursorCoords\n    };\n  });\n\n  this._vuecal = vuecal;\n}\n/**\n * Select a cell and go to narrower view on double click or single click according to vuecalProps option.\n *\n * @param {Boolean} force Force switching to narrower view.\n * @param {Date} date The selected cell date at the exact time where it was clicked (through cursor coords).\n * @param {Integer} split The selected cell split if any.\n */\n;\n\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js\nvar es_array_find_index = __nested_webpack_require_199304__(\"c740\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js\nvar es_array_splice = __nested_webpack_require_199304__(\"a434\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.set.js\nvar es_set = __nested_webpack_require_199304__(\"6062\");\n\n// CONCATENATED MODULE: ./src/vue-cal/utils/event.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Events Utils.\n *\n * Waiting for VS Code to support JavaScript private fields.\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields\n * Meantime keep `_` for private.\n */\nvar defaultEventDuration = 2; // In hours.\n\nvar event_minutesInADay = 24 * 60; // Don't do the maths every time.\n\nvar event_ud; // Event overlaps: only for the current view, recreated on view change.\n\nvar _cellOverlaps, _comparisonArray; // This is an approximation, it will not work with DLS time.\n// const approxDayMilliseconds = minutesInADay * 60 * 1000\n// This is an approximate minimum we can get in a year. Purposely stay bellow 365 but close.\n// const minYearMilliseconds = 364 * approxDayMilliseconds // Don't do the maths every time.\n\n\nvar event_EventUtils = /*#__PURE__*/function () {\n  function EventUtils(vuecal, dateUtils) {\n    Object(classCallCheck[\"a\" /* default */])(this, EventUtils);\n\n    Object(defineProperty[\"a\" /* default */])(this, \"_vuecal\", null);\n\n    Object(defineProperty[\"a\" /* default */])(this, \"eventDefaults\", {\n      _eid: null,\n      start: '',\n      // Externally given formatted date & time or Date object.\n      startTimeMinutes: 0,\n      end: '',\n      // Externally given formatted date & time or Date object.\n      endTimeMinutes: 0,\n      title: '',\n      content: '',\n      background: false,\n      allDay: false,\n      segments: null,\n      repeat: null,\n      daysCount: 1,\n      deletable: true,\n      deleting: false,\n      titleEditable: true,\n      resizable: true,\n      resizing: false,\n      draggable: true,\n      dragging: false,\n      draggingStatic: false,\n      // Controls the CSS class of the static clone while dragging.\n      focused: false,\n      class: ''\n    });\n\n    this._vuecal = vuecal;\n    event_ud = dateUtils;\n  }\n  /**\n   * Create an event at the given date and time, and allow overriding\n   * event attributes through the eventOptions object.\n   *\n   * @param {Date | String} dateTime The date and time of the new event start.\n   * @param {Number} duration the event duration in minutes.\n   * @param {Object} eventOptions some options to override the `eventDefaults` - optional.\n   */\n\n\n  Object(createClass[\"a\" /* default */])(EventUtils, [{\n    key: \"createAnEvent\",\n    value: function createAnEvent(dateTime, duration, eventOptions) {\n      var _this = this;\n\n      if (typeof dateTime === 'string') dateTime = event_ud.stringToDate(dateTime);\n      if (!(dateTime instanceof Date)) return false;\n      var startTimeMinutes = event_ud.dateToMinutes(dateTime);\n      duration = duration * 1 || defaultEventDuration * 60;\n      var endTimeMinutes = startTimeMinutes + duration;\n      var end = event_ud.addMinutes(new Date(dateTime), duration); // Automatically add the required endTimeMinutes when passing an end.\n\n      if (eventOptions.end) {\n        if (typeof eventOptions.end === 'string') eventOptions.end = event_ud.stringToDate(eventOptions.end);\n        eventOptions.endTimeMinutes = event_ud.dateToMinutes(eventOptions.end);\n      }\n\n      var event = Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, this.eventDefaults), {}, {\n        _eid: \"\".concat(this._vuecal._.uid, \"_\").concat(this._vuecal.eventIdIncrement++),\n        start: dateTime,\n        startTimeMinutes: startTimeMinutes,\n        end: end,\n        endTimeMinutes: endTimeMinutes,\n        segments: null\n      }, eventOptions); // If the onEventCreate() function is given as a parameter to vue-cal:\n      // 1. give it access to the created event & the deleteAnEvent() function.\n      // 2. Prevent creation of the event if this function returns false.\n\n\n      if (typeof this._vuecal.onEventCreate === 'function') {\n        if (!this._vuecal.onEventCreate(event, function () {\n          return _this.deleteAnEvent(event);\n        })) return;\n      } // Check if event is a multiple day event and update days count.\n\n\n      if (event.startDateF !== event.endDateF) {\n        event.daysCount = event_ud.countDays(event.start, event.end);\n      } // Add event to the mutableEvents array.\n\n\n      this._vuecal.mutableEvents.push(event); // Add the new event to the current view.\n      // The event may have been edited on the fly to become a multiple-day event,\n      // the method addEventsToView makes sure the segments are created.\n\n\n      this._vuecal.addEventsToView([event]);\n\n      this._vuecal.emitWithEvent('event-create', event);\n\n      this._vuecal.$emit('event-change', {\n        event: this._vuecal.cleanupEvent(event),\n        originalEvent: null\n      });\n\n      return event;\n    }\n    /**\n     * Add an event segment (= day) to a multiple-day event.\n     *\n     * @param {Object} e the multiple-day event to add segment in.\n     */\n\n  }, {\n    key: \"addEventSegment\",\n    value: function addEventSegment(e) {\n      // If event was previously single-day, event.segments = null,\n      // so first create the first segment (first day).\n      if (!e.segments) {\n        e.segments = {};\n        e.segments[event_ud.formatDateLite(e.start)] = {\n          start: e.start,\n          startTimeMinutes: e.startTimeMinutes,\n          endTimeMinutes: event_minutesInADay,\n          isFirstDay: true,\n          isLastDay: false\n        };\n      } // Modify the last segment - which will not stay the last one after this function.\n\n\n      var previousSegment = e.segments[event_ud.formatDateLite(e.end)]; // previousSegment might not exist when dragging too fast, prevent errors.\n\n      if (previousSegment) {\n        previousSegment.isLastDay = false;\n        previousSegment.endTimeMinutes = event_minutesInADay;\n      } else {// @todo: when moving fast might lose the previousSegment.\n        // Trying to update it would then result in an error, but do nothing would create a visual bug.\n      } // Create the new last segment.\n\n\n      var start = event_ud.addDays(e.end, 1);\n      var formattedDate = event_ud.formatDateLite(start);\n      start.setHours(0, 0, 0, 0);\n      e.segments[formattedDate] = {\n        start: start,\n        startTimeMinutes: 0,\n        endTimeMinutes: e.endTimeMinutes,\n        isFirstDay: false,\n        isLastDay: true\n      };\n      e.end = event_ud.addMinutes(start, e.endTimeMinutes);\n      e.daysCount = Object.keys(e.segments).length;\n      return formattedDate;\n    }\n    /**\n     * Remove an event segment (= day) from a multiple-day event.\n     *\n     * @param {Object} e the multiple-day event to remove segments from.\n     */\n\n  }, {\n    key: \"removeEventSegment\",\n    value: function removeEventSegment(e) {\n      var segmentsCount = Object.keys(e.segments).length;\n      if (segmentsCount <= 1) return event_ud.formatDateLite(e.end); // Remove the last segment.\n\n      delete e.segments[event_ud.formatDateLite(e.end)];\n      segmentsCount--;\n      var end = event_ud.subtractDays(e.end, 1);\n      var formattedDate = event_ud.formatDateLite(end);\n      var previousSegment = e.segments[formattedDate]; // If no more segments, reset the segments attribute to null.\n\n      if (!segmentsCount) e.segments = null; // previousSegment might not exist when dragging too fast, prevent errors.\n      else if (previousSegment) {\n          // Modify the new last segment.\n          previousSegment.isLastDay = true;\n          previousSegment.endTimeMinutes = e.endTimeMinutes;\n        } else {// @todo: when moving fast might lose the previousSegment.\n          // Trying to update it would then result in an error, but do nothing would create a visual bug.\n        }\n      e.daysCount = segmentsCount || 1;\n      e.end = end;\n      return formattedDate;\n    }\n    /**\n     * Create 1 segment per day of the given event, but only within the current view.\n     * (It won't create segments for all the days in view that are not in the event!)\n     *\n     * An event segment is a piece of event per day that contains more day-specific data.\n     *\n     * @param {Object} e the multiple-day event to create segments for.\n     * @param {Date} viewStartDate the starting date of the view.\n     * @param {Date} viewEndDate the ending date of the view.\n     */\n\n  }, {\n    key: \"createEventSegments\",\n    value: function createEventSegments(e, viewStartDate, viewEndDate) {\n      var viewStartTimestamp = viewStartDate.getTime();\n      var viewEndTimestamp = viewEndDate.getTime();\n      var eventStart = e.start.getTime();\n      var eventEnd = e.end.getTime();\n      var repeatedEventStartFound = false;\n      var timestamp, end, eventStartAtMidnight; // @todo: I don't think we still need that:\n      // Removing 1 sec when ending at 00:00, so that we don't create a segment for nothing on last day.\n\n      if (!e.end.getHours() && !e.end.getMinutes()) eventEnd -= 1000;\n      e.segments = {}; // The goal is to create 1 segment per day in the event, but only within the current view.\n\n      if (!e.repeat) {\n        // Simple case first.\n        timestamp = Math.max(viewStartTimestamp, eventStart);\n        end = Math.min(viewEndTimestamp, eventEnd);\n      } else {\n        // Start at the beginning of the range, and end at soonest between `repeat.until` if any or range end.\n        // This range will most likely be too large (e.g. whole week) and we need to narrow it\n        // down in the while loop bellow.\n        // We must not create unused segments, it would break the render or result in weird behaviors.\n        timestamp = viewStartTimestamp;\n        end = Math.min(viewEndTimestamp, e.repeat.until ? event_ud.stringToDate(e.repeat.until).getTime() : viewEndTimestamp);\n      }\n\n      while (timestamp <= end) {\n        var createSegment = false; // Be careful not to simply add 24 hours!\n        // In case of DLS, that would cause the event to never end and browser to hang.\n        // So use `addDays(1)` instead.\n\n        var nextMidnight = event_ud.addDays(new Date(timestamp), 1).setHours(0, 0, 0, 0);\n        var isFirstDay = void 0,\n            isLastDay = void 0,\n            start = void 0,\n            formattedDate = void 0;\n\n        if (e.repeat) {\n          var tmpDate = new Date(timestamp);\n          var tmpDateFormatted = event_ud.formatDateLite(tmpDate); // If the current day in loop is a known date of the repeated event (in `e.occurrences`),\n          // then we found the first day of the event repetition, now update the `eventStart` and\n          // the end of the loop at current day + event days count.\n\n          if (repeatedEventStartFound || e.occurrences && e.occurrences[tmpDateFormatted]) {\n            if (!repeatedEventStartFound) {\n              eventStart = e.occurrences[tmpDateFormatted].start;\n              eventStartAtMidnight = new Date(eventStart).setHours(0, 0, 0, 0);\n              eventEnd = e.occurrences[tmpDateFormatted].end;\n            }\n\n            repeatedEventStartFound = true;\n            createSegment = true;\n          }\n\n          isFirstDay = timestamp === eventStartAtMidnight;\n          isLastDay = tmpDateFormatted === event_ud.formatDateLite(new Date(eventEnd));\n          start = new Date(isFirstDay ? eventStart : timestamp);\n          formattedDate = event_ud.formatDateLite(start); // We want to find any potential other repetition of event in same range.\n\n          if (isLastDay) repeatedEventStartFound = false;\n        } else {\n          createSegment = true;\n          isFirstDay = timestamp === eventStart;\n          isLastDay = end === eventEnd && nextMidnight > end;\n          start = isFirstDay ? e.start : new Date(timestamp);\n          formattedDate = event_ud.formatDateLite(isFirstDay ? e.start : start);\n        }\n\n        if (createSegment) {\n          e.segments[formattedDate] = {\n            start: start,\n            startTimeMinutes: isFirstDay ? e.startTimeMinutes : 0,\n            endTimeMinutes: isLastDay ? e.endTimeMinutes : event_minutesInADay,\n            isFirstDay: isFirstDay,\n            isLastDay: isLastDay\n          };\n        }\n\n        timestamp = nextMidnight;\n      }\n\n      return e;\n    }\n    /**\n     * Delete an event.\n     *\n     * @param {Object} event the calendar event to delete.\n     */\n\n  }, {\n    key: \"deleteAnEvent\",\n    value: function deleteAnEvent(event) {\n      this._vuecal.emitWithEvent('event-delete', event); // Delete the event globally.\n\n\n      this._vuecal.mutableEvents = this._vuecal.mutableEvents.filter(function (e) {\n        return e._eid !== event._eid;\n      }); // Delete the event from the current view.\n      // checkCellOverlappingEvents() will be re-run automatically from the cell computed events.\n\n      this._vuecal.view.events = this._vuecal.view.events.filter(function (e) {\n        return e._eid !== event._eid;\n      });\n    } // EVENT OVERLAPS.\n    // ===================================================================\n    // Will recalculate all the overlaps of the current cell OR split.\n    // cellEvents will contain only the current split events if in a split.\n\n  }, {\n    key: \"checkCellOverlappingEvents\",\n    value: function checkCellOverlappingEvents(cellEvents, options) {\n      var _this2 = this;\n\n      _comparisonArray = cellEvents.slice(0);\n      _cellOverlaps = {}; // Can't filter background events before calling this function otherwise\n      // when an event is changed to background it would not update its previous overlaps.\n\n      cellEvents.forEach(function (e) {\n        // For performance, never compare the current event in the next loops.\n        // The array is smaller and smaller as we loop.\n        _comparisonArray.shift();\n\n        if (!_cellOverlaps[e._eid]) _cellOverlaps[e._eid] = {\n          overlaps: [],\n          start: e.start,\n          position: 0\n        };\n        _cellOverlaps[e._eid].position = 0;\n\n        _comparisonArray.forEach(function (e2) {\n          if (!_cellOverlaps[e2._eid]) _cellOverlaps[e2._eid] = {\n            overlaps: [],\n            start: e2.start,\n            position: 0\n          };\n\n          var eventIsInRange = _this2.eventInRange(e2, e.start, e.end);\n\n          var eventsInSameTimeStep = options.overlapsPerTimeStep ? event_ud.datesInSameTimeStep(e.start, e2.start, options.timeStep) : 1; // Add to the overlaps array if overlapping.\n\n          if (!e.background && !e.allDay && !e2.background && !e2.allDay && eventIsInRange && eventsInSameTimeStep) {\n            _cellOverlaps[e._eid].overlaps.push(e2._eid);\n\n            _cellOverlaps[e._eid].overlaps = _toConsumableArray(new Set(_cellOverlaps[e._eid].overlaps)); // Dedupe, most performant way.\n\n            _cellOverlaps[e2._eid].overlaps.push(e._eid);\n\n            _cellOverlaps[e2._eid].overlaps = _toConsumableArray(new Set(_cellOverlaps[e2._eid].overlaps)); // Dedupe, most performant way.\n\n            _cellOverlaps[e2._eid].position++;\n          } // Remove from the overlaps array if not overlapping or if 1 of the 2 events is background or all-day long.\n          else {\n              var pos1, pos2;\n              if ((pos1 = (_cellOverlaps[e._eid] || {\n                overlaps: []\n              }).overlaps.indexOf(e2._eid)) > -1) _cellOverlaps[e._eid].overlaps.splice(pos1, 1);\n              if ((pos2 = (_cellOverlaps[e2._eid] || {\n                overlaps: []\n              }).overlaps.indexOf(e._eid)) > -1) _cellOverlaps[e2._eid].overlaps.splice(pos2, 1);\n              _cellOverlaps[e2._eid].position--;\n            }\n        });\n      }); // Overlaps streak is the longest horizontal set of simultaneous events.\n      // This is determining the width of events in a streak.\n      // e.g. 3 overlapping events in a cell:\n      //  ___   ___\n      // | 1 | |_2_|  1 overlaps 2 & 3; 2 & 3 don't overlap;\n      // |   |  ___   => streak = 2; each width = 50% not 33%.\n      // |___| |_3_|\n\n      var longestStreak = 0;\n\n      var _loop = function _loop(id) {\n        var item = _cellOverlaps[id]; // Calculate the position of each event in current streak (determines the CSS left property).\n\n        var overlapsRow = item.overlaps.map(function (id2) {\n          return {\n            id: id2,\n            start: _cellOverlaps[id2].start\n          };\n        });\n        overlapsRow.push({\n          id: id,\n          start: item.start\n        });\n        overlapsRow.sort(function (a, b) {\n          return a.start < b.start ? -1 : a.start > b.start ? 1 : a.id > b.id ? -1 : 1;\n        });\n        item.position = overlapsRow.findIndex(function (e) {\n          return e.id === id;\n        });\n        longestStreak = Math.max(_this2.getOverlapsStreak(item, _cellOverlaps), longestStreak);\n      };\n\n      for (var id in _cellOverlaps) {\n        _loop(id);\n      }\n\n      return [_cellOverlaps, longestStreak];\n    }\n    /**\n     * Overlaps streak is the longest horizontal set of simultaneous events.\n     * This is determining the width of each events in this streak.\n     * E.g. 3 overlapping events [1, 2, 3]; 1 overlaps 2 & 3; 2 & 3 don't overlap;\n     *      => streak = 2; each width = 50% not 33%.\n     *\n     * @param {Object} event The current event we are checking among all the events of the current cell.\n     * @param {Object} cellOverlaps An indexed array of all the events overlaps for the current cell.\n     * @return {Number} The number of simultaneous event for this event.\n     */\n\n  }, {\n    key: \"getOverlapsStreak\",\n    value: function getOverlapsStreak(event) {\n      var cellOverlaps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var streak = event.overlaps.length + 1;\n      var removeFromStreak = [];\n      event.overlaps.forEach(function (id) {\n        if (!removeFromStreak.includes(id)) {\n          var overlapsWithoutSelf = event.overlaps.filter(function (id2) {\n            return id2 !== id;\n          });\n          overlapsWithoutSelf.forEach(function (id3) {\n            if (!cellOverlaps[id3].overlaps.includes(id)) removeFromStreak.push(id3);\n          });\n        }\n      });\n      removeFromStreak = _toConsumableArray(new Set(removeFromStreak)); // Dedupe, most performant way.\n\n      streak -= removeFromStreak.length;\n      return streak;\n    }\n    /**\n     * Tells whether an event is in a given date range, even partially.\n     *\n     * @param {Object} event The event to test.\n     * @param {Date} start The start of range date object.\n     * @param {Date} end The end of range date object.\n     * @return {Boolean} true if in range, even partially.\n     */\n\n  }, {\n    key: \"eventInRange\",\n    value: function eventInRange(event, start, end) {\n      // Check if all-day or timeless event (if date but no time there won't be a `:` in event.start).\n      if (event.allDay || !this._vuecal.time) {\n        // Get the date and discard the time if any, then check it's within the date range.\n        var _startTimestamp = new Date(event.start).setHours(0, 0, 0, 0);\n\n        var _endTimestamp = new Date(event.end).setHours(23, 59, 0, 0);\n\n        return _endTimestamp >= new Date(start).setHours(0, 0, 0, 0) && _startTimestamp <= new Date(end).setHours(0, 0, 0, 0);\n      }\n\n      var startTimestamp = event.start.getTime();\n      var endTimestamp = event.end.getTime();\n      return startTimestamp < end.getTime() && endTimestamp > start.getTime();\n    }\n  }]);\n\n  return EventUtils;\n}();\n\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/header.vue?vue&type=template&id=d2bb7926&lang=pug\n\n\n\n\n\n\nvar headervue_type_template_id_d2bb7926_lang_pug_hoisted_1 = {\n  class: \"vuecal__header\"\n};\nvar headervue_type_template_id_d2bb7926_lang_pug_hoisted_2 = {\n  key: 0,\n  class: \"vuecal__flex vuecal__menu\",\n  role: \"tablist\",\n  \"aria-label\": \"Calendar views navigation\"\n};\nvar headervue_type_template_id_d2bb7926_lang_pug_hoisted_3 = {\n  key: 1,\n  class: \"vuecal__title-bar\"\n};\nvar headervue_type_template_id_d2bb7926_lang_pug_hoisted_4 = {\n  class: \"vuecal__flex vuecal__title\",\n  grow: \"\"\n};\nvar headervue_type_template_id_d2bb7926_lang_pug_hoisted_5 = {\n  key: 0,\n  class: \"vuecal__flex vuecal__split-days-headers\"\n};\nfunction headervue_type_template_id_d2bb7926_lang_pug_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_weekdays_headings = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"weekdays-headings\");\n\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", headervue_type_template_id_d2bb7926_lang_pug_hoisted_1, [!$props.options.hideViewSelector ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", headervue_type_template_id_d2bb7926_lang_pug_hoisted_2, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($props.viewProps.views, function (v, id) {\n    return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], {\n      key: id\n    }, [v.enabled ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"button\", {\n      key: 0,\n      class: [\"vuecal__view-btn\", {\n        'vuecal__view-btn--active': $options.view.id === id,\n        'vuecal__view-btn--highlighted': _ctx.highlightedControl === id\n      }],\n      type: \"button\",\n      onDragenter: function onDragenter($event) {\n        return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragEnter($event, id, _ctx.$data);\n      },\n      onDragleave: function onDragleave($event) {\n        return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragLeave($event, id, _ctx.$data);\n      },\n      onClick: function onClick($event) {\n        return $options.switchView(id, null, true);\n      },\n      \"aria-label\": \"\".concat(v.label, \" view\")\n    }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(v.label), 43, [\"onDragenter\", \"onDragleave\", \"onClick\", \"aria-label\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)], 64\n    /* STABLE_FRAGMENT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), !$props.options.hideTitleBar ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", headervue_type_template_id_d2bb7926_lang_pug_hoisted_3, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"button\", {\n    class: [\"vuecal__arrow vuecal__arrow--prev\", {\n      'vuecal__arrow--highlighted': _ctx.highlightedControl === 'previous'\n    }],\n    type: \"button\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.previous.apply($options, arguments);\n    }),\n    onDragenter: _cache[2] || (_cache[2] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragEnter($event, 'previous', _ctx.$data);\n    }),\n    onDragleave: _cache[3] || (_cache[3] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragLeave($event, 'previous', _ctx.$data);\n    }),\n    \"aria-label\": \"Previous \".concat($options.view.id)\n  }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"arrow-prev\")], 42, [\"aria-label\"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", headervue_type_template_id_d2bb7926_lang_pug_hoisted_4, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Transition\"], {\n    name: $props.options.transitions ? \"slide-fade--\".concat($options.transitionDirection) : ''\n  }, {\n    default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveDynamicComponent\"])($options.broaderView ? 'button' : 'span'), {\n        type: !!$options.broaderView && 'button',\n        key: \"\".concat($options.view.id).concat($options.view.startDate.toString()),\n        onClick: _cache[4] || (_cache[4] = function ($event) {\n          return !!$options.broaderView && $options.switchToBroaderView();\n        }),\n        \"aria-label\": !!$options.broaderView && \"Go to \".concat($options.broaderView, \" view\")\n      }, {\n        default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"title\")];\n        }),\n        _: 3\n      }, 8, [\"type\", \"aria-label\"]))];\n    }),\n    _: 1\n  }, 8, [\"name\"])]), $props.options.todayButton ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"button\", {\n    key: 0,\n    class: [\"vuecal__today-btn\", {\n      'vuecal__today-btn--highlighted': _ctx.highlightedControl === 'today'\n    }],\n    type: \"button\",\n    onClick: _cache[5] || (_cache[5] = function () {\n      return $options.goToToday.apply($options, arguments);\n    }),\n    onDragenter: _cache[6] || (_cache[6] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragEnter($event, 'today', _ctx.$data);\n    }),\n    onDragleave: _cache[7] || (_cache[7] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragLeave($event, 'today', _ctx.$data);\n    }),\n    \"aria-label\": \"Today\"\n  }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"today-button\")], 34)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"button\", {\n    class: [\"vuecal__arrow vuecal__arrow--next\", {\n      'vuecal__arrow--highlighted': _ctx.highlightedControl === 'next'\n    }],\n    type: \"button\",\n    onClick: _cache[8] || (_cache[8] = function () {\n      return $options.next.apply($options, arguments);\n    }),\n    onDragenter: _cache[9] || (_cache[9] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragEnter($event, 'next', _ctx.$data);\n    }),\n    onDragleave: _cache[10] || (_cache[10] = function ($event) {\n      return $props.editEvents.drag && $options.dnd && $options.dnd.viewSelectorDragLeave($event, 'next', _ctx.$data);\n    }),\n    \"aria-label\": \"Next \".concat($options.view.id)\n  }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"arrow-next\")], 42, [\"aria-label\"])])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), $props.viewProps.weekDaysInHeader ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_weekdays_headings, {\n    key: 2,\n    \"week-days\": $props.weekDays,\n    \"transition-direction\": $options.transitionDirection,\n    \"switch-to-narrower-view\": $props.switchToNarrowerView\n  }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createSlots\"])({\n    _: 2\n  }, [_ctx.$slots['weekday-heading'] ? {\n    name: \"weekday-heading\",\n    fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref) {\n      var heading = _ref.heading,\n          view = _ref.view;\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"weekday-heading\", {\n        heading: heading,\n        view: view\n      })];\n    })\n  } : undefined, _ctx.$slots['split-label'] ? {\n    name: \"split-label\",\n    fn: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref2) {\n      var split = _ref2.split;\n      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n        split: split,\n        view: $options.view\n      })];\n    })\n  } : undefined]), 1032, [\"week-days\", \"transition-direction\", \"switch-to-narrower-view\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Transition\"], {\n    name: \"slide-fade--\".concat($options.transitionDirection)\n  }, {\n    default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [$options.showDaySplits ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", headervue_type_template_id_d2bb7926_lang_pug_hoisted_5, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($props.daySplits, function (split, i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n          class: [\"day-split-header\", split.class || false],\n          key: i\n        }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n          split: split,\n          view: $options.view.id\n        }, function () {\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(split.label), 1\n          /* TEXT */\n          )];\n        })], 2);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"name\"])]);\n}\n// CONCATENATED MODULE: ./src/vue-cal/header.vue?vue&type=template&id=d2bb7926&lang=pug\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/weekdays-headings.vue?vue&type=template&id=f3db6496&lang=pug\n\n\n\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_1 = {\n  class: \"vuecal__flex vuecal__weekdays-headings\"\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_2 = {\n  class: \"vuecal__flex weekday-label\",\n  grow: \"\"\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_3 = {\n  class: \"full\"\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_4 = {\n  class: \"small\"\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_5 = {\n  class: \"xsmall\"\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_6 = {\n  key: 0\n};\nvar weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_7 = {\n  key: 0,\n  class: \"vuecal__flex vuecal__split-days-headers\",\n  grow: \"\"\n};\nfunction weekdays_headingsvue_type_template_id_f3db6496_lang_pug_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_1, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.headings, function (heading, i) {\n    return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], {\n      key: i\n    }, [!heading.hide ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n      key: 0,\n      class: [\"vuecal__flex vuecal__heading\", {\n        today: heading.today,\n        clickable: $options.cellHeadingsClickable\n      }],\n      style: $options.weekdayCellStyles,\n      onClick: function onClick($event) {\n        return $options.view.id === 'week' && $options.selectCell(heading.date, $event);\n      },\n      onDblclick: _cache[1] || (_cache[1] = function ($event) {\n        return $options.view.id === 'week' && $options.vuecal.dblclickToNavigate && $props.switchToNarrowerView();\n      })\n    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Transition\"], {\n      name: \"slide-fade--\".concat($props.transitionDirection),\n      appear: $options.vuecal.transitions\n    }, {\n      default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n        return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n          class: \"vuecal__flex\",\n          column: \"\",\n          key: $options.vuecal.transitions ? \"\".concat(i, \"-\").concat(heading.dayOfMonth) : false\n        }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_2, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"weekday-heading\", {\n          heading: $options.cleanupHeading(heading),\n          view: $options.view\n        }, function () {\n          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_3, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(heading.full), 1), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_4, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(heading.small), 1), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_5, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(heading.xsmall), 1), heading.dayOfMonth ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"span\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_6, \" \" + Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(heading.dayOfMonth), 1)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n        })]), $options.vuecal.hasSplits && $options.vuecal.stickySplitLabels ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", weekdays_headingsvue_type_template_id_f3db6496_lang_pug_hoisted_7, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.vuecal.daySplits, function (split, i) {\n          return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n            class: [\"day-split-header\", split.class || false],\n            key: i\n          }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"split-label\", {\n            split: split,\n            view: $options.view\n          }, function () {\n            return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createTextVNode\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])(split.label), 1\n            /* TEXT */\n            )];\n          })], 2);\n        }), 128\n        /* KEYED_FRAGMENT */\n        ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)]))];\n      }),\n      _: 2\n    }, 1032, [\"name\", \"appear\"])], 46, [\"onClick\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)], 64\n    /* STABLE_FRAGMENT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}\n// CONCATENATED MODULE: ./src/vue-cal/weekdays-headings.vue?vue&type=template&id=f3db6496&lang=pug\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/weekdays-headings.vue?vue&type=script&lang=js\n\n\n\n\n/* harmony default export */ var weekdays_headingsvue_type_script_lang_js = ({\n  inject: ['vuecal', 'utils', 'view'],\n  props: {\n    transitionDirection: {\n      type: String,\n      default: 'right'\n    },\n    weekDays: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    switchToNarrowerView: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  methods: {\n    selectCell: function selectCell(date, DOMEvent) {\n      if (date.getTime() !== this.view.selectedDate.getTime()) {\n        this.view.selectedDate = date;\n      }\n\n      this.utils.cell.selectCell(false, date, DOMEvent);\n    },\n    cleanupHeading: function cleanupHeading(heading) {\n      return Object(objectSpread2[\"a\" /* default */])({\n        label: heading.full,\n        date: heading.date\n      }, heading.today ? {\n        today: heading.today\n      } : {});\n    }\n  },\n  computed: {\n    headings: function headings() {\n      var _this = this;\n\n      if (!['month', 'week'].includes(this.view.id)) return [];\n      var todayFound = false;\n      var headings = this.weekDays.map(function (cell, i) {\n        var date = _this.utils.date.addDays(_this.view.startDate, i);\n\n        return Object(objectSpread2[\"a\" /* default */])({\n          hide: cell.hide,\n          full: cell.label,\n          // If defined in i18n file, weekDaysShort overrides default truncation of\n          // week days when does not fit on screen or with small/xsmall options.\n          small: cell.short || cell.label.substr(0, 3),\n          xsmall: cell.short || cell.label.substr(0, 1)\n        }, _this.view.id === 'week' ? {\n          dayOfMonth: date.getDate(),\n          date: date,\n          today: !todayFound && _this.utils.date.isToday(date) && !todayFound++\n        } : {});\n      });\n      return headings;\n    },\n    cellWidth: function cellWidth() {\n      return 100 / (7 - this.weekDays.reduce(function (total, day) {\n        return total + day.hide;\n      }, 0));\n    },\n    weekdayCellStyles: function weekdayCellStyles() {\n      return Object(objectSpread2[\"a\" /* default */])({}, this.vuecal.hideWeekdays.length ? {\n        width: \"\".concat(this.cellWidth, \"%\")\n      } : {});\n    },\n    cellHeadingsClickable: function cellHeadingsClickable() {\n      return this.view.id === 'week' && (this.vuecal.clickToNavigate || this.vuecal.dblclickToNavigate);\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/weekdays-headings.vue?vue&type=script&lang=js\n \n// EXTERNAL MODULE: ./src/vue-cal/weekdays-headings.vue?vue&type=style&index=0&id=f3db6496&lang=scss\nvar weekdays_headingsvue_type_style_index_0_id_f3db6496_lang_scss = __nested_webpack_require_199304__(\"2f4d\");\n\n// CONCATENATED MODULE: ./src/vue-cal/weekdays-headings.vue\n\n\n\n\n\nweekdays_headingsvue_type_script_lang_js.render = weekdays_headingsvue_type_template_id_f3db6496_lang_pug_render\n\n/* harmony default export */ var weekdays_headings = (weekdays_headingsvue_type_script_lang_js);\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/header.vue?vue&type=script&lang=js\n\n\n\n/* harmony default export */ var headervue_type_script_lang_js = ({\n  inject: ['vuecal', 'previous', 'next', 'switchView', 'updateSelectedDate', 'modules', 'view'],\n  components: {\n    WeekdaysHeadings: weekdays_headings\n  },\n  props: {\n    // Vuecal main component options (props).\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    editEvents: {\n      type: Object,\n      required: true\n    },\n    hasSplits: {\n      type: [Boolean, Number],\n      default: false\n    },\n    daySplits: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    viewProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    weekDays: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    switchToNarrowerView: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      highlightedControl: null\n    };\n  },\n  methods: {\n    goToToday: function goToToday() {\n      // Last midnight.\n      this.updateSelectedDate(new Date(new Date().setHours(0, 0, 0, 0)));\n    },\n    switchToBroaderView: function switchToBroaderView() {\n      this.transitionDirection = 'left';\n      if (this.broaderView) this.switchView(this.broaderView);\n    }\n  },\n  computed: {\n    transitionDirection: {\n      get: function get() {\n        return this.vuecal.transitionDirection;\n      },\n      set: function set(direction) {\n        this.vuecal.transitionDirection = direction;\n      }\n    },\n    broaderView: function broaderView() {\n      var enabledViews = this.vuecal.enabledViews;\n      return enabledViews[enabledViews.indexOf(this.view.id) - 1];\n    },\n    showDaySplits: function showDaySplits() {\n      return this.view.id === 'day' && this.hasSplits && this.options.stickySplitLabels && !this.options.minSplitWidth;\n    },\n    // Drag & drop module.\n    dnd: function dnd() {\n      return this.modules.dnd;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/header.vue?vue&type=script&lang=js\n \n// EXTERNAL MODULE: ./src/vue-cal/header.vue?vue&type=style&index=0&id=d2bb7926&lang=scss\nvar headervue_type_style_index_0_id_d2bb7926_lang_scss = __nested_webpack_require_199304__(\"c8c4\");\n\n// CONCATENATED MODULE: ./src/vue-cal/header.vue\n\n\n\n\n\nheadervue_type_script_lang_js.render = headervue_type_template_id_d2bb7926_lang_pug_render\n\n/* harmony default export */ var header = (headervue_type_script_lang_js);\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/all-day-bar.vue?vue&type=template&id=8ec5ab98&lang=pug\n\nvar all_day_barvue_type_template_id_8ec5ab98_lang_pug_hoisted_1 = {\n  key: 0,\n  class: \"vuecal__all-day-text\",\n  style: {\n    \"width\": \"3em\"\n  }\n};\nfunction all_day_barvue_type_template_id_8ec5ab98_lang_pug_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_vuecal_cell = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"vuecal-cell\");\n\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n    class: \"vuecal__flex vuecal__all-day\",\n    style: $props.cellOrSplitMinWidth && {\n      height: $props.height\n    }\n  }, [!$props.cellOrSplitMinWidth ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", all_day_barvue_type_template_id_8ec5ab98_lang_pug_hoisted_1, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"span\", null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($props.label), 1)])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createVNode\"])(\"div\", {\n    class: [\"vuecal__flex vuecal__cells\", \"\".concat($options.view.id, \"-view\")],\n    grow: \"\",\n    style: $props.cellOrSplitMinWidth ? \"min-width: \".concat($props.cellOrSplitMinWidth, \"px\") : ''\n  }, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($props.cells, function (cell, i) {\n    return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_vuecal_cell, {\n      key: i,\n      options: $props.options,\n      \"edit-events\": $options.editEvents,\n      data: cell,\n      \"all-day\": true,\n      \"cell-width\": $props.options.hideWeekdays.length && ($options.vuecal.isWeekView || $options.vuecal.isMonthView) && $options.vuecal.cellWidth,\n      \"min-timestamp\": $props.options.minTimestamp,\n      \"max-timestamp\": $props.options.maxTimestamp,\n      \"cell-splits\": $props.daySplits\n    }, {\n      event: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref) {\n        var event = _ref.event,\n            view = _ref.view;\n        return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n          view: view,\n          event: event\n        })];\n      }),\n      _: 2\n    }, 1032, [\"options\", \"edit-events\", \"data\", \"cell-width\", \"min-timestamp\", \"max-timestamp\", \"cell-splits\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 6)], 4);\n}\n// CONCATENATED MODULE: ./src/vue-cal/all-day-bar.vue?vue&type=template&id=8ec5ab98&lang=pug\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/cell.vue?vue&type=template&id=16690b7a&lang=pug\n\n\nvar cellvue_type_template_id_16690b7a_lang_pug_hoisted_1 = {\n  key: 1,\n  class: \"vuecal__cell-events\"\n};\nfunction cellvue_type_template_id_16690b7a_lang_pug_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_event = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"resolveComponent\"])(\"event\");\n\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"TransitionGroup\"], {\n    class: [\"vuecal__cell\", $options.cellClasses],\n    name: \"slide-fade--\".concat($options.transitionDirection),\n    tag: \"div\",\n    appear: $props.options.transitions,\n    style: $options.cellStyles\n  }, {\n    default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function () {\n      return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.splitsCount ? $options.splits : 1, function (split, i) {\n        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n          class: [\"vuecal__flex vuecal__cell-content\", $options.splitsCount && $options.splitClasses(split)],\n          key: $props.options.transitions ? \"\".concat($options.view.id, \"-\").concat($props.data.content, \"-\").concat(i) : i,\n          \"data-split\": $options.splitsCount ? split.id : false,\n          column: \"\",\n          tabindex: \"0\",\n          \"aria-label\": $props.data.content,\n          onFocus: _cache[1] || (_cache[1] = function ($event) {\n            return $options.onCellFocus($event);\n          }),\n          onKeypress: _cache[2] || (_cache[2] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withKeys\"])(function ($event) {\n            return $options.onCellkeyPressEnter($event);\n          }, [\"enter\"])),\n          onTouchstart: function onTouchstart($event) {\n            return !$options.isDisabled && $options.onCellTouchStart($event, $options.splitsCount ? split.id : null);\n          },\n          onMousedown: function onMousedown($event) {\n            return !$options.isDisabled && $options.onCellMouseDown($event, $options.splitsCount ? split.id : null);\n          },\n          onClick: _cache[3] || (_cache[3] = function ($event) {\n            return !$options.isDisabled && $options.onCellClick($event);\n          }),\n          onDblclick: _cache[4] || (_cache[4] = function ($event) {\n            return !$options.isDisabled && $options.onCellDblClick($event);\n          }),\n          onContextmenu: _cache[5] || (_cache[5] = function ($event) {\n            return !$options.isDisabled && $props.options.cellContextmenu && $options.onCellContextMenu($event);\n          }),\n          onDragenter: _cache[6] || (_cache[6] = function ($event) {\n            return !$options.isDisabled && $props.editEvents.drag && $options.dnd && $options.dnd.cellDragEnter($event, _ctx.$data, $props.data.startDate);\n          }),\n          onDragover: function onDragover($event) {\n            return !$options.isDisabled && $props.editEvents.drag && $options.dnd && $options.dnd.cellDragOver($event, _ctx.$data, $props.data.startDate, $options.splitsCount ? split.id : null);\n          },\n          onDragleave: _cache[7] || (_cache[7] = function ($event) {\n            return !$options.isDisabled && $props.editEvents.drag && $options.dnd && $options.dnd.cellDragLeave($event, _ctx.$data, $props.data.startDate);\n          }),\n          onDrop: function onDrop($event) {\n            return !$options.isDisabled && $props.editEvents.drag && $options.dnd && $options.dnd.cellDragDrop($event, _ctx.$data, $props.data.startDate, $options.splitsCount ? split.id : null);\n          }\n        }, [$options.isWeekOrDayView && !$props.allDay && $options.specialHours.length ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], {\n          key: 0\n        }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.specialHours, function (block, i) {\n          return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n            class: [\"vuecal__special-hours\", \"vuecal__special-hours--day\".concat(block.day, \" \").concat(block.class)],\n            style: \"height: \".concat(block.height, \"px;top: \").concat(block.top, \"px\")\n          }, null, 6);\n        }), 256\n        /* UNKEYED_FRAGMENT */\n        )) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"cell-content\", {\n          events: $options.events,\n          \"select-cell\": function selectCell($event) {\n            return $options.selectCell($event, true);\n          },\n          split: $options.splitsCount ? split : false\n        }), $options.eventsCount && ($options.isWeekOrDayView || $options.view.id === 'month' && $props.options.eventsOnMonthView) ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", cellvue_type_template_id_16690b7a_lang_pug_hoisted_1, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(external_commonjs_vue_commonjs2_vue_root_Vue_[\"Fragment\"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderList\"])($options.splitsCount ? split.events : $options.events, function (event, j) {\n          return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(_component_event, {\n            key: j,\n            \"cell-formatted-date\": $props.data.formattedDate,\n            event: event,\n            \"all-day\": $props.allDay,\n            \"cell-events\": $options.splitsCount ? split.events : $options.events,\n            overlaps: (($options.splitsCount ? split.overlaps[event._eid] : _ctx.cellOverlaps[event._eid]) || []).overlaps,\n            \"event-position\": (($options.splitsCount ? split.overlaps[event._eid] : _ctx.cellOverlaps[event._eid]) || []).position,\n            \"overlaps-streak\": $options.splitsCount ? split.overlapsStreak : _ctx.cellOverlapsStreak\n          }, {\n            event: Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withCtx\"])(function (_ref) {\n              var event = _ref.event,\n                  view = _ref.view;\n              return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n                view: view,\n                event: event\n              })];\n            }),\n            _: 2\n          }, 1032, [\"cell-formatted-date\", \"event\", \"all-day\", \"cell-events\", \"overlaps\", \"event-position\", \"overlaps-streak\"]);\n        }), 128\n        /* KEYED_FRAGMENT */\n        ))])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)], 42, [\"data-split\", \"aria-label\", \"onTouchstart\", \"onMousedown\", \"onDragover\", \"onDrop\"]);\n      }), 128\n      /* KEYED_FRAGMENT */\n      )), $options.timelineVisible ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n        class: \"vuecal__now-line\",\n        style: \"top: \".concat($options.todaysTimePosition, \"px\"),\n        key: $props.options.transitions ? \"\".concat($options.view.id, \"-now-line\") : 'now-line',\n        title: $options.utils.date.formatTime($options.vuecal.now)\n      }, null, 12, [\"title\"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"name\", \"appear\", \"style\"]);\n}\n// CONCATENATED MODULE: ./src/vue-cal/cell.vue?vue&type=template&id=16690b7a&lang=pug\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\n\n\n\n\n\n\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!./node_modules/pug-plain-loader!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/event.vue?vue&type=template&id=cdf79fc4&lang=pug\n\nfunction eventvue_type_template_id_cdf79fc4_lang_pug_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n    class: [\"vuecal__event\", $options.eventClasses],\n    style: $options.eventStyles,\n    tabindex: \"0\",\n    onFocus: _cache[5] || (_cache[5] = function () {\n      return $options.focusEvent.apply($options, arguments);\n    }),\n    onKeypress: _cache[6] || (_cache[6] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withKeys\"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.onEnterKeypress.apply($options, arguments);\n    }, [\"stop\"]), [\"enter\"])),\n    onMouseenter: _cache[7] || (_cache[7] = function () {\n      return $options.onMouseEnter.apply($options, arguments);\n    }),\n    onMouseleave: _cache[8] || (_cache[8] = function () {\n      return $options.onMouseLeave.apply($options, arguments);\n    }),\n    onTouchstart: _cache[9] || (_cache[9] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.onTouchStart.apply($options, arguments);\n    }, [\"stop\"])),\n    onMousedown: _cache[10] || (_cache[10] = function ($event) {\n      return $options.onMouseDown($event)\n      /* Don't stop mousedown propagation. See in onMouseDown(). */\n      ;\n    }),\n    onMouseup: _cache[11] || (_cache[11] = function () {\n      return $options.onMouseUp.apply($options, arguments);\n    }),\n    onTouchend: _cache[12] || (_cache[12] = function () {\n      return $options.onMouseUp.apply($options, arguments);\n    }),\n    onTouchmove: _cache[13] || (_cache[13] = function () {\n      return $options.onTouchMove.apply($options, arguments);\n    }),\n    onDblclick: _cache[14] || (_cache[14] = function () {\n      return $options.onDblClick.apply($options, arguments);\n    }),\n    draggable: $options.draggable,\n    onDragstart: _cache[15] || (_cache[15] = function ($event) {\n      return $options.draggable && $options.onDragStart($event);\n    }),\n    onDragend: _cache[16] || (_cache[16] = function ($event) {\n      return $options.draggable && $options.onDragEnd();\n    })\n  }, [$options.vuecal.editEvents.delete && $props.event.deletable ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n    key: 0,\n    class: \"vuecal__event-delete\",\n    onClick: _cache[1] || (_cache[1] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.deleteEvent.apply($options, arguments);\n    }, [\"stop\"])),\n    onTouchstart: _cache[2] || (_cache[2] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.touchDeleteEvent.apply($options, arguments);\n    }, [\"stop\"]))\n  }, Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"toDisplayString\"])($options.vuecal.texts.deleteEvent), 33)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"renderSlot\"])(_ctx.$slots, \"event\", {\n    event: $props.event,\n    view: $options.view.id\n  }), $options.resizable ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"openBlock\"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createBlock\"])(\"div\", {\n    key: 1,\n    class: \"vuecal__event-resize-handle\",\n    contenteditable: \"false\",\n    onMousedown: _cache[3] || (_cache[3] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.onResizeHandleMouseDown.apply($options, arguments);\n    }, [\"stop\", \"prevent\"])),\n    onTouchstart: _cache[4] || (_cache[4] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"withModifiers\"])(function () {\n      return $options.onResizeHandleMouseDown.apply($options, arguments);\n    }, [\"stop\", \"prevent\"]))\n  }, null, 32)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_[\"createCommentVNode\"])(\"\", true)], 46, [\"draggable\"]);\n}\n// CONCATENATED MODULE: ./src/vue-cal/event.vue?vue&type=template&id=cdf79fc4&lang=pug\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/event.vue?vue&type=script&lang=js\n\n\n\n\n\n\n/* harmony default export */ var eventvue_type_script_lang_js = ({\n  inject: ['vuecal', 'utils', 'modules', 'view', 'domEvents', 'editEvents'],\n  props: {\n    cellFormattedDate: {\n      type: String,\n      default: ''\n    },\n    event: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    cellEvents: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    overlaps: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // If multiple simultaneous events, the events are placed from left to right from the\n    // one starting first to the last. (See utils/event.js > checkCellOverlappingEvents)\n    eventPosition: {\n      type: Number,\n      default: 0\n    },\n    overlapsStreak: {\n      type: Number,\n      default: 0\n    },\n    allDay: {\n      type: Boolean,\n      default: false\n    } // Is the event displayed in the all-day bar.\n\n  },\n  data: function data() {\n    return {\n      // Event touch detection with 30px threshold.\n      touch: {\n        dragThreshold: 30,\n        // px.\n        startX: 0,\n        startY: 0,\n        // Detect if the event touch start + touch end was a drag or a tap.\n        // If it was a drag, don't call the event-click handler.\n        dragged: false\n      }\n    };\n  },\n  methods: {\n    /**\n     * On event mousedown.\n     * Do not prevent propagation to trigger cell mousedown which highlights the cell if not highlighted.\n     */\n    onMouseDown: function onMouseDown(e) {\n      var _this = this;\n\n      var touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Prevent a double mouse down on touch devices.\n      if ('ontouchstart' in window && !touch) return false;\n      var _this$domEvents = this.domEvents,\n          clickHoldAnEvent = _this$domEvents.clickHoldAnEvent,\n          focusAnEvent = _this$domEvents.focusAnEvent,\n          resizeAnEvent = _this$domEvents.resizeAnEvent,\n          dragAnEvent = _this$domEvents.dragAnEvent; // If the delete button is already out and event is on focus then delete event.\n      // Return true so the event-click function (if any) is not called.\n\n      if (focusAnEvent._eid === this.event._eid && clickHoldAnEvent._eid === this.event._eid) {\n        return true;\n      } // Focus the clicked event.\n\n\n      this.focusEvent();\n      clickHoldAnEvent._eid = null; // Reinit click hold on each click.\n      // Show event delete button.\n\n      if (this.vuecal.editEvents.delete && this.event.deletable) {\n        clickHoldAnEvent.timeoutId = setTimeout(function () {\n          if (!resizeAnEvent._eid && !dragAnEvent._eid) {\n            clickHoldAnEvent._eid = _this.event._eid;\n            _this.event.deleting = true;\n          }\n        }, clickHoldAnEvent.timeout);\n      }\n    },\n\n    /**\n     * The mouseup handler is global (whole document) and initialized in index.vue on mounted.\n     * It handles the mouseup on cell, events, and everything.\n     * All mouseup on event, should be put there to avoid conflicts with other cases.\n     * This function is also called on touchend on the event.\n     */\n    onMouseUp: function onMouseUp(e) {\n      // Don't allow mouseup to be fired on different event than mousedown for the onEventClick function.\n      if (this.domEvents.focusAnEvent._eid === this.event._eid && !this.touch.dragged) {\n        // This is used in the global mouseup handler.\n        this.domEvents.focusAnEvent.mousedUp = true;\n      }\n\n      this.touch.dragged = false; // After the touchend happens, reset the dragged flag.\n    },\n    onMouseEnter: function onMouseEnter(e) {\n      e.preventDefault();\n      this.vuecal.emitWithEvent('event-mouse-enter', this.event);\n    },\n    onMouseLeave: function onMouseLeave(e) {\n      e.preventDefault();\n      this.vuecal.emitWithEvent('event-mouse-leave', this.event);\n    },\n    // Detect if user taps on an event or drags it. If dragging, don't fire the event-click handler (if any).\n    onTouchMove: function onTouchMove(e) {\n      // Skip the maths if there is no event click handler.\n      if (typeof this.vuecal.onEventClick !== 'function') return;\n      var _e$touches$ = e.touches[0],\n          clientX = _e$touches$.clientX,\n          clientY = _e$touches$.clientY;\n      var _this$touch = this.touch,\n          startX = _this$touch.startX,\n          startY = _this$touch.startY,\n          dragThreshold = _this$touch.dragThreshold;\n\n      if (Math.abs(clientX - startX) > dragThreshold || Math.abs(clientY - startY) > dragThreshold) {\n        this.touch.dragged = true;\n      }\n    },\n    onTouchStart: function onTouchStart(e) {\n      this.touch.startX = e.touches[0].clientX;\n      this.touch.startY = e.touches[0].clientY;\n      this.onMouseDown(e, true);\n    },\n    onEnterKeypress: function onEnterKeypress(e) {\n      if (typeof this.vuecal.onEventClick === 'function') return this.vuecal.onEventClick(this.event, e);\n    },\n    onDblClick: function onDblClick(e) {\n      if (typeof this.vuecal.onEventDblclick === 'function') return this.vuecal.onEventDblclick(this.event, e);\n    },\n    onDragStart: function onDragStart(e) {\n      this.dnd && this.dnd.eventDragStart(e, this.event);\n    },\n    onDragEnd: function onDragEnd() {\n      this.dnd && this.dnd.eventDragEnd(this.event);\n    },\n    onResizeHandleMouseDown: function onResizeHandleMouseDown() {\n      this.focusEvent();\n      this.domEvents.dragAnEvent._eid = null;\n      this.domEvents.resizeAnEvent = Object.assign(this.domEvents.resizeAnEvent, {\n        _eid: this.event._eid,\n        start: (this.segment || this.event).start,\n        split: this.event.split || null,\n        segment: !!this.segment && this.utils.date.formatDateLite(this.segment.start),\n        originalEnd: new Date((this.segment || this.event).end),\n        originalEndTimeMinutes: this.event.endTimeMinutes\n      });\n      this.event.resizing = true;\n    },\n    deleteEvent: function deleteEvent() {\n      var touch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // Prevent a double mouse down on touch devices.\n      if ('ontouchstart' in window && !touch) return false;\n      this.utils.event.deleteAnEvent(this.event);\n    },\n    touchDeleteEvent: function touchDeleteEvent(event) {\n      this.deleteEvent(true);\n    },\n    cancelDeleteEvent: function cancelDeleteEvent() {\n      this.event.deleting = false;\n    },\n    focusEvent: function focusEvent() {\n      var focusAnEvent = this.domEvents.focusAnEvent;\n      var focusedEvent = focusAnEvent._eid; // If event is already focus cancel refocusing.\n\n      if (focusedEvent === this.event._eid) return; // Unfocus previous event if any.\n      else if (focusedEvent) {\n          var event = this.view.events.find(function (e) {\n            return e._eid === focusedEvent;\n          });\n          if (event) event.focused = false;\n        } // Cancel delete on previous event if any.\n\n      this.vuecal.cancelDelete();\n      this.vuecal.emitWithEvent('event-focus', this.event);\n      focusAnEvent._eid = this.event._eid;\n      this.event.focused = true;\n    }\n  },\n  computed: {\n    eventDimensions: function eventDimensions() {\n      var _ref = this.segment || this.event,\n          startTimeMinutes = _ref.startTimeMinutes,\n          endTimeMinutes = _ref.endTimeMinutes; // Top of event.\n\n\n      var minutesFromTop = startTimeMinutes - this.vuecal.timeFrom;\n      var top = Math.max(Math.round(minutesFromTop * this.vuecal.timeCellHeight / this.vuecal.timeStep), 0); // Bottom of event.\n\n      minutesFromTop = Math.min(endTimeMinutes, this.vuecal.timeTo) - this.vuecal.timeFrom;\n      var bottom = Math.round(minutesFromTop * this.vuecal.timeCellHeight / this.vuecal.timeStep);\n      var height = Math.max(bottom - top, 5); // Min height is 5px.\n\n      return {\n        top: top,\n        height: height\n      };\n    },\n    eventStyles: function eventStyles() {\n      if (this.event.allDay || !this.vuecal.time || !this.event.endTimeMinutes || this.view.id === 'month' || this.allDay) return {};\n      var width = 100 / Math.min(this.overlaps.length + 1, this.overlapsStreak);\n      var left = 100 / (this.overlaps.length + 1) * this.eventPosition;\n\n      if (this.vuecal.minEventWidth && width < this.vuecal.minEventWidth) {\n        width = this.vuecal.minEventWidth;\n        left = (100 - this.vuecal.minEventWidth) / this.overlaps.length * this.eventPosition;\n      }\n\n      var _this$eventDimensions = this.eventDimensions,\n          top = _this$eventDimensions.top,\n          height = _this$eventDimensions.height;\n      return {\n        top: \"\".concat(top, \"px\"),\n        height: \"\".concat(height, \"px\"),\n        width: \"\".concat(width, \"%\"),\n        left: this.event.left && \"\".concat(this.event.left, \"px\") || \"\".concat(left, \"%\")\n      };\n    },\n    // Don't rely on global variables otherwise whenever it would change all the events would be redrawn.\n    eventClasses: function eventClasses() {\n      var _ref3;\n\n      var _ref2 = this.segment || {},\n          isFirstDay = _ref2.isFirstDay,\n          isLastDay = _ref2.isLastDay;\n\n      return _ref3 = {}, Object(defineProperty[\"a\" /* default */])(_ref3, this.event.class, !!this.event.class), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--focus', this.event.focused), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--resizing', this.event.resizing), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--background', this.event.background), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--deletable', this.event.deleting), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--all-day', this.event.allDay), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--dragging', !this.event.draggingStatic && this.event.dragging), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--static', this.event.dragging && this.event.draggingStatic), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__event--multiple-days', !!this.segment), Object(defineProperty[\"a\" /* default */])(_ref3, 'event-start', this.segment && isFirstDay && !isLastDay), Object(defineProperty[\"a\" /* default */])(_ref3, 'event-middle', this.segment && !isFirstDay && !isLastDay), Object(defineProperty[\"a\" /* default */])(_ref3, 'event-end', this.segment && isLastDay && !isFirstDay), _ref3;\n    },\n    // When multiple-day events, a segment is a portion of event spanning on 1 day.\n    segment: function segment() {\n      return this.event.segments && this.event.segments[this.cellFormattedDate] || null;\n    },\n    draggable: function draggable() {\n      var _this$event = this.event,\n          draggable = _this$event.draggable,\n          background = _this$event.background,\n          daysCount = _this$event.daysCount;\n      return this.vuecal.editEvents.drag && draggable && !background && daysCount === 1;\n    },\n    resizable: function resizable() {\n      var _this$vuecal = this.vuecal,\n          editEvents = _this$vuecal.editEvents,\n          time = _this$vuecal.time;\n      return editEvents.resize && this.event.resizable && time && !this.allDay && (!this.segment || this.segment && this.segment.isLastDay) && this.view.id !== 'month';\n    },\n    // Drag & drop module.\n    dnd: function dnd() {\n      return this.modules.dnd;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/event.vue?vue&type=script&lang=js\n \n// EXTERNAL MODULE: ./src/vue-cal/event.vue?vue&type=style&index=0&id=cdf79fc4&lang=scss\nvar eventvue_type_style_index_0_id_cdf79fc4_lang_scss = __nested_webpack_require_199304__(\"b48b\");\n\n// CONCATENATED MODULE: ./src/vue-cal/event.vue\n\n\n\n\n\neventvue_type_script_lang_js.render = eventvue_type_template_id_cdf79fc4_lang_pug_render\n\n/* harmony default export */ var vue_cal_event = (eventvue_type_script_lang_js);\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/cell.vue?vue&type=script&lang=js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var cellvue_type_script_lang_js = ({\n  inject: ['vuecal', 'utils', 'modules', 'view', 'domEvents'],\n  components: {\n    Event: vue_cal_event\n  },\n  props: {\n    // Vue-cal main component options (props).\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    editEvents: {\n      type: Object,\n      required: true\n    },\n    data: {\n      type: Object,\n      required: true\n    },\n    cellSplits: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    minTimestamp: {\n      type: [Number, null],\n      default: null\n    },\n    maxTimestamp: {\n      type: [Number, null],\n      default: null\n    },\n    cellWidth: {\n      type: [Number, Boolean],\n      default: false\n    },\n    allDay: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      cellOverlaps: {},\n      cellOverlapsStreak: 1,\n      // Largest amount of simultaneous events in cell.\n      // On mouse down, save the time at cursor so it can be reused on cell focus event\n      // where there is no cursor coords.\n      timeAtCursor: null,\n      highlighted: false,\n      // On event drag over.\n      highlightedSplit: null\n    };\n  },\n  methods: {\n    getSplitAtCursor: function getSplitAtCursor(_ref) {\n      var target = _ref.target;\n      var targetIsSplit = target.classList.contains('vuecal__cell-split');\n      var split = targetIsSplit ? target : this.vuecal.findAncestor(target, 'vuecal__cell-split');\n\n      if (split) {\n        split = split.attributes['data-split'].value; // Convert to a numeric value if split id is a number.\n\n        if (parseInt(split).toString() === split.toString()) split = parseInt(split);\n      }\n\n      return split || null;\n    },\n    splitClasses: function splitClasses(split) {\n      return Object(defineProperty[\"a\" /* default */])({\n        'vuecal__cell-split': true,\n        'vuecal__cell-split--highlighted': this.highlightedSplit === split.id\n      }, split.class, !!split.class);\n    },\n    checkCellOverlappingEvents: function checkCellOverlappingEvents() {\n      // If splits, checkCellOverlappingEvents() is called from within computed splits.\n      if (this.options.time && this.eventsCount && !this.splitsCount) {\n        if (this.eventsCount === 1) {\n          this.cellOverlaps = [];\n          this.cellOverlapsStreak = 1;\n        } // If only 1 event remains re-init the overlaps.\n        else {\n            var _this$utils$event$che = this.utils.event.checkCellOverlappingEvents(this.events, this.options);\n\n            var _this$utils$event$che2 = _slicedToArray(_this$utils$event$che, 2);\n\n            this.cellOverlaps = _this$utils$event$che2[0];\n            this.cellOverlapsStreak = _this$utils$event$che2[1];\n          }\n      }\n    },\n    isDOMElementAnEvent: function isDOMElementAnEvent(el) {\n      return this.vuecal.isDOMElementAnEvent(el);\n    },\n\n    /**\n     * Select a cell and go to narrower view on double click or single click according to vuecalProps option.\n     */\n    selectCell: function selectCell(DOMEvent) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // If splitting days, also return the clicked split on cell click when emitting event.\n      var split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null;\n      this.utils.cell.selectCell(force, this.timeAtCursor, split);\n      this.timeAtCursor = null;\n    },\n    onCellkeyPressEnter: function onCellkeyPressEnter(DOMEvent) {\n      if (!this.isSelected) this.onCellFocus(DOMEvent); // If splitting days, also return the clicked split on cell keypress when emitting event.\n\n      var split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null;\n      this.utils.cell.keyPressEnterCell(this.timeAtCursor, split);\n      this.timeAtCursor = null;\n    },\n\n    /**\n     * On cell focus, from tab key or from mousedown, highlight the cell and emit\n     * the cell-focus event with the date of the cell start when focusing from tab or\n     * the date & time at cursor if click/touch.\n     */\n    onCellFocus: function onCellFocus(DOMEvent) {\n      if (!this.isSelected) {\n        this.isSelected = this.data.startDate; // Highlight the cell.\n        // If splitting days, also return the clicked split on cell focus when emitting event.\n\n        var split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null; // Cell-focus event returns the cell start date (at midnight) if triggered from tab key,\n        // or cursor coords time if clicked.\n\n        var date = this.timeAtCursor || this.data.startDate;\n        this.vuecal.$emit('cell-focus', split ? {\n          date: date,\n          split: split\n        } : date);\n      }\n    },\n    onCellMouseDown: function onCellMouseDown(DOMEvent) {\n      var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var touch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // Prevent a double mouse down on touch devices.\n      if ('ontouchstart' in window && !touch) return false;\n      if (!this.isSelected) this.onCellFocus(DOMEvent);\n      var _this$domEvents = this.domEvents,\n          clickHoldACell = _this$domEvents.clickHoldACell,\n          focusAnEvent = _this$domEvents.focusAnEvent; // Reinit the click trigger on each mousedown.\n      // In some cases we explicitly set this flag to prevent the click event to trigger,\n      // and cancel event creation.\n\n      this.domEvents.cancelClickEventCreation = false; // Also reinit this var on each mousedown.\n\n      clickHoldACell.eventCreated = false;\n      this.timeAtCursor = new Date(this.data.startDate);\n\n      var _this$vuecal$minutesA = this.vuecal.minutesAtCursor(DOMEvent),\n          minutes = _this$vuecal$minutesA.minutes,\n          y = _this$vuecal$minutesA.cursorCoords.y;\n\n      this.timeAtCursor.setMinutes(minutes);\n      var mouseDownOnEvent = this.isDOMElementAnEvent(DOMEvent.target); // Unfocus an event if any is focused and clicking on cell outside of an event.\n\n      if (!mouseDownOnEvent && focusAnEvent._eid) {\n        (this.view.events.find(function (e) {\n          return e._eid === focusAnEvent._eid;\n        }) || {}).focused = false;\n      } // Only if event creation is allowed and mousedown is on a cell (not on event).\n\n\n      if (this.editEvents.create && !mouseDownOnEvent) this.setUpEventCreation(DOMEvent, y);\n    },\n    setUpEventCreation: function setUpEventCreation(DOMEvent, startCursorY) {\n      // If dragToCreateEvent is true, start the event creation from dragging\n      // only on week and day views (doesn't make sense on month view).\n      if (this.options.dragToCreateEvent && ['week', 'day'].includes(this.view.id)) {\n        var dragCreateAnEvent = this.domEvents.dragCreateAnEvent;\n        dragCreateAnEvent.startCursorY = startCursorY; // If splitting days, store the clicked split to create an event in it from the global\n        // mousemove handler in index.vue.\n\n        dragCreateAnEvent.split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null; // Save the time at cursor on initial mousedown.\n\n        dragCreateAnEvent.start = this.timeAtCursor; // If snapToTime, set the start to the closest intervaled number.\n\n        if (this.options.snapToTime) {\n          var timeMinutes = this.timeAtCursor.getHours() * 60 + this.timeAtCursor.getMinutes();\n          var plusHalfSnapTime = timeMinutes + this.options.snapToTime / 2;\n          timeMinutes = plusHalfSnapTime - plusHalfSnapTime % this.options.snapToTime;\n          dragCreateAnEvent.start.setHours(0, timeMinutes, 0, 0);\n        }\n      } // If the cellClickHold option is true and not mousedown on an event, click & hold to create an event.\n      else if (this.options.cellClickHold && ['month', 'week', 'day'].includes(this.view.id)) {\n          this.setUpCellHoldTimer(DOMEvent);\n        }\n    },\n    // When click & holding a cell, and if allowed, set a timeout to create an event (can be cancelled).\n    setUpCellHoldTimer: function setUpCellHoldTimer(DOMEvent) {\n      var _this = this;\n\n      var clickHoldACell = this.domEvents.clickHoldACell;\n      clickHoldACell.cellId = \"\".concat(this.vuecal._.uid, \"_\").concat(this.data.formattedDate); // If splitting days, store the clicked split to create an event in it from the global\n      // mousemove handler in index.vue.\n\n      clickHoldACell.split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null;\n      clickHoldACell.timeoutId = setTimeout(function () {\n        if (clickHoldACell.cellId && !_this.domEvents.cancelClickEventCreation) {\n          var _this$utils$event$cre = _this.utils.event.createAnEvent(_this.timeAtCursor, null, clickHoldACell.split ? {\n            split: clickHoldACell.split\n          } : {}),\n              _eid = _this$utils$event$cre._eid;\n\n          clickHoldACell.eventCreated = _eid;\n        }\n      }, clickHoldACell.timeout);\n    },\n    onCellTouchStart: function onCellTouchStart(DOMEvent) {\n      var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      // If not mousedown on an event.\n      this.onCellMouseDown(DOMEvent, split, true);\n    },\n    onCellClick: function onCellClick(DOMEvent) {\n      if (!this.isDOMElementAnEvent(DOMEvent.target)) this.selectCell(DOMEvent);\n    },\n    onCellDblClick: function onCellDblClick(DOMEvent) {\n      var date = new Date(this.data.startDate);\n      date.setMinutes(this.vuecal.minutesAtCursor(DOMEvent).minutes); // If splitting days, also return the clicked split on cell dblclick when emitting event.\n\n      var split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null;\n      this.vuecal.$emit('cell-dblclick', split ? {\n        date: date,\n        split: split\n      } : date);\n      if (this.options.dblclickToNavigate) this.vuecal.switchToNarrowerView();\n    },\n    onCellContextMenu: function onCellContextMenu(DOMEvent) {\n      DOMEvent.stopPropagation();\n      DOMEvent.preventDefault();\n      var date = new Date(this.data.startDate);\n\n      var _this$vuecal$minutesA2 = this.vuecal.minutesAtCursor(DOMEvent),\n          cursorCoords = _this$vuecal$minutesA2.cursorCoords,\n          minutes = _this$vuecal$minutesA2.minutes;\n\n      date.setMinutes(minutes); // If splitting days, also return the clicked split on cell contextmenu when emitting event.\n\n      var split = this.splitsCount ? this.getSplitAtCursor(DOMEvent) : null;\n      this.vuecal.$emit('cell-contextmenu', Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({\n        date: date\n      }, cursorCoords), split || {}), {}, {\n        e: DOMEvent\n      }));\n    }\n  },\n  computed: {\n    // Drag & drop module.\n    dnd: function dnd() {\n      return this.modules.dnd;\n    },\n    nowInMinutes: function nowInMinutes() {\n      return this.utils.date.dateToMinutes(this.vuecal.now);\n    },\n    isBeforeMinDate: function isBeforeMinDate() {\n      return this.minTimestamp !== null && this.minTimestamp > this.data.endDate.getTime();\n    },\n    isAfterMaxDate: function isAfterMaxDate() {\n      return this.maxTimestamp && this.maxTimestamp < this.data.startDate.getTime();\n    },\n    // Is the current cell disabled or not.\n    isDisabled: function isDisabled() {\n      var disableDays = this.options.disableDays;\n      var isYearsOrYearView = this.vuecal.isYearsOrYearView;\n      if (disableDays.length && disableDays.includes(this.data.formattedDate) && !isYearsOrYearView) return true;\n      return this.isBeforeMinDate || this.isAfterMaxDate;\n    },\n    // Is the current cell selected or not.\n    isSelected: {\n      get: function get() {\n        var selected = false;\n        var selectedDate = this.view.selectedDate;\n\n        if (this.view.id === 'years') {\n          selected = selectedDate.getFullYear() === this.data.startDate.getFullYear();\n        } else if (this.view.id === 'year') {\n          selected = selectedDate.getFullYear() === this.data.startDate.getFullYear() && selectedDate.getMonth() === this.data.startDate.getMonth();\n        } else selected = selectedDate.getTime() === this.data.startDate.getTime();\n\n        return selected;\n      },\n      set: function set(date) {\n        this.view.selectedDate = date;\n      }\n    },\n    // Cache result for performance.\n    isWeekOrDayView: function isWeekOrDayView() {\n      return ['week', 'day'].includes(this.view.id);\n    },\n    transitionDirection: function transitionDirection() {\n      return this.vuecal.transitionDirection;\n    },\n    specialHours: function specialHours() {\n      var _this2 = this;\n\n      // this.data.specialHours is always an array, but may be empty.\n      return this.data.specialHours.map(function (block) {\n        var from = block.from,\n            to = block.to;\n        from = Math.max(from, _this2.options.timeFrom);\n        to = Math.min(to, _this2.options.timeTo);\n        return Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, block), {}, {\n          height: (to - from) * _this2.timeScale,\n          top: (from - _this2.options.timeFrom) * _this2.timeScale\n        });\n      });\n    },\n    events: function events() {\n      var _this3 = this;\n\n      var _this$data = this.data,\n          cellStart = _this$data.startDate,\n          cellEnd = _this$data.endDate;\n      var events = []; // Calculate events on month/week/day views or years/year if eventsCountOnYearView.\n\n      if (!(['years', 'year'].includes(this.view.id) && !this.options.eventsCountOnYearView)) {\n        // Means that when vuecal.view.events changes all the cells will be looking up new value. :/\n        // Also clone array to prevent modifying original.\n        events = this.view.events.slice(0);\n\n        if (this.view.id === 'month') {\n          var _events;\n\n          (_events = events).push.apply(_events, _toConsumableArray(this.view.outOfScopeEvents));\n        } // Only keep events in cell time range.\n\n\n        events = events.filter(function (e) {\n          return _this3.utils.event.eventInRange(e, cellStart, cellEnd);\n        });\n        if (this.options.showAllDayEvents && this.view.id !== 'month') events = events.filter(function (e) {\n          return !!e.allDay === _this3.allDay;\n        }); // From events in view, filter the ones that are out of `time-from`-`time-to` range in this cell.\n\n        if (this.options.time && this.isWeekOrDayView && !this.allDay) {\n          var _this$options = this.options,\n              timeFrom = _this$options.timeFrom,\n              timeTo = _this$options.timeTo;\n          events = events.filter(function (e) {\n            var segment = e.daysCount > 1 && e.segments[_this3.data.formattedDate] || {};\n            var singleDayInRange = e.daysCount === 1 && e.startTimeMinutes < timeTo && e.endTimeMinutes > timeFrom;\n            var multipleDayInRange = e.daysCount > 1 && segment.startTimeMinutes < timeTo && segment.endTimeMinutes > timeFrom;\n            var recurrMultDayInRange = false; // e.daysCount > 1 && e.repeat && recurringEventInRange(e, cellStart, cellEnd)\n\n            return e.allDay || singleDayInRange || multipleDayInRange || recurrMultDayInRange;\n          });\n        } // Position events with time in the timeline when there is a timeline and not in allDay slot.\n\n\n        if (this.options.time && this.isWeekOrDayView && !(this.options.showAllDayEvents && this.allDay)) {\n          // Sort events in chronological order.\n          events.sort(function (a, b) {\n            return a.start < b.start ? -1 : 1;\n          });\n        } // If splits, checkCellOverlappingEvents() is called from within computed splits.\n\n\n        if (!this.cellSplits.length) this.$nextTick(this.checkCellOverlappingEvents);\n      }\n\n      return events;\n    },\n    eventsCount: function eventsCount() {\n      return this.events.length;\n    },\n    splits: function splits() {\n      var _this4 = this;\n\n      return this.cellSplits.map(function (item, i) {\n        var events = _this4.events.filter(function (e) {\n          return e.split === item.id;\n        });\n\n        var _this4$utils$event$ch = _this4.utils.event.checkCellOverlappingEvents(events.filter(function (e) {\n          return !e.background && !e.allDay;\n        }), _this4.options),\n            _this4$utils$event$ch2 = _slicedToArray(_this4$utils$event$ch, 2),\n            overlaps = _this4$utils$event$ch2[0],\n            streak = _this4$utils$event$ch2[1];\n\n        return Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, item), {}, {\n          overlaps: overlaps,\n          overlapsStreak: streak,\n          events: events\n        });\n      });\n    },\n    splitsCount: function splitsCount() {\n      return this.splits.length;\n    },\n    cellClasses: function cellClasses() {\n      var _ref3;\n\n      return _ref3 = {}, Object(defineProperty[\"a\" /* default */])(_ref3, this.data.class, !!this.data.class), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--current', this.data.current), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--today', this.data.today), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--out-of-scope', this.data.outOfScope), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--before-min', this.isDisabled && this.isBeforeMinDate), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--after-max', this.isDisabled && this.isAfterMaxDate), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--disabled', this.isDisabled), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--selected', this.isSelected), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--highlighted', this.highlighted), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--has-splits', this.splitsCount), Object(defineProperty[\"a\" /* default */])(_ref3, 'vuecal__cell--has-events', this.eventsCount), _ref3;\n    },\n    cellStyles: function cellStyles() {\n      return Object(objectSpread2[\"a\" /* default */])({}, this.cellWidth ? {\n        width: \"\".concat(this.cellWidth, \"%\")\n      } : {});\n    },\n    timelineVisible: function timelineVisible() {\n      var _this$options2 = this.options,\n          time = _this$options2.time,\n          timeTo = _this$options2.timeTo;\n      return this.data.today && this.isWeekOrDayView && time && !this.allDay && this.nowInMinutes <= timeTo;\n    },\n    todaysTimePosition: function todaysTimePosition() {\n      // Skip the Maths if not relevant.\n      if (!this.data.today || !this.options.time) return;\n      var minutesFromTop = this.nowInMinutes - this.options.timeFrom;\n      return Math.round(minutesFromTop * this.timeScale);\n    },\n    timeScale: function timeScale() {\n      return this.options.timeCellHeight / this.options.timeStep;\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/cell.vue?vue&type=script&lang=js\n \n// EXTERNAL MODULE: ./src/vue-cal/cell.vue?vue&type=style&index=0&id=16690b7a&lang=scss\nvar cellvue_type_style_index_0_id_16690b7a_lang_scss = __nested_webpack_require_199304__(\"de47\");\n\n// CONCATENATED MODULE: ./src/vue-cal/cell.vue\n\n\n\n\n\ncellvue_type_script_lang_js.render = cellvue_type_template_id_16690b7a_lang_pug_render\n\n/* harmony default export */ var vue_cal_cell = (cellvue_type_script_lang_js);\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/all-day-bar.vue?vue&type=script&lang=js\n\n\n/* harmony default export */ var all_day_barvue_type_script_lang_js = ({\n  inject: ['vuecal', 'view', 'editEvents'],\n  components: {\n    'vuecal-cell': vue_cal_cell\n  },\n  props: {\n    // Vue-cal main component options (props).\n    options: {\n      type: Object,\n      required: true\n    },\n    cells: {\n      type: Array,\n      required: true\n    },\n    label: {\n      type: String,\n      required: true\n    },\n    daySplits: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    shortEvents: {\n      type: Boolean,\n      default: true\n    },\n    height: {\n      type: String,\n      default: ''\n    },\n    cellOrSplitMinWidth: {\n      type: Number,\n      default: null\n    }\n  },\n  computed: {\n    hasCellOrSplitWidth: function hasCellOrSplitWidth() {\n      return !!(this.options.minCellWidth || this.daySplits.length && this.options.minSplitWidth);\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/all-day-bar.vue?vue&type=script&lang=js\n \n// CONCATENATED MODULE: ./src/vue-cal/all-day-bar.vue\n\n\n\nall_day_barvue_type_script_lang_js.render = all_day_barvue_type_template_id_8ec5ab98_lang_pug_render\n\n/* harmony default export */ var all_day_bar = (all_day_barvue_type_script_lang_js);\n// EXTERNAL MODULE: ./src/vue-cal/styles.scss\nvar styles = __nested_webpack_require_199304__(\"1332\");\n\n// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist??ref--0-1!./src/vue-cal/index.vue?vue&type=script&lang=js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar vue_calvue_type_script_lang_js_minutesInADay = 24 * 60; // Don't do the maths every time.\n\nvar textsDefaults = {\n  weekDays: Array(7).fill(''),\n  weekDaysShort: [],\n  months: Array(12).fill(''),\n  years: '',\n  year: '',\n  month: '',\n  week: '',\n  day: '',\n  today: '',\n  noEvent: '',\n  allDay: '',\n  deleteEvent: '',\n  createEvent: '',\n  dateFormat: 'dddd MMMM D, YYYY',\n  am: 'am',\n  pm: 'pm'\n};\nvar validViews = ['years', 'year', 'month', 'week', 'day']; // Only 1 instance of DateUtils for all the instances of Vue Cal, created when first importing the Vue Cal lib.\n// The dateUtils does not need to be dependent of Vue Cal instance, it only needs localized texts when ready.\n// This becomes a problem when showing multiple instances of Vue Cal with different locales like in the\n// documentation page. So the texts are overridable through a the `updateDateTexts` function.\n\nvar vue_calvue_type_script_lang_js_dateUtils = new date_DateUtils(textsDefaults); // Do this ASAP for date prototypes.\n\n/* harmony default export */ var vue_calvue_type_script_lang_js = ({\n  name: 'vue-cal',\n  components: {\n    'vuecal-cell': vue_cal_cell,\n    'vuecal-header': header,\n    WeekdaysHeadings: weekdays_headings,\n    AllDayBar: all_day_bar\n  },\n  // By Vue design, passing props loses the reactivity unless it's a method or reactive OBJECT.\n  provide: function provide() {\n    return {\n      vuecal: this,\n      utils: this.utils,\n      modules: this.modules,\n      // Methods.\n      previous: this.previous,\n      next: this.next,\n      switchView: this.switchView,\n      updateSelectedDate: this.updateSelectedDate,\n      editEvents: this.editEvents,\n      // Objects.\n      view: this.view,\n      domEvents: this.domEvents\n    };\n  },\n  props: {\n    activeView: {\n      type: String,\n      default: 'week'\n    },\n    // Only used if there are daySplits with minSplitWidth, to add the same height top spacer on time column.\n    allDayBarHeight: {\n      type: [String, Number],\n      default: '25px'\n    },\n    cellClickHold: {\n      type: Boolean,\n      default: true\n    },\n    cellContextmenu: {\n      type: Boolean,\n      default: false\n    },\n    clickToNavigate: {\n      type: Boolean,\n      default: false\n    },\n    dblclickToNavigate: {\n      type: Boolean,\n      default: true\n    },\n    disableDatePrototypes: {\n      type: Boolean,\n      default: false\n    },\n    disableDays: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    disableViews: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dragToCreateEvent: {\n      type: Boolean,\n      default: true\n    },\n    // Start a drag creation after dragging a certain amount of pixels.\n    // This prevents drag creation by mistake when you want to navigate.\n    dragToCreateThreshold: {\n      type: Number,\n      default: 15\n    },\n    editableEvents: {\n      type: [Boolean, Object],\n      default: false\n    },\n    events: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    eventsCountOnYearView: {\n      type: Boolean,\n      default: false\n    },\n    eventsOnMonthView: {\n      type: [Boolean, String],\n      default: false\n    },\n    hideBody: {\n      type: Boolean,\n      default: false\n    },\n    hideTitleBar: {\n      type: Boolean,\n      default: false\n    },\n    hideViewSelector: {\n      type: Boolean,\n      default: false\n    },\n    hideWeekdays: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    hideWeekends: {\n      type: Boolean,\n      default: false\n    },\n    locale: {\n      type: [String, Object],\n      default: 'en'\n    },\n    maxDate: {\n      type: [String, Date],\n      default: ''\n    },\n    minCellWidth: {\n      type: Number,\n      default: 0\n    },\n    minDate: {\n      type: [String, Date],\n      default: ''\n    },\n    minEventWidth: {\n      type: Number,\n      default: 0\n    },\n    minSplitWidth: {\n      type: Number,\n      default: 0\n    },\n    onEventClick: {\n      type: [Function, null],\n      default: null\n    },\n    onEventCreate: {\n      type: [Function, null],\n      default: null\n    },\n    onEventDblclick: {\n      type: [Function, null],\n      default: null\n    },\n    overlapsPerTimeStep: {\n      type: Boolean,\n      default: false\n    },\n    resizeX: {\n      type: Boolean,\n      default: false\n    },\n    selectedDate: {\n      type: [String, Date],\n      default: ''\n    },\n    showAllDayEvents: {\n      type: [Boolean, String],\n      default: false\n    },\n    showWeekNumbers: {\n      type: [Boolean, String],\n      default: false\n    },\n    snapToTime: {\n      type: Number,\n      default: 0\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    specialHours: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    splitDays: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    startWeekOnSunday: {\n      type: Boolean,\n      default: false\n    },\n    stickySplitLabels: {\n      type: Boolean,\n      default: false\n    },\n    time: {\n      type: Boolean,\n      default: true\n    },\n    timeCellHeight: {\n      type: Number,\n      default: 40\n    },\n    // In pixels.\n    timeFormat: {\n      type: String,\n      default: ''\n    },\n    timeFrom: {\n      type: Number,\n      default: 0\n    },\n    // In minutes.\n    timeStep: {\n      type: Number,\n      default: 60\n    },\n    // In minutes.\n    timeTo: {\n      type: Number,\n      default: vue_calvue_type_script_lang_js_minutesInADay\n    },\n    // In minutes.\n    todayButton: {\n      type: Boolean,\n      default: false\n    },\n    transitions: {\n      type: Boolean,\n      default: true\n    },\n    twelveHour: {\n      type: Boolean,\n      default: false\n    },\n    watchRealTime: {\n      type: Boolean,\n      default: false\n    },\n    // Expensive, so only trigger on demand.\n    xsmall: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      ready: false,\n      // Is vue-cal ready.\n      // Make texts reactive before a locale is loaded.\n      texts: Object(objectSpread2[\"a\" /* default */])({}, textsDefaults),\n      utils: {\n        // Remove prototypes ASAP if the user wants so.\n        date: (this.disableDatePrototypes ? vue_calvue_type_script_lang_js_dateUtils.removePrototypes() : false) || vue_calvue_type_script_lang_js_dateUtils,\n        cell: null,\n        // Note: Destructuring class method loses the `this` context and Vue Cal becomes inaccessible\n        // from the event utils function. Don't do:\n        // const { eventInRange, createEventSegments } = this.utils.event\n        event: null\n      },\n      modules: {\n        dnd: null\n      },\n      cellsEl: null,\n      // At any time this object will be filled with current view, visible events and selected date.\n      view: {\n        id: '',\n        title: '',\n        startDate: null,\n        endDate: null,\n        firstCellDate: null,\n        lastCellDate: null,\n        selectedDate: null,\n        // All the events are stored in the mutableEvents array, but subset of visible ones are passed\n        // Into the current view for fast lookup and manipulation.\n        events: []\n      },\n      eventIdIncrement: 1,\n      // Internal unique id.\n      // Preset at now date on load, but updated every minute if watchRealTime,\n      // or updated at least on each cells rerender, in order to keep Today's date accurate.\n      now: new Date(),\n      // Useful when watchRealTime = true, 2 timeouts: 1 to snap to round minutes, then 1 every minute.\n      timeTickerIds: [null, null],\n      // All the possible events/cells interractions:\n      // e.g. focus, click, click & hold, resize, drag & drop (coming).\n      domEvents: {\n        resizeAnEvent: {\n          _eid: null,\n          // Only one at a time.\n          start: null,\n          split: null,\n          segment: null,\n          originalEndTimeMinutes: 0,\n          originalEnd: null,\n          end: null,\n          startCell: null,\n          endCell: null\n        },\n        dragAnEvent: {\n          // Only one at a time, only needed for vuecal dragging-event class.\n          _eid: null\n        },\n        dragCreateAnEvent: {\n          startCursorY: null,\n          start: null,\n          // The cell date where we start the drag.\n          split: null,\n          event: null\n        },\n        focusAnEvent: {\n          _eid: null,\n          // Only one at a time.\n          // Useful to detect a full click (mousedown + mouseup on same event).\n          // E.g. Only call onEventClick function (if any) on full click.\n          mousedUp: false\n        },\n        clickHoldAnEvent: {\n          _eid: null,\n          // Only one at a time.\n          timeout: 1200,\n          // Hold for 1.2s to delete an event.\n          timeoutId: null\n        },\n        dblTapACell: {\n          taps: 0,\n          timeout: 500 // Allowed latency between first and second click.\n\n        },\n        clickHoldACell: {\n          cellId: null,\n          split: null,\n          timeout: 1200,\n          // Hold for 1.2s to create an event.\n          timeoutId: null,\n          eventCreated: false\n        },\n        // A single click can trigger event creation if the user decides so.\n        // But prevent this to happen on click & hold, on event click and on resize event.\n        cancelClickEventCreation: false\n      },\n      // The events source of truth.\n      // An array of mutable events updated each time given external events array changes.\n      mutableEvents: [],\n      // Transition when switching view. left when going toward the past, right when going toward future.\n      transitionDirection: 'right'\n    };\n  },\n  methods: {\n    /**\n     * Only import locale on demand to keep a small library weight.\n     *\n     * @param {String|Object} locale the language user whishes to have on vue-cal.\n     */\n    loadLocale: function loadLocale(locale) {\n      var _this = this;\n\n      if (_typeof(this.locale) === 'object') {\n        this.texts = Object.assign({}, textsDefaults, locale);\n        this.utils.date.updateTexts(this.texts);\n        return;\n      }\n\n      if (this.locale === 'en') this.texts = Object.assign({}, textsDefaults, __nested_webpack_require_199304__(\"0a96\"));else {\n        // Template litteral `./i18n/${locale}` still crashes eslint...\n        // https://github.com/babel/babel-eslint/issues/681#issuecomment-595591823\n        __nested_webpack_require_199304__(\"4a53\")(\"./\" + locale).then(function (response) {\n          _this.texts = Object.assign({}, textsDefaults, response.default);\n\n          _this.utils.date.updateTexts(_this.texts);\n        });\n      }\n    },\n\n    /**\n     * Only import drag and drop module on demand to keep a small library weight.\n     */\n    loadDragAndDrop: function loadDragAndDrop() {\n      var _this2 = this;\n\n      __nested_webpack_require_199304__.e(/* import() | drag-and-drop */ 39).then(__nested_webpack_require_199304__.bind(null, \"a691f\")).then(function (response) {\n        var DragAndDrop = response.DragAndDrop;\n        _this2.modules.dnd = new DragAndDrop(_this2);\n      }) // eslint-disable-next-line no-console\n      .catch(function () {\n        return console.warn('Vue Cal: Missing drag & drop module.');\n      });\n    },\n\n    /**\n     * Checks that the given view is in the array of valid views or use 'week' otherwise.\n     * Then check the view is enabled or use the first enabled view instead.\n     * Raises error and warning if needed.\n     *\n     * @param {String} view The view to validate.\n     * @return {String} a valid view.\n     */\n    validateView: function validateView(view) {\n      if (!validViews.includes(view)) {\n        // eslint-disable-next-line no-console\n        console.error(\"Vue Cal: invalid active-view parameter provided: \\\"\".concat(view, \"\\\".\\nA valid view must be one of: \").concat(validViews.join(', '), \".\"));\n        view = 'week';\n      }\n\n      if (!this.enabledViews.includes(view)) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Vue Cal: the provided active-view \\\"\".concat(view, \"\\\" is disabled. Using the \\\"\").concat(this.enabledViews[0], \"\\\" view instead.\"));\n        view = this.enabledViews[0];\n      }\n\n      return view;\n    },\n\n    /**\n     * On click/dblclick of a cell go to a narrower view if available.\n     * E.g. Click on month cell takes you to week view if not hidden, otherwise on day view if not hidden.\n     *\n     * @param {String | Date} date A starting date for the view, if none, fallbacks to the selected date,\n     *                             If also empty fallbacks to the current view start date.\n     */\n    switchToNarrowerView: function switchToNarrowerView() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.transitionDirection = 'right';\n      var view = this.enabledViews[this.enabledViews.indexOf(this.view.id) + 1];\n      if (view) this.switchView(view, date);\n    },\n\n    /**\n     * Switches to the specified view on view selector click, or programmatically form external call (via $refs).\n     * If a date is given, it will be selected and if the view does not contain it, it will go to that date.\n     *\n     * @param {String} view the view to go to. Among `years`, `year`, `month`, `week`, `day`.\n     * @param {String | Date} date A starting date for the view, if none, fallbacks to the selected date,\n     *                             If also empty fallbacks to the current view start date.\n     * @param {Boolean} fromViewSelector to know if the caller is the built-in view selector.\n     */\n    switchView: function switchView(view) {\n      var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromViewSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      view = this.validateView(view);\n      var ud = this.utils.date; // This is user to prevent firing the custom event twice when syncing activeView.\n\n      var viewDateBeforeChange = this.view.startDate && this.view.startDate.getTime();\n\n      if (this.transitions && fromViewSelector) {\n        if (this.view.id === view) return;\n        var views = this.enabledViews;\n        this.transitionDirection = views.indexOf(this.view.id) > views.indexOf(view) ? 'left' : 'right';\n      }\n\n      var oldView = this.view.id;\n      this.view.events = [];\n      this.view.id = view;\n      this.view.firstCellDate = null; // For month view, if filling cells before 1st of month.\n\n      this.view.lastCellDate = null; // For month view, if filling cells after current month.\n\n      if (!date) date = this.view.selectedDate || this.view.startDate;\n\n      switch (view) {\n        case 'years':\n          {\n            // Always fill first cell with a multiple of 25 years, E.g. year 2000, or 2025.\n            this.view.startDate = new Date(Math.floor(date.getFullYear() / 25) * 25 || 2000, 0, 1);\n            this.view.endDate = new Date(this.view.startDate.getFullYear() + 25, 0, 1);\n            this.view.endDate.setSeconds(-1); // End at 23:59:59.\n\n            break;\n          }\n\n        case 'year':\n          {\n            this.view.startDate = new Date(date.getFullYear(), 0, 1);\n            this.view.endDate = new Date(date.getFullYear() + 1, 0, 1);\n            this.view.endDate.setSeconds(-1); // End at 23:59:59.\n\n            break;\n          }\n\n        case 'month':\n          {\n            this.view.startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n            this.view.endDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n            this.view.endDate.setSeconds(-1); // End at 23:59:59.\n            // If the first day of the month is not a FirstDayOfWeek (Monday or Sunday), prepend missing days to the days array.\n\n            var startDate = new Date(this.view.startDate);\n\n            if (startDate.getDay() !== (this.startWeekOnSunday ? 0 : 1)) {\n              startDate = ud.getPreviousFirstDayOfWeek(startDate, this.startWeekOnSunday);\n            } // Used in viewCells computed array & returned in emitted events.\n\n\n            this.view.firstCellDate = startDate;\n            this.view.lastCellDate = ud.addDays(startDate, 41);\n            this.view.lastCellDate.setHours(23, 59, 59, 0);\n\n            if (this.hideWeekends) {\n              // Remove first weekend from firstCellDate if hide-weekends.\n              if ([0, 6].includes(this.view.firstCellDate.getDay())) {\n                var daysToAdd = this.view.firstCellDate.getDay() === 6 && !this.startWeekOnSunday ? 2 : 1;\n                this.view.firstCellDate = ud.addDays(this.view.firstCellDate, daysToAdd);\n              } // Remove first weekend from startDate if hide-weekends.\n\n\n              if ([0, 6].includes(this.view.startDate.getDay())) {\n                var _daysToAdd = this.view.startDate.getDay() === 6 ? 2 : 1;\n\n                this.view.startDate = ud.addDays(this.view.startDate, _daysToAdd);\n              } // Remove last weekend from lastCellDate if hide-weekends.\n\n\n              if ([0, 6].includes(this.view.lastCellDate.getDay())) {\n                var daysToSubtract = this.view.lastCellDate.getDay() === 0 && !this.startWeekOnSunday ? 2 : 1;\n                this.view.lastCellDate = ud.subtractDays(this.view.lastCellDate, daysToSubtract);\n              } // Remove last weekend from endDate if hide-weekends.\n\n\n              if ([0, 6].includes(this.view.endDate.getDay())) {\n                var _daysToSubtract = this.view.endDate.getDay() === 0 ? 2 : 1;\n\n                this.view.endDate = ud.subtractDays(this.view.endDate, _daysToSubtract);\n              }\n            }\n\n            break;\n          }\n\n        case 'week':\n          {\n            date = ud.getPreviousFirstDayOfWeek(date, this.startWeekOnSunday);\n            var weekDaysCount = this.hideWeekends ? 5 : 7;\n            this.view.startDate = this.hideWeekends && this.startWeekOnSunday ? ud.addDays(date, 1) : date;\n            this.view.startDate.setHours(0, 0, 0, 0);\n            this.view.endDate = ud.addDays(date, weekDaysCount);\n            this.view.endDate.setSeconds(-1); // End at 23:59:59.\n\n            break;\n          }\n\n        case 'day':\n          {\n            this.view.startDate = date;\n            this.view.startDate.setHours(0, 0, 0, 0);\n            this.view.endDate = new Date(date);\n            this.view.endDate.setHours(23, 59, 59, 0); // End at 23:59:59.\n\n            break;\n          }\n      }\n\n      this.addEventsToView(); // Prevent firing the `view-change` event twice (if using .sync).\n\n      var viewDate = this.view.startDate && this.view.startDate.getTime();\n      if (oldView === view && viewDate === viewDateBeforeChange) return; // Emit events to outside of Vue Cal and update the activeView (if using .sync).\n\n      this.$emit('update:activeView', view);\n\n      if (this.ready) {\n        var _startDate = this.view.startDate;\n\n        var params = Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({\n          view: view,\n          startDate: _startDate,\n          endDate: this.view.endDate\n        }, this.isMonthView ? {\n          firstCellDate: this.view.firstCellDate,\n          lastCellDate: this.view.lastCellDate,\n          outOfScopeEvents: this.view.outOfScopeEvents.map(this.cleanupEvent)\n        } : {}), {}, {\n          events: this.view.events.map(this.cleanupEvent)\n        }, this.isWeekView ? {\n          week: ud.getWeek(this.startWeekOnSunday ? ud.addDays(_startDate, 1) : _startDate)\n        } : {});\n\n        this.$emit('view-change', params);\n      }\n    },\n\n    /**\n     * Shorthand function for external call (via $refs).\n     */\n    previous: function previous() {\n      this.previousNext(false);\n    },\n\n    /**\n     * Shorthand function for external call (via $refs).\n     */\n    next: function next() {\n      this.previousNext();\n    },\n\n    /**\n     * On click on previous or next arrow, update the calendar visible date range.\n     *\n     * @param {Boolean} next\n     */\n    previousNext: function previousNext() {\n      var next = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var ud = this.utils.date;\n      this.transitionDirection = next ? 'right' : 'left';\n      var modifier = next ? 1 : -1;\n      var firstCellDate = null;\n      var _this$view = this.view,\n          startDate = _this$view.startDate,\n          viewId = _this$view.id;\n\n      switch (viewId) {\n        case 'years':\n          firstCellDate = new Date(startDate.getFullYear() + 25 * modifier, 0, 1);\n          break;\n\n        case 'year':\n          firstCellDate = new Date(startDate.getFullYear() + 1 * modifier, 1, 1);\n          break;\n\n        case 'month':\n          firstCellDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1 * modifier, 1);\n          break;\n\n        case 'week':\n          firstCellDate = ud[next ? 'addDays' : 'subtractDays'](ud.getPreviousFirstDayOfWeek(startDate, this.startWeekOnSunday), 7);\n          break;\n\n        case 'day':\n          firstCellDate = ud[next ? 'addDays' : 'subtractDays'](startDate, 1);\n          break;\n      }\n\n      if (firstCellDate) this.switchView(viewId, firstCellDate);\n    },\n\n    /**\n     * Add events (subset from mutableEvents) to the current view (in `this.view.events`).\n     * This is done for performance, so that all the cells have a quick lookup of only what's needed.\n     *\n     * @param {Array} events\n     */\n    addEventsToView: function addEventsToView() {\n      var _this$view$events,\n          _this3 = this;\n\n      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var ue = this.utils.event;\n      var _this$view2 = this.view,\n          startDate = _this$view2.startDate,\n          endDate = _this$view2.endDate,\n          firstCellDate = _this$view2.firstCellDate,\n          lastCellDate = _this$view2.lastCellDate; // Clear the current view if not explicitely giving an array of events to add.\n\n      if (!events.length) this.view.events = []; // @todo: remove the code that explicitely updates this.mutableEvents (e.g on event resize).\n      // as we are already mutating the event from mutableEvents.\n\n      events = events.length ? events : _toConsumableArray(this.mutableEvents); // In no event or if on years/year view and eventsCountOnYearView is false\n      // then don't add events to view.\n\n      if (!events || this.isYearsOrYearView && !this.eventsCountOnYearView) return; // First remove the events that are not in view.\n      // Keep the unfiltered array of events for outOfScopeEvents bellow.\n\n      var filteredEvents = events.filter(function (e) {\n        return ue.eventInRange(e, startDate, endDate);\n      }); // For each multiple-day event and only if needed, create its segments (= days) for rendering in the view.\n      // If we don't display the event on month view (eventsOnMonthView = false) then don't create segments.\n\n      if (!this.isYearsOrYearView && !(this.isMonthView && !this.eventsOnMonthView)) {\n        filteredEvents = filteredEvents.map(function (e) {\n          return e.daysCount > 1 ? ue.createEventSegments(e, firstCellDate || startDate, lastCellDate || endDate) : e;\n        });\n      }\n\n      (_this$view$events = this.view.events).push.apply(_this$view$events, _toConsumableArray(filteredEvents));\n\n      if (this.isMonthView) {\n        // Save out of scope events into the view object separated from the array of in-scope events.\n        this.view.outOfScopeEvents = [];\n        events.forEach(function (e) {\n          if (ue.eventInRange(e, firstCellDate, startDate) || ue.eventInRange(e, endDate, lastCellDate)) {\n            // Only add events to the view.outOfScopeEvents array if not already in view.events\n            // (multiple-day events case).\n            if (!_this3.view.events.some(function (e2) {\n              return e2._eid === e._eid;\n            })) _this3.view.outOfScopeEvents.push(e);\n          }\n        });\n      }\n    },\n\n    /**\n     * find a DOM ancestor of a given DOM node `el` matching given class name.\n     *\n     * @param {Object} el a DOM node to find ancestor from.\n     * @param {String} Class the CSS class name of the ancestor.\n     * @return {Object} The matched DOM node or null if no match.\n     */\n    findAncestor: function findAncestor(el, Class) {\n      while ((el = el.parentElement) && !el.classList.contains(Class)) {}\n\n      return el;\n    },\n\n    /**\n     * Tells whether a clicked DOM node is or is within a calendar event.\n     *\n     * @param {Object} el a DOM node to check if event.\n     * @return {Boolean} true if the given DOM node is - or is in - an event.\n     */\n    isDOMElementAnEvent: function isDOMElementAnEvent(el) {\n      return el.classList.contains('vuecal__event') || this.findAncestor(el, 'vuecal__event');\n    },\n\n    /**\n     * Capture mousemove anywhere in the page.\n     * If resizing an event was started earlier, this will update event end.\n     * If resizing was not started, this method is calculation is avoided with a premature return.\n     * Notes: Event resizing is started in cell component (onMouseDown) but place onMouseMove & onMouseUp\n     *        handlers in the single-instance parent for performance.\n     *\n     * @param {Object} e the native DOM event object.\n     */\n    onMouseMove: function onMouseMove(e) {\n      var _this$domEvents = this.domEvents,\n          resizeAnEvent = _this$domEvents.resizeAnEvent,\n          dragAnEvent = _this$domEvents.dragAnEvent,\n          dragCreateAnEvent = _this$domEvents.dragCreateAnEvent;\n      if (resizeAnEvent._eid === null && dragAnEvent._eid === null && !dragCreateAnEvent.start) return;\n      e.preventDefault();\n      if (resizeAnEvent._eid) this.eventResizing(e);else if (this.dragToCreateEvent && dragCreateAnEvent.start) this.eventDragCreation(e);\n    },\n\n    /**\n     * Capture mouseup anywhere in the page, not only on a cell or event.\n     * Then end up any resize, drag & drop, click & hold or event or cell.\n     * Notes: Mouseup can never cancel a click with preventDefault or stopPropagation,\n     *        But it always happens before the click event.\n     *\n     * @param {Object} e the native DOM event object.\n     */\n    onMouseUp: function onMouseUp(e) {\n      var _this$domEvents2 = this.domEvents,\n          focusAnEvent = _this$domEvents2.focusAnEvent,\n          resizeAnEvent = _this$domEvents2.resizeAnEvent,\n          clickHoldAnEvent = _this$domEvents2.clickHoldAnEvent,\n          clickHoldACell = _this$domEvents2.clickHoldACell,\n          dragCreateAnEvent = _this$domEvents2.dragCreateAnEvent;\n      var isClickHoldingEvent = clickHoldAnEvent._eid;\n      var wasResizing = resizeAnEvent._eid;\n      var hasResized = false;\n      var dragCreatedEvent = dragCreateAnEvent.event,\n          dragCreateStarted = dragCreateAnEvent.start;\n      var mouseUpOnEvent = this.isDOMElementAnEvent(e.target);\n      var eventClicked = focusAnEvent.mousedUp; // If has mousedown & mouseup on the same event.\n\n      focusAnEvent.mousedUp = false; // Reinit the variable for next mouseup.\n\n      if (mouseUpOnEvent) this.domEvents.cancelClickEventCreation = true; // Skip the rest if an event was created successfully.\n\n      if (clickHoldACell.eventCreated) return; // On event resize end, emit event if duration has changed.\n\n      if (wasResizing) {\n        var originalEnd = resizeAnEvent.originalEnd,\n            originalEndTimeMinutes = resizeAnEvent.originalEndTimeMinutes,\n            endTimeMinutes = resizeAnEvent.endTimeMinutes;\n        var event = this.view.events.find(function (e) {\n          return e._eid === resizeAnEvent._eid;\n        }); // If end time is different than original, consider as resized.\n\n        hasResized = endTimeMinutes && endTimeMinutes !== originalEndTimeMinutes; // When resizing the endTime changes but the day may change too when resizing horizontally.\n        // So compare timestamps instead of only endTimeMinutes.\n\n        if (event && event.end.getTime() !== originalEnd.getTime()) {\n          // Update the modified event in the mutable events array.\n          var mutableEvent = this.mutableEvents.find(function (e) {\n            return e._eid === resizeAnEvent._eid;\n          });\n          mutableEvent.endTimeMinutes = event.endTimeMinutes;\n          mutableEvent.end = event.end;\n          var cleanEvent = this.cleanupEvent(event);\n\n          var originalEvent = Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, this.cleanupEvent(event)), {}, {\n            end: originalEnd,\n            endTimeMinutes: event.originalEndTimeMinutes\n          });\n\n          this.$emit('event-duration-change', {\n            event: cleanEvent,\n            oldDate: resizeAnEvent.originalEnd,\n            originalEvent: originalEvent\n          });\n          this.$emit('event-change', {\n            event: cleanEvent,\n            originalEvent: originalEvent\n          });\n        }\n\n        if (event) event.resizing = false;\n        resizeAnEvent._eid = null;\n        resizeAnEvent.start = null;\n        resizeAnEvent.split = null;\n        resizeAnEvent.segment = null;\n        resizeAnEvent.originalEndTimeMinutes = null;\n        resizeAnEvent.originalEnd = null;\n        resizeAnEvent.endTimeMinutes = null;\n        resizeAnEvent.startCell = null;\n        resizeAnEvent.endCell = null;\n      } else if (dragCreateStarted) {\n        // The drag create might be started but not completed due to threshold never reached.\n        if (dragCreatedEvent) {\n          this.emitWithEvent('event-drag-create', dragCreatedEvent);\n          dragCreateAnEvent.event.resizing = false; // Remove the CSS resizing class.\n        } // End the drag creation process.\n\n\n        dragCreateAnEvent.start = null;\n        dragCreateAnEvent.split = null;\n        dragCreateAnEvent.event = null;\n      } // If not mouse up on an event, unfocus any event except if just dragged.\n\n\n      if (!mouseUpOnEvent && !wasResizing) this.unfocusEvent(); // Prevent showing delete button if click and hold was not long enough.\n      // Click & hold timeout is initiated in onMouseDown() in event component.\n\n      if (clickHoldAnEvent.timeoutId && !isClickHoldingEvent) {\n        clearTimeout(clickHoldAnEvent.timeoutId);\n        clickHoldAnEvent.timeoutId = null;\n      } // Prevent creating an event if click and hold was not long enough.\n\n\n      if (clickHoldACell.timeoutId) {\n        clearTimeout(clickHoldACell.timeoutId);\n        clickHoldACell.timeoutId = null;\n      } // On event click (mousedown + mouseup on the same event), call the onEventClick function if exists\n      // and if not dragging handle or deleting event.\n\n\n      var eventClickHandler = typeof this.onEventClick === 'function';\n\n      if (eventClicked && !hasResized && !isClickHoldingEvent && !dragCreatedEvent && eventClickHandler) {\n        var _event = this.view.events.find(function (e) {\n          return e._eid === focusAnEvent._eid;\n        }); // If not found, the event may be in the outOfScope array.\n\n\n        if (!_event && this.isMonthView) _event = this.view.outOfScopeEvents.find(function (e) {\n          return e._eid === focusAnEvent._eid;\n        });\n        return _event && this.onEventClick(_event, e);\n      }\n    },\n\n    /**\n     * Capture `escape` keypress when delete button is visible, and cancel deletion.\n     *\n     * @param {Object} e the native DOM event object.\n     */\n    onKeyUp: function onKeyUp(e) {\n      if (e.keyCode === 27) this.cancelDelete(); // Escape key.\n    },\n\n    /**\n     * On mousemove while resising an event.\n     *\n     * @param {Object} e the native DOM event object.\n     */\n    eventResizing: function eventResizing(e) {\n      var resizeAnEvent = this.domEvents.resizeAnEvent;\n      var event = this.view.events.find(function (e) {\n        return e._eid === resizeAnEvent._eid;\n      }) || {\n        segments: {}\n      };\n\n      var _this$minutesAtCursor = this.minutesAtCursor(e),\n          minutes = _this$minutesAtCursor.minutes,\n          cursorCoords = _this$minutesAtCursor.cursorCoords;\n\n      var segment = event.segments && event.segments[resizeAnEvent.segment]; // Destructuring class method loses the `this` context.\n      // const { formatDateLite, countDays } = this.utils.date\n\n      var _this$utils = this.utils,\n          ud = _this$utils.date,\n          ue = _this$utils.event; // Prevent reducing event duration to less than 1 min so it does not disappear.\n\n      var newEndTimeMins = Math.max(minutes, this.timeFrom + 1, (segment || event).startTimeMinutes + 1);\n      event.endTimeMinutes = resizeAnEvent.endTimeMinutes = newEndTimeMins; // On resize, snap to time (e.g. 0, 15, 30, 45) if the option is on.\n\n      if (this.snapToTime) {\n        var plusHalfSnapTime = event.endTimeMinutes + this.snapToTime / 2;\n        event.endTimeMinutes = plusHalfSnapTime - plusHalfSnapTime % this.snapToTime;\n      }\n\n      if (segment) segment.endTimeMinutes = event.endTimeMinutes; // Remove 1 second if time is 24:00.\n\n      event.end.setHours(0, event.endTimeMinutes, event.endTimeMinutes === vue_calvue_type_script_lang_js_minutesInADay ? -1 : 0, 0); // Resize events horizontally if resize-x is enabled (add/remove segments).\n\n      if (this.resizeX && this.isWeekView) {\n        event.daysCount = ud.countDays(event.start, event.end);\n        var cells = this.cellsEl;\n        var cellWidth = cells.offsetWidth / cells.childElementCount;\n        var endCell = Math.floor(cursorCoords.x / cellWidth);\n        if (resizeAnEvent.startCell === null) resizeAnEvent.startCell = endCell - (event.daysCount - 1);\n\n        if (resizeAnEvent.endCell !== endCell) {\n          resizeAnEvent.endCell = endCell;\n          var newEnd = ud.addDays(event.start, endCell - resizeAnEvent.startCell); // Don't accept 0 and negative values.\n\n          var newDaysCount = Math.max(ud.countDays(event.start, newEnd), 1);\n\n          if (newDaysCount !== event.daysCount) {\n            // Check that all segments are up to date.\n            var lastSegmentFormattedDate = null;\n            if (newDaysCount > event.daysCount) lastSegmentFormattedDate = ue.addEventSegment(event);else lastSegmentFormattedDate = ue.removeEventSegment(event);\n            resizeAnEvent.segment = lastSegmentFormattedDate;\n            event.endTimeMinutes += 0.001; // Force updating the current event.\n          }\n        }\n      } // Emit event while resizing, so it has to be fast.\n\n\n      this.$emit('event-resizing', {\n        _eid: event._eid,\n        end: event.end,\n        endTimeMinutes: event.endTimeMinutes\n      });\n    },\n\n    /**\n     * On mousemove while dragging to create an event.\n     *\n     * @param {Object} e the native DOM event object.\n     */\n    eventDragCreation: function eventDragCreation(e) {\n      var dragCreateAnEvent = this.domEvents.dragCreateAnEvent;\n      var start = dragCreateAnEvent.start,\n          startCursorY = dragCreateAnEvent.startCursorY,\n          split = dragCreateAnEvent.split;\n      var timeAtCursor = new Date(start);\n\n      var _this$minutesAtCursor2 = this.minutesAtCursor(e),\n          minutes = _this$minutesAtCursor2.minutes,\n          y = _this$minutesAtCursor2.cursorCoords.y; // Don't show anything until the threshold is reached.\n\n\n      if (!dragCreateAnEvent.event && Math.abs(startCursorY - y) < this.dragToCreateThreshold) return; // Create an event once, on the first pixel move after threshold is reached.\n\n      if (!dragCreateAnEvent.event) {\n        // Start the event with a 1 min duration, this will change as we are dragging.\n        dragCreateAnEvent.event = this.utils.event.createAnEvent(start, 1, {\n          split: split\n        }); // The event creation can be cancelled if user has a onEventCreate function\n        // (called from createAnEvent()). If cancelled, cancel the dragCreation.\n\n        if (!dragCreateAnEvent.event) {\n          dragCreateAnEvent.start = null;\n          dragCreateAnEvent.split = null;\n          dragCreateAnEvent.event = null;\n          return;\n        }\n\n        dragCreateAnEvent.event.resizing = true; // Trigger the CSS class.\n      } // If the event already exists change its start and end.\n      else {\n          // Remove 1 second if time is 24:00.\n          timeAtCursor.setHours(0, minutes, minutes === vue_calvue_type_script_lang_js_minutesInADay ? -1 : 0, 0); // If snapToTime, set the `timeAtCursor` to the closest intervaled number.\n\n          if (this.snapToTime) {\n            var timeMinutes = timeAtCursor.getHours() * 60 + timeAtCursor.getMinutes();\n            var plusHalfSnapTime = timeMinutes + this.snapToTime / 2;\n            timeMinutes = plusHalfSnapTime - plusHalfSnapTime % this.snapToTime;\n            timeAtCursor.setHours(0, timeMinutes, 0, 0);\n          } // If dragging the bottom of the event.\n\n\n          var dragFromBottom = start < timeAtCursor;\n          var event = dragCreateAnEvent.event;\n          event.start = dragFromBottom ? start : timeAtCursor;\n          event.end = dragFromBottom ? timeAtCursor : start;\n          event.startTimeMinutes = event.start.getHours() * 60 + event.start.getMinutes();\n          event.endTimeMinutes = event.end.getHours() * 60 + event.end.getMinutes();\n        }\n    },\n\n    /**\n     * Unfocus an event (e.g. when clicking outside of focused event).\n     */\n    unfocusEvent: function unfocusEvent() {\n      var _this$domEvents3 = this.domEvents,\n          focusAnEvent = _this$domEvents3.focusAnEvent,\n          clickHoldAnEvent = _this$domEvents3.clickHoldAnEvent;\n      var event = this.view.events.find(function (e) {\n        return e._eid === (focusAnEvent._eid || clickHoldAnEvent._eid);\n      });\n      focusAnEvent._eid = null; // Cancel event focus.\n\n      clickHoldAnEvent._eid = null; // Hide delete button.\n\n      if (event) {\n        event.focused = false;\n        event.deleting = false;\n      }\n    },\n\n    /**\n     * Cancel an event deletion (e.g. when clicking outside of visible delete button).\n     */\n    cancelDelete: function cancelDelete() {\n      var clickHoldAnEvent = this.domEvents.clickHoldAnEvent;\n\n      if (clickHoldAnEvent._eid) {\n        var event = this.view.events.find(function (e) {\n          return e._eid === clickHoldAnEvent._eid;\n        });\n        if (event) event.deleting = false;\n        clickHoldAnEvent._eid = null;\n        clickHoldAnEvent.timeoutId = null;\n      }\n    },\n\n    /**\n     * After editing an event title (if `this.editable`), save the new string into the event object\n     * and emit event to the outside world.\n     *\n     * @param {Object} e the native DOM event object.\n     * @param {Object} event the vue-cal event object.\n     */\n    onEventTitleBlur: function onEventTitleBlur(e, event) {\n      // If no change cancel action.\n      if (event.title === e.target.innerHTML) return;\n      var oldTitle = event.title;\n      event.title = e.target.innerHTML;\n      var cleanEvent = this.cleanupEvent(event);\n      this.$emit('event-title-change', {\n        event: cleanEvent,\n        oldTitle: oldTitle\n      });\n      this.$emit('event-change', {\n        event: cleanEvent,\n        originalEvent: Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, cleanEvent), {}, {\n          title: oldTitle\n        })\n      });\n    },\n\n    /**\n     * The `mutableEvents` array of events is the source of truth.\n     * It is first populated from the `events` prop and every time the `events` prop changes.\n     * When the user updates an event through interractions, the event gets updated here.\n     * Notes: mutableEvents couldn't be a computed variable based on this.events, because we add\n     *        items to the array. (Cannot mutate props)\n     */\n    updateMutableEvents: function updateMutableEvents() {\n      var _this4 = this;\n\n      // Destructuring class method loses the `this` context.\n      // const { formatDateLite, stringToDate, dateToMinutes, countDays } = this.utils.date\n      var ud = this.utils.date;\n      this.mutableEvents = []; // For each event of the `events` prop, prepare the event for vue-cal:\n      // Populate missing keys: start, startDate, startTimeMinutes, end, endTimeMinutes, daysCount.\n      // Lots of these variables may look redundant but are here for performance as a cached result of calculation. :)\n\n      this.events.forEach(function (event) {\n        // `event.start` accepts a Date object, or a formatted string, but always convert to Date.\n        var start = typeof event.start === 'string' ? ud.stringToDate(event.start) : event.start;\n        var startDateF = ud.formatDateLite(start);\n        var startTimeMinutes = ud.dateToMinutes(start); // `event.end` accepts a Date object or a formatted string, but always convert to Date.\n\n        var end = null; // Safari does not convert new Date(YYYY-MM-DD 24:00) to a valid date. #340.\n\n        if (typeof event.end === 'string' && event.end.includes('24:00')) {\n          end = new Date(event.end.replace(' 24:00', ''));\n          end.setHours(23, 59, 59, 0); // Sets to the same day at 23.59.59.\n        } else end = typeof event.end === 'string' ? ud.stringToDate(event.end) : event.end;\n\n        var endDateF = ud.formatDateLite(end);\n        var endTimeMinutes = ud.dateToMinutes(end); // Correct the common practice to end at 00:00 or 24:00 to count a full day.\n\n        if (!endTimeMinutes || endTimeMinutes === vue_calvue_type_script_lang_js_minutesInADay) {\n          // This also applies on timeless events, all-day events & multiple-day events.\n          if (!_this4.time || typeof event.end === 'string' && event.end.length === 10) {\n            end.setHours(23, 59, 59, 0); // Sets to the same day at 23.59.59.\n          } else end.setSeconds(end.getSeconds() - 1); // Sets to the previous day at 23.59.59.\n\n\n          endDateF = ud.formatDateLite(end);\n          endTimeMinutes = vue_calvue_type_script_lang_js_minutesInADay;\n        }\n\n        var multipleDays = startDateF !== endDateF;\n        event = Object.assign(Object(objectSpread2[\"a\" /* default */])({}, _this4.utils.event.eventDefaults), event, {\n          // Keep the event ids scoped to this calendar instance.\n          _eid: \"\".concat(_this4._.uid, \"_\").concat(_this4.eventIdIncrement++),\n          segments: multipleDays ? {} : null,\n          start: start,\n          startTimeMinutes: startTimeMinutes,\n          end: end,\n          endTimeMinutes: endTimeMinutes,\n          daysCount: multipleDays ? ud.countDays(start, end) : 1,\n          class: event.class\n        });\n\n        _this4.mutableEvents.push(event);\n      });\n    },\n\n    /**\n     * Get the number of minutes from the top to the mouse cursor.\n     *\n     * @param {Object} e the native DOM event object.\n     * @return {Object} containing { minutes: {Number}, cursorCoords: { x: {Number}, y: {Number} } }\n     */\n    minutesAtCursor: function minutesAtCursor(e) {\n      return this.utils.cell.minutesAtCursor(e);\n    },\n\n    /**\n     * Creates a new event in vue-cal memory (in the mutableEvents array) starting at the given date & time.\n     * Proxy method to allow call from cell click & hold or external call (via $refs).\n     * Notes: Event duration is by default 2 hours. You can override the event end through eventOptions.\n     *\n     * @param {String | Date} dateTime date & time at which the event will start.\n     * @param {Number} duration the event duration in minutes.\n     * @param {Object} eventOptions an object of options to override the event creation defaults.\n     *                              (can be any key allowed in an event object)\n     * @return {Object} the created event.\n     */\n    createEvent: function createEvent(dateTime, duration) {\n      var eventOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.utils.event.createAnEvent(dateTime, duration, eventOptions);\n    },\n\n    /**\n     * Remove all the vue-cal private vars from the event (before returning it through $emit()).\n     *\n     * @param {Object} event the event object to cleanup.\n     */\n    cleanupEvent: function cleanupEvent(event) {\n      event = Object(objectSpread2[\"a\" /* default */])({}, event); // Delete vue-cal specific props instead of returning a set of props so user\n      // can place whatever they want inside an event and see it returned.\n\n      var discardProps = ['segments', 'deletable', 'deleting', 'titleEditable', 'resizable', 'resizing', 'draggable', 'dragging', 'draggingStatic', 'focused'];\n      discardProps.forEach(function (prop) {\n        if (prop in event) delete event[prop];\n      });\n      if (!event.repeat) delete event.repeat; // If empty we don't need it.\n\n      return event;\n    },\n\n    /**\n     * Emits an event (custom DOM event) to the outside world.\n     * This event has an event name and a clean calendar event as a parameter.\n     *\n     * @param {String} eventName the name of the custom emitted event (e.g. `event-focus`).\n     * @param {Object} event the event to return to the outside world.\n     */\n    emitWithEvent: function emitWithEvent(eventName, event) {\n      this.$emit(eventName, this.cleanupEvent(event));\n    },\n\n    /**\n     * Update the selected date:\n     * - on created, from given selectedDate prop\n     * - on click/dblClick of another cell\n     * - from external call (via $refs)\n     * - when the given selectedDate prop changes.\n     * If date is not in the view, the view will change to show it.\n     *\n     * @param {String | Date} date The date to select.\n     */\n    updateSelectedDate: function updateSelectedDate(date) {\n      if (date && typeof date === 'string') date = this.utils.date.stringToDate(date);else date = new Date(date); // Clone to keep original untouched.\n\n      if (date && date instanceof Date) {\n        var selectedDate = this.view.selectedDate;\n        if (selectedDate) this.transitionDirection = selectedDate.getTime() > date.getTime() ? 'left' : 'right'; // Select the day at midnight in order to allow fetching events on whole day.\n        // Setting milliseconds to 0 is critical as well for timestamp comparison.\n\n        date.setHours(0, 0, 0, 0);\n        if (!selectedDate || selectedDate.getTime() !== date.getTime()) this.view.selectedDate = date;\n        this.switchView(this.view.id);\n      }\n    },\n\n    /**\n     * Double checks the week number is correct. Read bellow to understand!\n     * this is a wrapper around the `getWeek()` function for performance:\n     * As this is called multiple times from the template and cannot be in computed since there is\n     * a parameter, this wrapper function avoids the `getWeek()` function call 5 times out of 6\n     * using the computed `firstCellDateWeekNumber`.\n     *\n     * Reason why:\n     * Getting the week number is not that straightforward as there might be a 53rd week in the year.\n     * Whenever the year starts on a Thursday or any leap year starting on a Wednesday, this week will be 53.\n     *\n     * @param {Number} weekFromFirstCell Number from 0 to 6.\n     */\n    getWeekNumber: function getWeekNumber(weekFromFirstCell) {\n      var ud = this.utils.date;\n      var firstCellWeekNumber = this.firstCellDateWeekNumber;\n      var currentWeekNumber = firstCellWeekNumber + weekFromFirstCell;\n      var modifier = this.startWeekOnSunday ? 1 : 0;\n\n      if (currentWeekNumber > 52) {\n        return ud.getWeek(ud.addDays(this.view.firstCellDate, 7 * weekFromFirstCell + modifier));\n      } else return currentWeekNumber;\n    },\n\n    /**\n     * Only if watchRealTime is true.\n     * Pull the current time from user machine every minute to keep vue-cal accurate even when idle.\n     * This will redraw the now line every minute and ensure that Today's date is always accurate.\n     */\n    timeTick: function timeTick() {\n      // Updating `now` will re-trigger the computed `todaysTimePosition` in cell.vue.\n      this.now = new Date();\n      this.timeTickerIds[1] = setTimeout(this.timeTick, 60 * 1000); // Every minute.\n    },\n\n    /**\n     * Updates the localized texts in use in the Date prototypes. (E.g. new Date().format())\n     * Callable from outside of Vue Cal.\n     */\n    updateDateTexts: function updateDateTexts() {\n      this.utils.date.updateTexts(this.texts);\n    },\n\n    /**\n     * On Windows devices, the .vuecal__bg's vertical scrollbar takes space and pushes the content.\n     * This function will also push the weekdays-headings and all-day bar to have them properly aligned.\n     * The calculated style will be placed in the docment head in a style tag so it's only done once\n     * (the scrollbar width never changes).\n     * Ref. https://github.com/antoniandre/vue-cal/issues/221\n     */\n    alignWithScrollbar: function alignWithScrollbar() {\n      // If already done from another instance, exit.\n      if (document.getElementById('vuecal-align-with-scrollbar')) return;\n      var bg = this.$refs.vuecal.getElementsByClassName('vuecal__scrollbar-check')[0];\n      var scrollbarWidth = bg.offsetWidth - bg.children[0].offsetWidth; // Only add a style tag once and if a scrollbar width is detected.\n\n      if (scrollbarWidth) {\n        var style = document.createElement('style');\n        style.id = 'vuecal-align-with-scrollbar';\n        style.type = 'text/css';\n        style.innerHTML = \".vuecal__weekdays-headings,.vuecal__all-day {padding-right: \".concat(scrollbarWidth, \"px}\");\n        document.head.appendChild(style);\n      }\n    },\n\n    /**\n     * Tells wether there are events in the given cell or split and returns a Boolean.\n     * This function simplifies the template.\n     *\n     * @param {Array} events The cell events.\n     * @param {Object|Boolean} split The current split object if any or false.\n     * @return {Boolean} true if there are events, false otherwise.\n     */\n    cellOrSplitHasEvents: function cellOrSplitHasEvents(events) {\n      var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return events.length && (!split && events.length || split && events.some(function (e) {\n        return e.split === split.id;\n      }));\n    }\n  },\n  created: function created() {\n    this.utils.cell = new cell_CellUtils(this);\n    this.utils.event = new event_EventUtils(this, this.utils.date);\n    this.loadLocale(this.locale);\n    if (this.editEvents.drag) this.loadDragAndDrop(); // Init the array of events, then keep listening for changes in watcher.\n\n    this.updateMutableEvents(this.events);\n    this.view.id = this.currentView;\n    if (this.selectedDate) this.updateSelectedDate(this.selectedDate);else {\n      this.view.selectedDate = new Date();\n      this.switchView(this.currentView);\n    } // Timers are expensive, this should only trigger on demand.\n\n    if (this.time && this.watchRealTime) {\n      // Snap the time ticker on sharp minutes (when seconds = 0), so that we can set\n      // the time ticker interval to 60 seconds and spare some function calls.\n      this.timeTickerIds[0] = setTimeout(this.timeTick, (60 - this.now.getSeconds()) * 1000);\n    }\n  },\n  mounted: function mounted() {\n    var ud = this.utils.date;\n    var hasTouch = ('ontouchstart' in window);\n    var _this$editEvents = this.editEvents,\n        resize = _this$editEvents.resize,\n        drag = _this$editEvents.drag,\n        create = _this$editEvents.create,\n        deletable = _this$editEvents.delete,\n        title = _this$editEvents.title;\n    var hasEventClickHandler = this.onEventClick && typeof this.onEventClick === 'function'; // If event is editable in any way add a mouseup event handler.\n\n    if (resize || drag || create || deletable || title || hasEventClickHandler) {\n      window.addEventListener(hasTouch ? 'touchend' : 'mouseup', this.onMouseUp);\n    }\n\n    if (resize || drag || create && this.dragToCreateEvent) {\n      window.addEventListener(hasTouch ? 'touchmove' : 'mousemove', this.onMouseMove, {\n        passive: false\n      });\n    }\n\n    if (title) window.addEventListener('keyup', this.onKeyUp); // Disable context menu on touch devices on the whole vue-cal instance.\n\n    if (hasTouch) {\n      this.$refs.vuecal.oncontextmenu = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n      };\n    } // https://github.com/antoniandre/vue-cal/issues/221\n\n\n    if (!this.hideBody) this.alignWithScrollbar(); // Emit the `ready` event with useful parameters.\n\n    var startDate = this.view.startDate;\n\n    var params = Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({\n      view: this.view.id,\n      startDate: startDate,\n      endDate: this.view.endDate\n    }, this.isMonthView ? {\n      firstCellDate: this.view.firstCellDate,\n      lastCellDate: this.view.lastCellDate\n    } : {}), {}, {\n      events: this.view.events.map(this.cleanupEvent)\n    }, this.isWeekView ? {\n      week: ud.getWeek(this.startWeekOnSunday ? ud.addDays(startDate, 1) : startDate)\n    } : {});\n\n    this.$emit('ready', params);\n    this.ready = true;\n  },\n  beforeUnmount: function beforeUnmount() {\n    var hasTouch = ('ontouchstart' in window);\n    window.removeEventListener(hasTouch ? 'touchmove' : 'mousemove', this.onMouseMove, {\n      passive: false\n    });\n    window.removeEventListener(hasTouch ? 'touchend' : 'mouseup', this.onMouseUp);\n    window.removeEventListener('keyup', this.onKeyUp); // Don't keep the ticking running if unused.\n\n    if (this.timeTickerIds[0]) clearTimeout(this.timeTickerIds[0]);\n    if (this.timeTickerIds[1]) clearTimeout(this.timeTickerIds[1]);\n    this.timeTickerIds = [null, null];\n  },\n  computed: {\n    editEvents: function editEvents() {\n      if (this.editableEvents && _typeof(this.editableEvents) === 'object') {\n        return {\n          title: !!this.editableEvents.title,\n          drag: !!this.editableEvents.drag,\n          resize: !!this.editableEvents.resize,\n          create: !!this.editableEvents.create,\n          delete: !!this.editableEvents.delete\n        };\n      }\n\n      return {\n        title: !!this.editableEvents,\n        drag: !!this.editableEvents,\n        resize: !!this.editableEvents,\n        create: !!this.editableEvents,\n        delete: !!this.editableEvents\n      };\n    },\n    views: function views() {\n      return {\n        years: {\n          label: this.texts.years,\n          enabled: !this.disableViews.includes('years')\n        },\n        year: {\n          label: this.texts.year,\n          enabled: !this.disableViews.includes('year')\n        },\n        month: {\n          label: this.texts.month,\n          enabled: !this.disableViews.includes('month')\n        },\n        week: {\n          label: this.texts.week,\n          enabled: !this.disableViews.includes('week')\n        },\n        day: {\n          label: this.texts.day,\n          enabled: !this.disableViews.includes('day')\n        }\n      };\n    },\n    currentView: function currentView() {\n      return this.validateView(this.activeView);\n    },\n    enabledViews: function enabledViews() {\n      var _this5 = this;\n\n      return Object.keys(this.views).filter(function (view) {\n        return _this5.views[view].enabled;\n      });\n    },\n    hasTimeColumn: function hasTimeColumn() {\n      return this.time && this.isWeekOrDayView;\n    },\n    isShortMonthView: function isShortMonthView() {\n      return this.isMonthView && this.eventsOnMonthView === 'short';\n    },\n    firstCellDateWeekNumber: function firstCellDateWeekNumber() {\n      var ud = this.utils.date;\n      var date = this.view.firstCellDate;\n      return ud.getWeek(this.startWeekOnSunday ? ud.addDays(date, 1) : date);\n    },\n    // For week & day views.\n    timeCells: function timeCells() {\n      var timeCells = [];\n\n      for (var i = this.timeFrom, max = this.timeTo; i < max; i += this.timeStep) {\n        timeCells.push({\n          hours: Math.floor(i / 60),\n          minutes: i % 60,\n          label: this.utils.date.formatTime(i, this.TimeFormat),\n          // The texts (3rd param) are given on Vue Cal init.\n          value: i\n        });\n      }\n\n      return timeCells;\n    },\n    TimeFormat: function TimeFormat() {\n      return this.timeFormat || (this.twelveHour ? 'h:mm{am}' : 'HH:mm');\n    },\n    // Filter out the day splits that are hidden.\n    daySplits: function daySplits() {\n      return (this.splitDays.filter(function (item) {\n        return !item.hide;\n      }) || []).map(function (item, i) {\n        return Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({}, item), {}, {\n          id: item.id || i + 1\n        });\n      }) // Make sure there's always an id.\n      ;\n    },\n    // Whether the current view has days splits.\n    hasSplits: function hasSplits() {\n      return this.daySplits.length && this.isWeekOrDayView;\n    },\n    hasShortEvents: function hasShortEvents() {\n      return this.showAllDayEvents === 'short';\n    },\n    // Returns the min cell width or the min split width if any.\n    cellOrSplitMinWidth: function cellOrSplitMinWidth() {\n      var minWidth = null;\n      if (this.hasSplits && this.minSplitWidth) minWidth = this.visibleDaysCount * this.minSplitWidth * this.daySplits.length;else if (this.minCellWidth && this.isWeekView) minWidth = this.visibleDaysCount * this.minCellWidth;\n      return minWidth;\n    },\n    allDayBar: function allDayBar() {\n      var height = this.allDayBarHeight || null;\n      if (height && !isNaN(height)) height += 'px';\n      return {\n        cells: this.viewCells,\n        options: this.$props,\n        label: this.texts.allDay,\n        shortEvents: this.hasShortEvents,\n        daySplits: this.hasSplits && this.daySplits || [],\n        cellOrSplitMinWidth: this.cellOrSplitMinWidth,\n        height: height\n      };\n    },\n    minTimestamp: function minTimestamp() {\n      var date = null;\n      if (this.minDate && typeof this.minDate === 'string') date = this.utils.date.stringToDate(this.minDate);else if (this.minDate && this.minDate instanceof Date) date = this.minDate;\n      return date ? date.getTime() : null;\n    },\n    maxTimestamp: function maxTimestamp() {\n      var date = null;\n      if (this.maxDate && typeof this.maxDate === 'string') date = this.utils.date.stringToDate(this.maxDate);else if (this.maxDate && this.minDate instanceof Date) date = this.maxDate;\n      return date ? date.getTime() : null;\n    },\n    weekDays: function weekDays() {\n      var _this6 = this;\n\n      var _this$texts = this.texts,\n          weekDays = _this$texts.weekDays,\n          _this$texts$weekDaysS = _this$texts.weekDaysShort,\n          weekDaysShort = _this$texts$weekDaysS === void 0 ? [] : _this$texts$weekDaysS; // Do not modify original for next instances.\n\n      weekDays = weekDays.slice(0).map(function (day, i) {\n        return Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({\n          label: day\n        }, weekDaysShort.length ? {\n          short: weekDaysShort[i]\n        } : {}), {}, {\n          hide: _this6.hideWeekends && i >= 5 || _this6.hideWeekdays.length && _this6.hideWeekdays.includes(i + 1)\n        });\n      });\n      if (this.startWeekOnSunday) weekDays.unshift(weekDays.pop());\n      return weekDays;\n    },\n    weekDaysInHeader: function weekDaysInHeader() {\n      return this.isMonthView || // hasSplits check is important here in case the user toggles the splits but keep minSplitWidth.\n      this.isWeekView && !this.minCellWidth && !(this.hasSplits && this.minSplitWidth);\n    },\n    months: function months() {\n      return this.texts.months.map(function (month) {\n        return {\n          label: month\n        };\n      });\n    },\n    // Validate and fill up the special hours object once for all at root level and not in cell.\n    specialDayHours: function specialDayHours() {\n      var _this7 = this;\n\n      if (!this.specialHours || !Object.keys(this.specialHours).length) return {};\n      return Array(7).fill('').map(function (cell, i) {\n        var day = _this7.specialHours[i + 1] || [];\n        if (!Array.isArray(day)) day = [day];\n        cell = [];\n        day.forEach(function (_ref, j) {\n          var from = _ref.from,\n              to = _ref.to,\n              Class = _ref.class;\n          cell[j] = {\n            day: i + 1,\n            from: ![null, undefined].includes(from) ? from * 1 : null,\n            to: ![null, undefined].includes(to) ? to * 1 : null,\n            class: Class || ''\n          };\n        });\n        return cell;\n      });\n    },\n    viewTitle: function viewTitle() {\n      var ud = this.utils.date;\n      var title = '';\n      var date = this.view.startDate;\n      var year = date.getFullYear();\n      var month = date.getMonth();\n\n      switch (this.view.id) {\n        case 'years':\n          {\n            title = this.texts.years;\n            break;\n          }\n\n        case 'year':\n          {\n            title = year;\n            break;\n          }\n\n        case 'month':\n          {\n            title = \"\".concat(this.months[month].label, \" \").concat(year);\n            break;\n          }\n\n        case 'week':\n          {\n            var lastDayOfWeek = this.view.endDate; // Might be another day than Sunday, if hiding days.\n\n            var y1 = date.getFullYear();\n            var m1 = this.texts.months[date.getMonth()];\n            if (this.xsmall) m1 = m1.substring(0, 3);\n            var formattedMonthYear = \"\".concat(m1, \" \").concat(y1); // If week is not ending in the same month it started in.\n\n            if (lastDayOfWeek.getMonth() !== date.getMonth()) {\n              var y2 = lastDayOfWeek.getFullYear();\n              var m2 = this.texts.months[lastDayOfWeek.getMonth()];\n              if (this.xsmall) m2 = m2.substring(0, 3);\n              if (y1 === y2) formattedMonthYear = \"\".concat(m1, \" - \").concat(m2, \" \").concat(y1);else {\n                if (this.small) formattedMonthYear = \"\".concat(m1.substring(0, 3), \" \").concat(y1, \" - \").concat(m2.substring(0, 3), \" \").concat(y2);else formattedMonthYear = \"\".concat(m1, \" \").concat(y1, \" - \").concat(m2, \" \").concat(y2);\n              }\n            }\n\n            title = \"\".concat(this.texts.week, \" \").concat(ud.getWeek(this.startWeekOnSunday ? ud.addDays(date, 1) : date), \" (\").concat(formattedMonthYear, \")\");\n            break;\n          }\n\n        case 'day':\n          {\n            title = this.utils.date.formatDate(date, this.texts.dateFormat, this.texts);\n            break;\n          }\n      }\n\n      return title;\n    },\n    viewCells: function viewCells() {\n      var _this8 = this;\n\n      var ud = this.utils.date;\n      var cells = [];\n      var fromYear = null;\n      var todayFound = false; // If watchRealTime = true, a time ticker will keep updating this.now every minute.\n      // If watchRealTime = false - and by default - update this.now value each time we rerender the cells\n      // so we keep Today's date always accurate at a minimum cost and maximum performance.\n      // eslint-disable-next-line\n\n      if (!this.watchRealTime) this.now = new Date();\n      var now = this.now;\n\n      switch (this.view.id) {\n        case 'years':\n          {\n            fromYear = this.view.startDate.getFullYear();\n            cells = Array.apply(null, Array(25)).map(function (cell, i) {\n              var startDate = new Date(fromYear + i, 0, 1);\n              var endDate = new Date(fromYear + i + 1, 0, 1);\n              endDate.setSeconds(-1); // End at 23:59:59.\n\n              return {\n                startDate: startDate,\n                formattedDate: ud.formatDateLite(startDate),\n                endDate: endDate,\n                content: fromYear + i,\n                current: fromYear + i === now.getFullYear()\n              };\n            });\n            break;\n          }\n\n        case 'year':\n          {\n            fromYear = this.view.startDate.getFullYear();\n            cells = Array.apply(null, Array(12)).map(function (cell, i) {\n              var startDate = new Date(fromYear, i, 1);\n              var endDate = new Date(fromYear, i + 1, 1);\n              endDate.setSeconds(-1); // End at 23:59:59.\n\n              return {\n                startDate: startDate,\n                formattedDate: ud.formatDateLite(startDate),\n                endDate: endDate,\n                content: _this8.xsmall ? _this8.months[i].label.substr(0, 3) : _this8.months[i].label,\n                current: i === now.getMonth() && fromYear === now.getFullYear()\n              };\n            });\n            break;\n          }\n\n        case 'month':\n          {\n            var month = this.view.startDate.getMonth();\n            var firstCellDate = new Date(this.view.firstCellDate);\n            todayFound = false; // Create 42 cells (6 rows x 7 days) and populate them with days.\n\n            cells = Array.apply(null, Array(42)).map(function (cell, i) {\n              var startDate = ud.addDays(firstCellDate, i);\n              var endDate = new Date(startDate);\n              endDate.setHours(23, 59, 59, 0); // End at 23:59:59.\n              // To increase performance skip checking isToday if today already found.\n\n              var isToday = !todayFound && ud.isToday(startDate) && !todayFound++;\n              return {\n                startDate: startDate,\n                formattedDate: ud.formatDateLite(startDate),\n                endDate: endDate,\n                content: startDate.getDate(),\n                today: isToday,\n                outOfScope: startDate.getMonth() !== month,\n                class: \"vuecal__cell--day\".concat(startDate.getDay() || 7)\n              };\n            });\n\n            if (this.hideWeekends || this.hideWeekdays.length) {\n              cells = cells.filter(function (cell) {\n                var day = cell.startDate.getDay() || 7; // Put Sunday at position 7 instead of 0.\n\n                return !(_this8.hideWeekends && day >= 6 || _this8.hideWeekdays.length && _this8.hideWeekdays.includes(day));\n              });\n            }\n\n            break;\n          }\n\n        case 'week':\n          {\n            todayFound = false;\n            var firstDayOfWeek = this.view.startDate;\n            var weekDays = this.weekDays;\n            cells = weekDays.map(function (cell, i) {\n              var startDate = ud.addDays(firstDayOfWeek, i);\n              var endDate = new Date(startDate);\n              endDate.setHours(23, 59, 59, 0); // End at 23:59:59.\n\n              var dayOfWeek = (startDate.getDay() || 7) - 1; // Day of the week from 0 to 6 with 6 = Sunday.\n\n              return {\n                startDate: startDate,\n                formattedDate: ud.formatDateLite(startDate),\n                endDate: endDate,\n                // To increase performance skip checking isToday if today already found.\n                today: !todayFound && ud.isToday(startDate) && !todayFound++,\n                specialHours: _this8.specialDayHours[dayOfWeek] || []\n              };\n            }).filter(function (cell, i) {\n              return !weekDays[i].hide;\n            });\n            break;\n          }\n\n        case 'day':\n          {\n            var startDate = this.view.startDate;\n            var endDate = new Date(this.view.startDate);\n            endDate.setHours(23, 59, 59, 0); // End at 23:59:59.\n\n            var dayOfWeek = (startDate.getDay() || 7) - 1; // Day of the week from 0 to 6 with 6 = Sunday.\n\n            cells = [{\n              startDate: startDate,\n              formattedDate: ud.formatDateLite(startDate),\n              endDate: endDate,\n              today: ud.isToday(startDate),\n              specialHours: this.specialDayHours[dayOfWeek] || []\n            }];\n            break;\n          }\n      }\n\n      return cells;\n    },\n    // Only when hiding weekdays on month and week views.\n    visibleDaysCount: function visibleDaysCount() {\n      if (this.isDayView) return 1;\n      return 7 - this.weekDays.reduce(function (total, day) {\n        return total + day.hide;\n      }, 0);\n    },\n    cellWidth: function cellWidth() {\n      return 100 / this.visibleDaysCount;\n    },\n    cssClasses: function cssClasses() {\n      var _ref2;\n\n      var _this$domEvents4 = this.domEvents,\n          resizeAnEvent = _this$domEvents4.resizeAnEvent,\n          dragAnEvent = _this$domEvents4.dragAnEvent,\n          dragCreateAnEvent = _this$domEvents4.dragCreateAnEvent;\n      return _ref2 = {}, Object(defineProperty[\"a\" /* default */])(_ref2, \"vuecal--\".concat(this.view.id, \"-view\"), true), Object(defineProperty[\"a\" /* default */])(_ref2, \"vuecal--\".concat(this.locale), this.locale), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--no-time', !this.time), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--view-with-time', this.hasTimeColumn), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--week-numbers', this.showWeekNumbers && this.isMonthView), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--twelve-hour', this.twelveHour), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--click-to-navigate', this.clickToNavigate), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--hide-weekends', this.hideWeekends), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--split-days', this.hasSplits), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--sticky-split-labels', this.hasSplits && this.stickySplitLabels), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--overflow-x', this.minCellWidth && this.isWeekView || this.hasSplits && this.minSplitWidth), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--small', this.small), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--xsmall', this.xsmall), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--resizing-event', resizeAnEvent._eid), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--drag-creating-event', dragCreateAnEvent.event), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--dragging-event', dragAnEvent._eid), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--events-on-month-view', this.eventsOnMonthView), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--short-events', this.isMonthView && this.eventsOnMonthView === 'short'), Object(defineProperty[\"a\" /* default */])(_ref2, 'vuecal--has-touch', typeof window !== 'undefined' && 'ontouchstart' in window), _ref2;\n    },\n    isYearsOrYearView: function isYearsOrYearView() {\n      return ['years', 'year'].includes(this.view.id);\n    },\n    isYearsView: function isYearsView() {\n      return this.view.id === 'years';\n    },\n    isYearView: function isYearView() {\n      return this.view.id === 'year';\n    },\n    isMonthView: function isMonthView() {\n      return this.view.id === 'month';\n    },\n    isWeekOrDayView: function isWeekOrDayView() {\n      return ['week', 'day'].includes(this.view.id);\n    },\n    isWeekView: function isWeekView() {\n      return this.view.id === 'week';\n    },\n    isDayView: function isDayView() {\n      return this.view.id === 'day';\n    }\n  },\n  watch: {\n    events: {\n      // To be able to detect an event attribute change, it has to be first initialized with a value.\n      handler: function handler(events, oldEvents) {\n        this.updateMutableEvents(events);\n        this.addEventsToView();\n      },\n      deep: true\n    },\n    locale: function locale(_locale) {\n      this.loadLocale(_locale);\n    },\n    selectedDate: function selectedDate(date) {\n      this.updateSelectedDate(date);\n    },\n    activeView: function activeView(newVal) {\n      this.switchView(newVal);\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/vue-cal/index.vue?vue&type=script&lang=js\n \n// CONCATENATED MODULE: ./src/vue-cal/index.vue\n\n\n\nvue_calvue_type_script_lang_js.render = render\n\n/* harmony default export */ var vue_cal = (vue_calvue_type_script_lang_js);\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js\n\n\n/* harmony default export */ var entry_lib = __webpack_exports__[\"default\"] = (vue_cal);\n\n\n\n/***/ }),\n\n/***/ \"fb6a\":\n/***/ (function(module, exports, __nested_webpack_require_425129__) {\n\n\"use strict\";\n\nvar $ = __nested_webpack_require_425129__(\"23e7\");\nvar isObject = __nested_webpack_require_425129__(\"861d\");\nvar isArray = __nested_webpack_require_425129__(\"e8b5\");\nvar toAbsoluteIndex = __nested_webpack_require_425129__(\"23cb\");\nvar toLength = __nested_webpack_require_425129__(\"50c4\");\nvar toIndexedObject = __nested_webpack_require_425129__(\"fc6a\");\nvar createProperty = __nested_webpack_require_425129__(\"8418\");\nvar wellKnownSymbol = __nested_webpack_require_425129__(\"b622\");\nvar arrayMethodHasSpeciesSupport = __nested_webpack_require_425129__(\"1dde\");\nvar arrayMethodUsesToLength = __nested_webpack_require_425129__(\"ae40\");\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"fc6a\":\n/***/ (function(module, exports, __nested_webpack_require_427271__) {\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = __nested_webpack_require_427271__(\"44ad\");\nvar requireObjectCoercible = __nested_webpack_require_427271__(\"1d80\");\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n\n\n/***/ }),\n\n/***/ \"fdbc\":\n/***/ (function(module, exports) {\n\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n\n\n/***/ }),\n\n/***/ \"fdbf\":\n/***/ (function(module, exports, __nested_webpack_require_428424__) {\n\nvar NATIVE_SYMBOL = __nested_webpack_require_428424__(\"4930\");\n\nmodule.exports = NATIVE_SYMBOL\n  // eslint-disable-next-line no-undef\n  && !Symbol.sham\n  // eslint-disable-next-line no-undef\n  && typeof Symbol.iterator == 'symbol';\n\n\n/***/ }),\n\n/***/ \"fea9\":\n/***/ (function(module, exports, __nested_webpack_require_428726__) {\n\nvar global = __nested_webpack_require_428726__(\"da84\");\n\nmodule.exports = global.Promise;\n\n\n/***/ })\n\n/******/ })[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-cal/dist/vuecal.common.js\n");

/***/ })

}]);